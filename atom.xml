<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阳仔的博客</title>
  
  <subtitle>选择性失忆</subtitle>
  <link href="/keaichong.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-14T14:46:49.694Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>愚人阳仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重庆农商行总结</title>
    <link href="http://yoursite.com/2019/11/14/%E9%87%8D%E5%BA%86%E5%86%9C%E5%95%86%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/14/重庆农商行总结/</id>
    <published>2019-11-14T14:18:40.000Z</published>
    <updated>2019-11-14T14:46:49.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对props进行双向数据绑定"><a href="#对props进行双向数据绑定" class="headerlink" title="对props进行双向数据绑定"></a>对props进行双向数据绑定</h2><ol><li>方法一 vue文档 .sync修饰符 </li><li>方法二  在使用第三方的组件的时候，有时候需要对第三方的组件v-model绑定props，这时候使用.sync依然存在vue警告</li></ol><ul><li>解决方法 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 不能直接监听childrenData变化，因为data中把parentData对象赋值给了childrenData，之后parentData更新，parentData和childrenData指向了两个不同地地址，因此childrenData不会得到更新，所以此处要用到监听</span></span><br><span class="line">        childrenData: <span class="keyword">this</span>.parentData,<span class="comment">//1.①创建props属性parentData的副本--childrenData</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">props: [<span class="string">'parentData'</span>],</span><br><span class="line">watch: &#123;</span><br><span class="line">    parentData(newVal)&#123; <span class="comment">//2. ②监听外部对props属性parentData的变更，并同步到组件内的data属性childrenData中</span></span><br><span class="line">          <span class="keyword">this</span>.childrenData = newVal</span><br><span class="line">    &#125;,</span><br><span class="line">    childrenData(newVal)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"getChildrenStatus"</span>,newVal);<span class="comment">//3. ③组件内对parentData变更后向外部发送事件通知</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/scrip</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ol start="3"><li>props却只显示第一次的内容，不会随着更新，也就是说组件不会重新渲染  原因如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">类似于这样，比如说：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">6</span> &#125; <span class="comment">// 这个代表父组件的 data</span></span><br><span class="line"><span class="keyword">var</span> props <span class="comment">// 这个代表子组件的 props</span></span><br><span class="line">完成第一次渲染后，子组件得到 props，相当于：</span><br><span class="line"></span><br><span class="line">props = data</span><br><span class="line">你会发现 props 和 data 实际上指向同一个对象。如果你更新对象的某一个属性的话，自然就是他们两个同时都得到更新了。如果是更新整个对象的话，则相当于：</span><br><span class="line"></span><br><span class="line">data = &#123; <span class="attr">a</span>: <span class="number">7</span>, <span class="attr">b</span>: <span class="number">8</span>, <span class="attr">c</span>: <span class="number">9</span> &#125;</span><br><span class="line">此时 data 指向一个新的对象，props 却还是指向旧的对象。</span><br><span class="line"></span><br><span class="line">data === props <span class="comment">// =&gt; false</span></span><br><span class="line">再等到下一次渲染，子组件得到新的 props，才变成：</span><br><span class="line"></span><br><span class="line">props = data</span><br><span class="line">此时两者就又指向同一个对象了。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对props进行双向数据绑定&quot;&gt;&lt;a href=&quot;#对props进行双向数据绑定&quot; class=&quot;headerlink&quot; title=&quot;对props进行双向数据绑定&quot;&gt;&lt;/a&gt;对props进行双向数据绑定&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;方法一 vue文档 .sync修饰符 &lt;/li&gt;
&lt;li&gt;方法二  在使用第三方的组件的时候，有时候需要对第三方的组件v-model绑定props，这时候使用.sync依然存在vue警告&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;解决方法 &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 不能直接监听childrenData变化，因为data中把parentData对象赋值给了childrenData，之后parentData更新，parentData和childrenData指向了两个不同地地址，因此childrenData不会得到更新，所以此处要用到监听&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        childrenData: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.parentData,&lt;span class=&quot;comment&quot;&gt;//1.①创建props属性parentData的副本--childrenData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;props: [&lt;span class=&quot;string&quot;&gt;&#39;parentData&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;watch: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    parentData(newVal)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//2. ②监听外部对props属性parentData的变更，并同步到组件内的data属性childrenData中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.childrenData = newVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    childrenData(newVal)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$emit(&lt;span class=&quot;string&quot;&gt;&quot;getChildrenStatus&quot;&lt;/span&gt;,newVal);&lt;span class=&quot;comment&quot;&gt;//3. ③组件内对parentData变更后向外部发送事件通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/scrip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>echarts笔记</title>
    <link href="http://yoursite.com/2019/10/28/echarts%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/28/echarts笔记/</id>
    <published>2019-10-27T16:01:11.000Z</published>
    <updated>2019-10-27T16:06:00.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="圆环图中心样式自定义使用富文本rich"><a href="#圆环图中心样式自定义使用富文本rich" class="headerlink" title="圆环图中心样式自定义使用富文本rich"></a>圆环图中心样式自定义使用富文本rich</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name:'访问来源',</span><br><span class="line">            type:'pie',</span><br><span class="line">            label: &#123;</span><br><span class="line">                // 在文本中，可以对部分文本采用 rich 中定义样式。</span><br><span class="line">                // 这里需要在文本中使用标记符号：</span><br><span class="line">                // `&#123;styleName|text content text content&#125;` 标记样式名。</span><br><span class="line">                // 注意，换行仍是使用 '\n'。</span><br><span class="line">                formatter: [</span><br><span class="line">                    '&#123;a|这段文本采用样式a&#125;',</span><br><span class="line">                    '&#123;b|这段文本采用样式b&#125;这段用默认样式&#123;x|这段用样式x&#125;'</span><br><span class="line">                ].join('\n'),</span><br><span class="line"></span><br><span class="line">                rich: &#123;</span><br><span class="line">                    a: &#123;</span><br><span class="line">                        color: 'red',</span><br><span class="line">                        lineHeight: 10</span><br><span class="line">                    &#125;,</span><br><span class="line">                    b: &#123;</span><br><span class="line">                        backgroundColor: &#123;</span><br><span class="line">                            image: 'xxx/xxx.jpg'</span><br><span class="line">                        &#125;,</span><br><span class="line">                        height: 40</span><br><span class="line">                    &#125;,</span><br><span class="line">                    x: &#123;</span><br><span class="line">                        fontSize: 18,</span><br><span class="line">                        fontFamily: 'Microsoft YaHei',</span><br><span class="line">                        borderColor: '#449933',</span><br><span class="line">                        borderRadius: 4</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;圆环图中心样式自定义使用富文本rich&quot;&gt;&lt;a href=&quot;#圆环图中心样式自定义使用富文本rich&quot; class=&quot;headerlink&quot; title=&quot;圆环图中心样式自定义使用富文本rich&quot;&gt;&lt;/a&gt;圆环图中心样式自定义使用富文本rich&lt;/h3&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>父子组件created执行顺序</title>
    <link href="http://yoursite.com/2019/10/21/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6created%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/10/21/父子组件created执行顺序/</id>
    <published>2019-10-21T14:13:59.000Z</published>
    <updated>2019-11-14T06:07:53.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行顺序如下："><a href="#执行顺序如下：" class="headerlink" title="执行顺序如下："></a>执行顺序如下：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父组件 created</span><br><span class="line">子组件 created</span><br><span class="line">子组件 mounted</span><br><span class="line">父组件 mounted</span><br></pre></td></tr></table></figure><p>如果有多个子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父组件created钩子结束后，依次执行子组件的created钩子</span><br><span class="line">多个子组件的created执行顺序为父组件内子组件DOM顺序</span><br><span class="line">多个子组件的mounted顺序无法保证，跟子组件本身复杂程度有关</span><br><span class="line">父组件一定在所有子组件结束mounted钩子之后，才会进入mounted钩子</span><br></pre></td></tr></table></figure></p><h2 id="兄弟组件三种通信方式"><a href="#兄弟组件三种通信方式" class="headerlink" title="兄弟组件三种通信方式"></a>兄弟组件三种通信方式</h2><ol><li>子传父 父传子</li><li>vuex</li><li>借助中央事件总线</li><li><a href="https://blog.csdn.net/amanda_wmy/article/details/80134823" target="_blank" rel="noopener">文档：vue组件之间互相传值：兄弟组件通信</a><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span> <span class="attr">ref</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"status==true"</span>&gt;</span>注册成为英皇宝代理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">"status"</span>],</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      src: <span class="built_in">require</span>(<span class="string">"@/assets/img/sign/logo.png"</span>)</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">   <span class="comment">//不能直接使用这个props的status，一定要经过computed处理，因为props是单项数据流，当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，否则Vue 会在控制台给出警告。</span></span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="undefined">    isShow() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.status;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//不要直接监听props属性，props单项数据流，子组件改变status时，父组件status不会改变</span></span></span><br><span class="line"><span class="undefined">    isShow: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//深度监听，可监听到对象、数组的变化</span></span></span><br><span class="line"><span class="undefined">      handler(newV, oldV) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// do something, 可使用this</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newV, oldV);</span></span><br><span class="line"><span class="javascript">          <span class="comment">//根据属性变化改变样式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (newV == <span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.logo.classList.add(<span class="string">"agency"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      deep: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="子组件修改父组件传进来的props"><a href="#子组件修改父组件传进来的props" class="headerlink" title="子组件修改父组件传进来的props"></a>子组件修改父组件传进来的props</h3><ul><li>方法一，可以通过$emit向父组件发送一个事件，父组件使用$on监听事件对数据进行修改。在vue2.3新增了.sync修饰符，会自动帮你绑定一个update事件，也就是说使用.sync之后，你只需要子组件中需要修改的地方$emit一个update:prop的事件就可以了。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"details"</span>&gt;</span><br><span class="line">        &lt;myComponent :show.sync=<span class="string">'valueChild'</span> style=<span class="string">"padding: 30px 20px 30px 5px;border:1px solid #ddd;margin-bottom: 10px;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">myComponent</span>&gt;</span></span></span><br><span class="line">        &lt;button @click=<span class="string">"changeValue"</span>&gt;toggle&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Vue from 'vue'</span></span><br><span class="line"><span class="regexp">Vue.component('myComponent', &#123;</span></span><br><span class="line"><span class="regexp">      template: `&lt;div v-if="show"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;默认初始值是&#123;&#123;show&#125;&#125;，所以是显示的&lt;/</span>p&gt;</span><br><span class="line">                    &lt;button @click.stop=<span class="string">"closeDiv"</span>&gt;关闭&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                 &lt;/</span>div&gt;<span class="string">`,</span></span><br><span class="line"><span class="string">      props:['show'],</span></span><br><span class="line"><span class="string">      methods: &#123;</span></span><br><span class="line"><span class="string">        closeDiv() &#123;</span></span><br><span class="line"><span class="string">          this.$emit('update:show', false); //触发 input 事件，并传入新值,就把props的show的值改为了false了</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">export default&#123;</span></span><br><span class="line"><span class="string">    data()&#123;</span></span><br><span class="line"><span class="string">        return&#123;</span></span><br><span class="line"><span class="string">            valueChild:true,</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods:&#123;</span></span><br><span class="line"><span class="string">        changeValue()&#123;</span></span><br><span class="line"><span class="string">            this.valueChild = !this.valueChild</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方法二 ：把 prop 赋值给一个局部变量，然后需要修改的话就修改这个局部变量，而不影响 prop<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;执行顺序如下：&quot;&gt;&lt;a href=&quot;#执行顺序如下：&quot; class=&quot;headerlink&quot; title=&quot;执行顺序如下：&quot;&gt;&lt;/a&gt;执行顺序如下：&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父组件 created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子组件 created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子组件 mounted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;父组件 mounted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有多个子组件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父组件created钩子结束后，依次执行子组件的created钩子&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多个子组件的created执行顺序为父组件内子组件DOM顺序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多个子组件的mounted顺序无法保证，跟子组件本身复杂程度有关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;父组件一定在所有子组件结束mounted钩子之后，才会进入mounted钩子&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;兄弟组件三种通信方式&quot;&gt;&lt;a href=&quot;#兄弟组件三种通信方式&quot; class=&quot;headerlink&quot; title=&quot;兄弟组件三种通信方式&quot;&gt;&lt;/a&gt;兄弟组件三种通信方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;子传父 父传子&lt;/li&gt;
&lt;li&gt;vuex&lt;/li&gt;
&lt;li&gt;借助中央事件总线&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/amanda_wmy/article/details/80134823&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档：vue组件之间互相传值：兄弟组件通信&lt;/a&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>rem适配问题</title>
    <link href="http://yoursite.com/2019/08/19/rem%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/08/19/rem适配问题/</id>
    <published>2019-08-19T06:57:58.000Z</published>
    <updated>2019-08-19T07:02:01.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何把-UE-图中获取像素单位值转换位-rem-单位的值"><a href="#如何把-UE-图中获取像素单位值转换位-rem-单位的值" class="headerlink" title="如何把 UE 图中获取像素单位值转换位 rem 单位的值"></a>如何把 UE 图中获取像素单位值转换位 rem 单位的值</h2><ul><li>公式是元素宽度/UE 宽度<em>100,让我们举个例子,假设 UE 图尺寸是 640px,UE 图中的一个元素宽度是 100px,根据公式 100/640</em>100=15.625</li></ul><h2 id="一：使用-rem-来设置字体"><a href="#一：使用-rem-来设置字体" class="headerlink" title="一：使用 rem 来设置字体"></a>一：使用 rem 来设置字体</h2><ol><li><p>为了方便计算字体，我们来设置浏览器 10px，我们都知道浏览器默认的像素是 16px，因此我们需要对 html{font-size:62.5%;} // 10 / 16 = 62.5%;</p></li><li><p>首先假如设计搞在移动端上是按照 750px 设计稿上的话，假如字体在 750px 下字体大小我们使用 rem 来写大小；那么他们的字体大小在各个独立像素下如下计算：</p></li></ol><ul><li>针对设备独立像素为 640px ~ 999px 的 css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">640px</span>) and (max-width: <span class="number">999px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 750/640 = 1.17*/</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">53.42%</span>;</span><br><span class="line">  &#125; <span class="comment">/*62.5% / 1.17 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">400px</span>) and (max-width: <span class="number">450px</span>) &#123;</span><br><span class="line">  <span class="comment">/*  750 / 400 = 1.875 */</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">33.33%</span>;</span><br><span class="line">  &#125; <span class="comment">/* 62.5% / 1.875 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">360px</span>) and (max-width: <span class="number">399px</span>) &#123;</span><br><span class="line">  <span class="comment">/*  750 / 360 = 2.08 */</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30%</span>;</span><br><span class="line">  &#125; <span class="comment">/* 62.5% / 2.08  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">320px</span>) and (max-width: <span class="number">359px</span>) &#123;</span><br><span class="line">  <span class="comment">/*  750/320 = 2.34 */</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26.7%</span>;</span><br><span class="line">  &#125; <span class="comment">/* 62.5 / 2.34 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二：-针对宽度，高度，background-size-margin-及-padding-的计算方法；"><a href="#二：-针对宽度，高度，background-size-margin-及-padding-的计算方法；" class="headerlink" title="二： 针对宽度，高度，background-size, margin 及 padding 的计算方法；"></a>二： 针对宽度，高度，background-size, margin 及 padding 的计算方法；</h2><ol><li>假如在 750px 下的宽度是 132px；高度是 132px；background-size:132px 132px; margin:20px;Padding:20px;<br>针对设备独立像素为 640px ~ 999px 的 css</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">640px</span>) and (max-width: <span class="number">999px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 750/640 = 1.17*/</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">53.42%</span>;</span><br><span class="line">  &#125; <span class="comment">/*62.5% / 1.17 */</span></span><br><span class="line"></span><br><span class="line">  // 下面的属性都是 本身的像素 / 1.17 得来的</span><br><span class="line"></span><br><span class="line">  width: 112.82px; // 132 / 1.17</span><br><span class="line"></span><br><span class="line">  height: 112.82px; // 132 / 1.17</span><br><span class="line"></span><br><span class="line">  background-size: 112.82px 112.82px; // 132 / 1.17</span><br><span class="line"></span><br><span class="line">  margin: 17.09px; // 20 / 1.17</span><br><span class="line"></span><br><span class="line">  padding: 17.09px; // 20 / 1.17</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何把-UE-图中获取像素单位值转换位-rem-单位的值&quot;&gt;&lt;a href=&quot;#如何把-UE-图中获取像素单位值转换位-rem-单位的值&quot; class=&quot;headerlink&quot; title=&quot;如何把 UE 图中获取像素单位值转换位 rem 单位的值&quot;&gt;&lt;/a&gt;如何
      
    
    </summary>
    
    
      <category term="盒模型" scheme="http://yoursite.com/tags/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue-router的history坑</title>
    <link href="http://yoursite.com/2019/08/14/vue-router%E7%9A%84history%E5%9D%91/"/>
    <id>http://yoursite.com/2019/08/14/vue-router的history坑/</id>
    <published>2019-08-14T06:20:04.000Z</published>
    <updated>2019-08-16T07:38:12.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决使用-vue-cli-生成项目后项目地址自动添加-号的问题"><a href="#解决使用-vue-cli-生成项目后项目地址自动添加-号的问题" class="headerlink" title="解决使用 vue-cli 生成项目后项目地址自动添加#号的问题"></a>解决使用 vue-cli 生成项目后项目地址自动添加#号的问题</h2><p><strong>vue 的路由在默认的 hash 模式下,url 会带有一个#,不美观,而且在微信分享,授权登录等都会有一些坑.所以 history 模式（不带#号）也会有一些应用场景.</strong></p><h2 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h2><p><strong>变为 history 模式，子路由在刷新情况下会出现样式变乱的情况，解决方法如下：</strong><br><a id="more"></a></p><ul><li>直接修改 index.html 文件中的静态文件引入路径就 OK 了</li></ul><ol><li><p>修改前:<link rel="stylesheet" href="./static/css/base.css"></p></li><li><p>修改后:<link rel="stylesheet" href="/static/css/base.css"></p></li></ol><h2 id="修改原理："><a href="#修改原理：" class="headerlink" title="修改原理："></a>修改原理：</h2><ol><li><p>./ 是指用户所在的当前目录（相对路径）；</p></li><li><p>/ 是指根目录（绝对路径，项目根目录），也就是项目根目录；</p></li><li><p>对于 hash 模式，根路径是固定的，就是项目的根目录，但是 history 模式下，以 / 开头的嵌套路径会被当作根路径，所以使用“./”引入文件，就会找不到文件了，因为文件本身就是在项目根目录下的，并不在嵌套路径这个目录下。</p></li><li><p>总结，无论 hash 模式还是 history 模式，可以直接使用“/”从项目根目录引入静态文件。</p></li></ol><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二:"></a>问题二:</h2><p><strong>vue 的路由在默认的 hash 模式下,默认打包一般不会有什么问题，而 history 模式打包后回出现页面一片空白的情况,而且没有资源加载错误的报错信息.</strong></p><ol><li><p>参考文章<a href="https://www.jb51.net/article/142831.htm" target="_blank" rel="noopener">https://www.jb51.net/article/142831.htm</a></p></li><li><p><a href="https://blog.csdn.net/g1531997389/article/details/79154179" target="_blank" rel="noopener">https://blog.csdn.net/g1531997389/article/details/79154179</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决使用-vue-cli-生成项目后项目地址自动添加-号的问题&quot;&gt;&lt;a href=&quot;#解决使用-vue-cli-生成项目后项目地址自动添加-号的问题&quot; class=&quot;headerlink&quot; title=&quot;解决使用 vue-cli 生成项目后项目地址自动添加#号的问题&quot;&gt;&lt;/a&gt;解决使用 vue-cli 生成项目后项目地址自动添加#号的问题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;vue 的路由在默认的 hash 模式下,url 会带有一个#,不美观,而且在微信分享,授权登录等都会有一些坑.所以 history 模式（不带#号）也会有一些应用场景.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题一：&quot;&gt;&lt;a href=&quot;#问题一：&quot; class=&quot;headerlink&quot; title=&quot;问题一：&quot;&gt;&lt;/a&gt;问题一：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;变为 history 模式，子路由在刷新情况下会出现样式变乱的情况，解决方法如下：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli跨域代理</title>
    <link href="http://yoursite.com/2019/08/13/vue-cli%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/13/vue-cli跨域代理/</id>
    <published>2019-08-13T01:28:47.000Z</published>
    <updated>2019-12-05T12:53:26.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>这里的vue代理是 vue静态服务器做代理。使用的是 http-proxy-middleware 这个模块（这个模块相当于是node.js的一个插件）。<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//vue-cli3.0 里面的 vue.config.js做配置</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">'/rng'</span>: &#123;     <span class="comment">//这里最好有一个 /</span></span><br><span class="line">            target: <span class="string">'http://45.105.124.130:8081'</span>,  <span class="comment">// 后台接口域名</span></span><br><span class="line">            ws: <span class="literal">true</span>,        <span class="comment">//如果要代理 websockets，配置这个参数</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>,  <span class="comment">//是否跨域</span></span><br><span class="line">            pathRewrite:&#123;</span><br><span class="line">                <span class="string">'^/rng'</span>:<span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>说明 ：</li><li>我的 api=’/rng’</li><li>我的请求地址  ${api}/xxxx/xxx ，请求地址就为 ‘/rng/xxxx/xxx’<br>当node服务器 遇到 以 ‘/rng’ 开头的请求，就会把 target 字段加上，那么我的请求地址就为 <a href="http://45.105.124.130:8081/rng/xxxx/xxx" target="_blank" rel="noopener">http://45.105.124.130:8081/rng/xxxx/xxx</a><br>下面的 pathRewrite 表示的意思是 把/rng 替换为 空，那么我的请求地址就为 <a href="http://45.105.124.130:8081/xxxx/xxx（用在如果你的实际请求地址没有" target="_blank" rel="noopener">http://45.105.124.130:8081/xxxx/xxx（用在如果你的实际请求地址没有</a> rng 的情况）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;这里的vue代理是 vue静态服务器做代理。使用的是 http-proxy-middleware 这个模块（这个模块相当于是no
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git stash和git add</title>
    <link href="http://yoursite.com/2019/08/12/git-stash%E5%92%8Cgit-add/"/>
    <id>http://yoursite.com/2019/08/12/git-stash和git-add/</id>
    <published>2019-08-12T07:50:03.000Z</published>
    <updated>2019-08-12T08:05:50.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-stash-常用命令"><a href="#git-stash-常用命令" class="headerlink" title="git stash 常用命令:"></a>git stash 常用命令:</h2><ol><li><p>git stash save “save message” : 执行存储时，添加备注，方便查找，只有 git stash 也要可以的，但查找时不方便识别。</p></li><li><p>git stash list ：查看 stash 了哪些存储</p></li><li><p>git stash show ：显示做了哪些改动，默认 show 第一个存储,如果要显示其他存贮，后面加 stash@{\$num}，比如第二个 git stash show stash@{1}</p></li><li><p>git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{\$num} -p ，比如第二个：git stash show stash@{1} -p</p><a id="more"></a></li><li><p>git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@{0}，如果要使用其他个，git stash apply stash@{\$num} ， 比如第二个：git stash apply stash@{1}</p></li><li><p>git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应 stash 删除，并将对应修改应用到当前的工作目录下,默认为第一个 stash,即 stash@{0}，如果要应用并删除其他 stash，命令：git stash pop stash@{\$num} ，比如应用并删除第二个：git stash pop stash@{1}</p></li><li><p>git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储</p></li><li><p>git stash clear ：删除所有缓存的 stash</p></li></ol><ul><li><p>说明:<font color="red">新增的文件，直接执行 stash 是不会被存储的,如果要保存这个新增的文件,需要先执行下 git add 把文件加到 git 版本控制中，然后再 git stash 就可以了</font></p></li><li><p>总结下：<font color="red">git add 只是把文件加到 git 版本控制里，并不等于就被 stash 起来了，git add 和 git stash 没有必然的关系，但是执行 git stash 能正确存储的前提是文件必须在 git 版本控制中才行。</font></p></li></ul><ul><li>常规 git stash 的一个限制是它会一下暂存所有的文件。有时，只备份某些文件更为方便，让另外一些与代码库保持一致。一个非常有用的技巧，用来备份部分文件：</li></ul><ol><li>add 那些你不想备份的文件（例如： git add file1.js, file2.js）</li><li>调用 git stash –keep-index。只会备份那些没有被 add 的文件。</li><li>调用 git reset 取消已经 add 的文件的备份，继续自己的工作。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git-stash-常用命令&quot;&gt;&lt;a href=&quot;#git-stash-常用命令&quot; class=&quot;headerlink&quot; title=&quot;git stash 常用命令:&quot;&gt;&lt;/a&gt;git stash 常用命令:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git stash save “save message” : 执行存储时，添加备注，方便查找，只有 git stash 也要可以的，但查找时不方便识别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git stash list ：查看 stash 了哪些存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git stash show ：显示做了哪些改动，默认 show 第一个存储,如果要显示其他存贮，后面加 stash@{\$num}，比如第二个 git stash show stash@{1}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{\$num} -p ，比如第二个：git stash show stash@{1} -p&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>slot插槽使用</title>
    <link href="http://yoursite.com/2019/08/12/slot%E6%8F%92%E6%A7%BD%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/12/slot插槽使用/</id>
    <published>2019-08-12T02:31:20.000Z</published>
    <updated>2019-08-12T03:10:02.640Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://segmentfault.com/a/1190000012996217" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012996217</a><h2 id="子组件-Child"><a href="#子组件-Child" class="headerlink" title="子组件 Child"></a>子组件 Child</h2></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- // 作用域插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:aa</span>=<span class="string">"data"</span> <span class="attr">:bb</span>=<span class="string">"shuju"</span> <span class="attr">cc</span>=<span class="string">"这是一首简单的歌"</span>&gt;</span> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// props的值来源于父组件</span></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">"无数据"</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      shuju: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">"无数据"</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="父组件使用"><a href="#父组件使用" class="headerlink" title="父组件使用"></a>父组件使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:data</span>=<span class="string">"dataprop"</span> <span class="attr">:shuju</span>=<span class="string">"shuju1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;template v-slot="scope"&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue2.6以上语法 v-slot:default="scope" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- scope是一个对象 对象的属性是child组件中&lt;slot&gt;绑定的属性 对象的值是&lt;slot&gt;绑定的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>下面是scope内容:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;scope&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in scope.aa"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>姓名:&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in scope.bb"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">          姓名:&#123;&#123;item.name&#125;&#125;-年龄:&#123;&#123;item.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>歌曲:&#123;&#123;scope.cc&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./child.vue"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        dataprop: [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wanwu"</span>, <span class="string">"zhaoliu"</span>, <span class="string">"tianqi"</span>, <span class="string">"xiaoba"</span>],</span></span><br><span class="line"><span class="undefined">        shuju1: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">"科比"</span>,</span></span><br><span class="line"><span class="javascript">            age: <span class="string">"29"</span>,</span></span><br><span class="line"><span class="javascript">            sex: <span class="string">"man"</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">"欧文"</span>,</span></span><br><span class="line"><span class="javascript">            age: <span class="string">"30"</span>,</span></span><br><span class="line"><span class="javascript">            sex: <span class="string">"woman"</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Child</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="页面显示内容"><a href="#页面显示内容" class="headerlink" title="页面显示内容"></a>页面显示内容</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">我是父组件</span><br><span class="line">我是子组件child</span><br><span class="line">下面是scope内容:</span><br><span class="line">&#123; <span class="attr">"aa"</span>: [ <span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wanwu"</span>, <span class="string">"zhaoliu"</span>, <span class="string">"tianqi"</span>, <span class="string">"xiaoba"</span> ], <span class="attr">"bb"</span>: [ &#123; <span class="attr">"name"</span>: <span class="string">"科比"</span>, <span class="attr">"age"</span>: <span class="string">"29"</span>, <span class="attr">"sex"</span>: <span class="string">"man"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"欧文"</span>, <span class="attr">"age"</span>: <span class="string">"30"</span>, <span class="attr">"sex"</span>: <span class="string">"woman"</span> &#125; ], <span class="attr">"cc"</span>: <span class="string">"这是一首简单的歌"</span> &#125;</span><br><span class="line">姓名:zhangsan</span><br><span class="line">姓名:lisi</span><br><span class="line">姓名:wanwu</span><br><span class="line">姓名:zhaoliu</span><br><span class="line">姓名:tianqi</span><br><span class="line">姓名:xiaoba</span><br><span class="line">姓名:科比-年龄:29</span><br><span class="line">姓名:欧文-年龄:30</span><br><span class="line">歌曲:这是一首简单的歌</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012996217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000012996217&lt;/a&gt;&lt;h2 id=&quot;子组件-Child&quot;&gt;&lt;a href=&quot;#子组件-Child&quot; class=&quot;headerlink&quot; title=&quot;子组件 Child&quot;&gt;&lt;/a&gt;子组件 Child&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;我是子组件child&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- // 作用域插槽 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:aa&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:bb&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;shuju&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cc&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;这是一首简单的歌&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;slot&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    data() &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// props的值来源于父组件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    props: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      data: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        type: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;无数据&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        required: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      shuju: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        type: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;无数据&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        required: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>axios封装</title>
    <link href="http://yoursite.com/2019/07/11/axios%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/07/11/axios封装/</id>
    <published>2019-07-11T08:15:17.000Z</published>
    <updated>2019-07-11T08:23:38.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="axios-封装-api-模块化-vuex"><a href="#axios-封装-api-模块化-vuex" class="headerlink" title="axios 封装 api 模块化 vuex"></a>axios 封装 api 模块化 vuex</h2><ul><li><p><a href="https://juejin.im/post/5c3c544c6fb9a049d37f5903" target="_blank" rel="noopener">https://juejin.im/post/5c3c544c6fb9a049d37f5903</a></p></li><li><p>在 src 目录下创建 utils/， 并创建 request.js 用来封装 axios，上代码：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios 实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.BASE_API, <span class="comment">// api的base_url</span></span><br><span class="line">  timeout: <span class="number">10000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里可以自定义一些config 配置</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">//  这里处理一些请求出错的情况</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="comment">// 这里处理一些response 正常放回时的逻辑</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里处理一些response 出错时的逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><ul><li>如何使用？ 我比较建议在 src/下创建 api 目录，用来统一管理所有的请求，比如下面这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//登陆</span></span><br><span class="line">  login(data) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">"/login"</span>,</span><br><span class="line">      method: <span class="string">"post"</span>,</span><br><span class="line">      data</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取用户信息</span></span><br><span class="line">  getuserInfo() &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">"/userInfo"</span>,</span><br><span class="line">      method: <span class="string">"get"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>这样的好处是方便管理、后期维护，还可以和后端的微服务对应，建立多文件存放不同模块的 api。剩下的就是你使用到哪个 api 时，自己引入便可。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;axios-封装-api-模块化-vuex&quot;&gt;&lt;a href=&quot;#axios-封装-api-模块化-vuex&quot; class=&quot;headerlink&quot; title=&quot;axios 封装 api 模块化 vuex&quot;&gt;&lt;/a&gt;axios 封装 api 模块化 vuex&lt;/
      
    
    </summary>
    
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>PS切图</title>
    <link href="http://yoursite.com/2019/06/27/PS%E5%88%87%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/06/27/PS切图/</id>
    <published>2019-06-27T08:14:46.000Z</published>
    <updated>2019-09-03T03:21:25.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h3><ol><li>选择工具栏矩形选框工具</li><li>顶栏样式选择固定大小</li><li>选中切图区域后标注辅助线</li><li>ctrl+c 复制选中图层</li><li>ctrl+n 新建图层</li><li>ctrl+v 粘贴图层</li><li>ctrl+shift+alt+s 保存剪切好的图层到指定位置</li></ol><h2 id="js-原生添加样式"><a href="#js-原生添加样式" class="headerlink" title="js 原生添加样式"></a>js 原生添加样式</h2><ol><li>document.getElementById(“d1”).style.cssText = “color:red; font-size:13px;”;</li><li>document.getElementById(“myDIV”).classList.add(“mystyle”);</li></ol><h2 id="less-的-amp-用法"><a href="#less-的-amp-用法" class="headerlink" title="less 的&amp;用法"></a>less 的&amp;用法</h2><ol><li><ul><li>p+p 兄弟选择器,某元素后相邻的兄弟元素,p 后面的 p 样式</li></ul></li></ol><h2 id="some-和-every-的用法"><a href="#some-和-every-的用法" class="headerlink" title="some 和 every 的用法"></a>some 和 every 的用法</h2><ul><li>every()是对数组中每一项运行给定函数，如果该函数对每一项返回 true,则返回 true。</li><li>some()是对数组中每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。</li><li>some 一直在找符合条件的值，一旦找到，则不会继续迭代下去。</li><li>every 从迭代开始，一旦有一个不符合条件，则不会继续迭代下去。</li></ul><h2 id="map-和-foreach"><a href="#map-和-foreach" class="headerlink" title="map 和 foreach"></a>map 和 foreach</h2><ol><li>相同点：<br>　　　　　　 1.都是循环遍历数组中的每一项；<br>　　　　　　 2.在遍历中执行匿名函数都可以接收三个参数，分别为：遍历过程的每一项、遍历序号（索引值）、原数组；<br>　　　　　　 3.执行的匿名函数中 的 this 都指向 window。</li><li>不同点：<br>　　　　　　 map():<br>　　　　　　根据遍历执行的匿名函数，对于原数组中的每个值产生一个对应的值，并返回一个新的数组，存在一个映射关系，并且不会改变原数组，不会对空数组进行检测。</li></ol><h2 id="startswith-和-endswith"><a href="#startswith-和-endswith" class="headerlink" title="startswith 和 endswith"></a>startswith 和 endswith</h2><ul><li>定义: startsWith() 方法用于检测字符串是否以指定的子字符串开始。如果是以指定的子字符串开头返回 true，否则 false。startsWith() 方法对大小写敏感。</li></ul><ol><li>string.startsWith(searchvalue, 开始索引)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">"file:///C:/Users/iTAze/Desktop/1.html.png"</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">"https://mp.csdn.net/postedit.jpg"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.endsWith(<span class="string">".png"</span>)); <span class="comment">// true;</span></span><br><span class="line"><span class="built_in">console</span>.log(str1.endsWith(<span class="string">".jpg"</span>)); <span class="comment">// false;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.endsWith(<span class="string">".png"</span>)); <span class="comment">// false;</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.endsWith(<span class="string">".jpg"</span>)); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><h2 id="if-后面不加大括号-只执行第一句"><a href="#if-后面不加大括号-只执行第一句" class="headerlink" title="if 后面不加大括号 只执行第一句"></a>if 后面不加大括号 只执行第一句</h2><h2 id="a-和-a-的区别"><a href="#a-和-a-的区别" class="headerlink" title="a++和++a 的区别"></a>a++和++a 的区别</h2><ul><li><p>单独使用时，功能一模一样，都是让 a 的值增加 1；不同的是与赋值号“=”一起使用时，y=++a 表示先将 a 的值增加 1 后，再把值赋给 y；而，y=a++表示先把 a 的值给 y，a 自己再增加 1.</p><a id="more"></a></li></ul><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><ul><li><p>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 。如果对象的键-值都不可枚举，那么将返回由键组成的数组。</p></li><li><p>Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的 object 上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。(不包括方法)</p></li><li><p>如果你只要获取到可枚举属性，查看 Object.keys 或用 for…in 循环（还会获取到原型链上的可枚举属性，不过可以使用 hasOwnProperty()方法过滤掉）。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"song"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">address</span>: <span class="string">"重庆"</span>, <span class="attr">post</span>: <span class="string">"844746@qq.com"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="comment">// ["name", "age", "address", "post"]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); <span class="comment">// console: ['0', '1', '2']</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-遍历-is-方法"><a href="#jQuery-遍历-is-方法" class="headerlink" title="jQuery 遍历 - is() 方法"></a>jQuery 遍历 - is() 方法</h2><ul><li>is() 根据选择器、元素或 jQuery 对象来检测匹配元素集合，如果这些元素中至少有一个元素匹配给定的参数，则返回 true。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list <span class="tag">&lt;<span class="name">strong</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>list item 2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>list item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"ul"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $target = $(event.target);</span><br><span class="line">  <span class="keyword">if</span> ($target.is(<span class="string">"li"</span>)) &#123;</span><br><span class="line">    $target.css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="判断页面是否是微信浏览器打开"><a href="#判断页面是否是微信浏览器打开" class="headerlink" title="判断页面是否是微信浏览器打开"></a>判断页面是否是微信浏览器打开</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> is_weixin = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">"micromessenger"</span>) !== <span class="number">-1</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">if</span> (is_weixin) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="data-属性"><a href="#data-属性" class="headerlink" title="data-*属性"></a>data-*属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&apos;inp&apos; type=&quot;text&quot; name=&quot;FirstName&quot; data-id=&quot;3&quot; data-name=&quot;王二小&quot; data-age=&quot;32岁&quot; value=&quot;Bill&quot; /&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure><h2 id="vscode-快捷键"><a href="#vscode-快捷键" class="headerlink" title="vscode 快捷键"></a>vscode 快捷键</h2><ol><li>选中一段文字，按 shift+alt+i，可以在每行末尾出现光标</li><li>光标放在一个地方，按 ctrl+shift+L 或者 ctrl+f2，可以在页面中出现这个词的不同地方都出现光标。有时候这个快捷键的作用和 f2 重命名变量类似，但是它更加广泛，因为还可以对比如字符串相同的非同一变量或函数类的东西修改。</li></ol><h2 id="vue-计算属性-computed"><a href="#vue-计算属性-computed" class="headerlink" title="vue 计算属性 computed"></a>vue 计算属性 computed</h2><ol><li>computed 如果依赖了 data 里的数据，当依赖变化就会触发 computed 的更新，前提是 computed 里的值必须要在模板里使用才行,否则也不会触发 computed</li></ol><h2 id="作用域插槽-带数据的插槽"><a href="#作用域插槽-带数据的插槽" class="headerlink" title="作用域插槽|带数据的插槽"></a>作用域插槽|带数据的插槽</h2><ul><li>参考 <a href="https://segmentfault.com/a/1190000012996217" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012996217</a></li><li>参考优先 <a href="https://www.bbsmax.com/A/nAJvP0Xndr/" target="_blank" rel="noopener">https://www.bbsmax.com/A/nAJvP0Xndr/</a></li></ul><ol><li>slot-scope=’scope’ scope 是一个对象</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">匿名插槽</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">具名插槽</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"up"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>作用域插槽，实际上，对比前面两种插槽，我们可以叫它带数据的插槽。作用域插槽要求，在 slot 上面绑定数据。也就是你得写成大概下面这个样子。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">"up"</span> :data=<span class="string">"data"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        data: [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wanwu'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'tianqi'</span>,<span class="string">'xiaoba'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插槽最后显示不显示是看父组件有没有在 child 下面写模板，像下面那样。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">  html模板</span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="slice-和-concat-对数组的深拷贝"><a href="#slice-和-concat-对数组的深拷贝" class="headerlink" title="slice 和 concat 对数组的深拷贝"></a>slice 和 concat 对数组的深拷贝</h2><ul><li>slice,concat 方法的局限性,slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝不会改变原数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.slice();</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat();</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="string">"9"</span>;</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="string">"5"</span>;</span><br><span class="line"><span class="comment">//arr1 = ["1","2","3"];</span></span><br><span class="line"><span class="comment">//arr2 = ["1","9","3"];</span></span><br><span class="line"><span class="comment">//arr3 = ["1","5","3"];</span></span><br></pre></td></tr></table></figure><h2 id="ES6-数组-set-方法去重"><a href="#ES6-数组-set-方法去重" class="headerlink" title="ES6 数组 set 方法去重"></a>ES6 数组 set 方法去重</h2><ul><li>ES6 提供了新的数据结构 Set，它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Set 轻松实现并集，交集，和差集</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set有has方法 返回ture和false</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b]);</span><br><span class="line"><span class="comment">// Set&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span>=&gt;</span>b.has(x)))；</span><br><span class="line"><span class="comment">//函数内容只有一行可以省略return</span></span><br><span class="line"><span class="comment">//Set&#123;2，3&#125;</span></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span>=&gt;</span>！b.has(x)))；</span><br><span class="line"><span class="comment">//Set&#123;1&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="获取表单中所有具有-name-属性的值"><a href="#获取表单中所有具有-name-属性的值" class="headerlink" title="获取表单中所有具有 name 属性的值"></a>获取表单中所有具有 name 属性的值</h2><ul><li>获取表单中所有具有 name 属性的值 包括</li><li>var formData = \$(‘#edit_form’).serialize();</li></ul><h2 id="js-判断字符串长度"><a href="#js-判断字符串长度" class="headerlink" title="js 判断字符串长度"></a>js 判断字符串长度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.gblen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.charCodeAt(i) &gt; <span class="number">127</span> || <span class="keyword">this</span>.charCodeAt(i) == <span class="number">94</span>) &#123;</span><br><span class="line">      len += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      len++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h2><ul><li>表单序列化的三种方式</li><li><a href="https://www.cnblogs.com/tanzq/p/9857213.html" target="_blank" rel="noopener">https://www.cnblogs.com/tanzq/p/9857213.html</a></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $("button").click(function()&#123;</span><br><span class="line">    $("div").text($("form").serialize());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;form action=""&gt;</span><br><span class="line">First name: &lt;input type="text" name="FirstName" value="Bill" /&gt;&lt;br /&gt;</span><br><span class="line">Last name: &lt;input type="text" name="LastName" value="Gates" /&gt;&lt;br /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">//最终序列化出的结果就是:FirstName=Bill&amp;LastName=Gates</span><br></pre></td></tr></table></figure><h2 id="js-选中-select-下拉框的值"><a href="#js-选中-select-下拉框的值" class="headerlink" title="js 选中 select 下拉框的值"></a>js 选中 select 下拉框的值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"select1"</span> <span class="attr">id</span>=<span class="string">"select1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">id</span>=<span class="string">"pg"</span> <span class="attr">value</span>=<span class="string">"pg"</span> <span class="attr">name</span>=<span class="string">"pg"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"xj"</span> <span class="attr">name</span>=<span class="string">"xj"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"jz"</span> <span class="attr">name</span>=<span class="string">"jz"</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"xg"</span> <span class="attr">name</span>=<span class="string">"xg"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取选择框select1</span></span><br><span class="line"><span class="keyword">var</span> select1 = <span class="built_in">document</span>.getElementById(<span class="string">"select1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择框选中的value</span></span><br><span class="line"><span class="comment">//var select1_value = select1.value;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//select1的改变事件,输出选中的选项的value</span></span><br><span class="line">select1.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(select1.value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//机械获取选择框里的选项的value</span></span><br><span class="line"><span class="keyword">var</span> option_value1 = select1.options[<span class="number">0</span>].value; <span class="comment">//"pg"</span></span><br><span class="line"><span class="keyword">var</span> option_value2 = select1.options[<span class="number">1</span>].value; <span class="comment">//"xj"</span></span><br><span class="line"><span class="keyword">var</span> option_value3 = select1.options[<span class="number">2</span>].value; <span class="comment">//"jz"</span></span><br><span class="line"><span class="keyword">var</span> option_value4 = select1.options[<span class="number">3</span>].value; <span class="comment">//"xg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前被选中选项的index值</span></span><br><span class="line"><span class="keyword">var</span> Index = select1.selectedIndex; <span class="comment">//比如选中西瓜,select1.selectedIndex=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到选中项options的value</span></span><br><span class="line">myselect.options[select1.selectedIndex].value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">select1.options[select1.selectedIndex].text;</span><br></pre></td></tr></table></figure><h2 id="文件图片上传显示"><a href="#文件图片上传显示" class="headerlink" title="文件图片上传显示"></a>文件图片上传显示</h2><ul><li><a href="https://www.cnblogs.com/gr07/p/9628523.html" target="_blank" rel="noopener">https://www.cnblogs.com/gr07/p/9628523.html</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"fileinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"sendImg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">      <span class="attr">accept</span>=<span class="string">"image/*"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> form1 = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line"><span class="comment">//文件发生改变时候触发</span></span><br><span class="line">file.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> file = event.target.files[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(file, <span class="string">"file"</span>);</span><br><span class="line">  <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="built_in">console</span>.log(reader);</span><br><span class="line">  <span class="comment">// 调用reader.readAsDataURL()方法，把图片转成base64(必须)</span></span><br><span class="line">  reader.readAsDataURL(file);</span><br><span class="line">  <span class="comment">// 监听reader对象的onload事件，当图片加载完成时，把base64编码賦值给预览图片</span></span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    img.src = <span class="keyword">this</span>.result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="聊天对话信息展示用-pre-标签包裹"><a href="#聊天对话信息展示用-pre-标签包裹" class="headerlink" title="聊天对话信息展示用 pre 标签包裹"></a>聊天对话信息展示用 pre 标签包裹</h2><ol><li>pre 这是预格式文本。它保留空格和换行。</li><li>pre 标签很适合显示计算机代码：</li></ol><p>for i = 1 to 10<br>print i<br>next i</p><h2 id="父组件获取子组件-data"><a href="#父组件获取子组件-data" class="headerlink" title="父组件获取子组件 data"></a>父组件获取子组件 data</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.form.age;</span><br></pre></td></tr></table></figure><h2 id="url-地址栏路径的问题"><a href="#url-地址栏路径的问题" class="headerlink" title="url 地址栏路径的问题"></a>url 地址栏路径的问题</h2><ul><li>E:\前端与移动开发基础\就业班 node.js\09-nodejs\视频\23_路径的问题</li></ul><h2 id="谷歌-f12-看不到-vue-的-devtools-图标"><a href="#谷歌-f12-看不到-vue-的-devtools-图标" class="headerlink" title="谷歌 f12 看不到 vue 的 devtools 图标"></a>谷歌 f12 看不到 vue 的 devtools 图标</h2><ol><li>先刷新 f5,在按 f12</li><li>看一下引用的 vue 是 vue.js 还是 vue.min.js , vue.min.js 是生产下用的， 所以 devtools 是没有用</li></ol><h2 id="forEach-和-map-比较"><a href="#forEach-和-map-比较" class="headerlink" title="forEach 和 map 比较"></a>forEach 和 map 比较</h2><ol><li>区别：map 的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）</li><li><p>map 速度比 foreach 快</p></li><li><p>map 会返回一个新数组，不对原数组产生影响,foreach 不会产生新数组，</p></li><li><p>map 因为返回数组所以可以链式操作，foreach 不能</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = arr.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> v * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//r=[2,4,5,8,10] arr= [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">//把map换为forEach 因为foreach没有返回值所以把undefined赋值给了r</span></span><br></pre></td></tr></table></figure><h2 id="块级元素居中显示-css3-属性"><a href="#块级元素居中显示-css3-属性" class="headerlink" title="块级元素居中显示 css3 属性"></a>块级元素居中显示 css3 属性</h2><ol><li>使用 css3 样式属性 display:flex 设定水平垂直居中，父元素样式属性 display:flex;子元素使用 margin:auto;未知子元素高度的时候依然可以使用。</li><li>一般 chrome 和火狐都能很好地支持。ie 不支持</li></ol><h2 id="bit-位和-Byte-字节"><a href="#bit-位和-Byte-字节" class="headerlink" title="bit 位和 Byte 字节"></a>bit 位和 Byte 字节</h2><ol><li>bit(位) 一个数字 0 或者一个数字 1;代表一位</li><li>Byte(字节) 1 Byte = 8bit ;是数据存储的最小单位</li></ol><ul><li>假设我们的宽带是 100Mbps, 第二个 b 就是 bit;但是下载网速是 12.5MB/S; 第二个 B 代表的 Byte;所以要用 100%8 才会是我们下载的理论大小速度</li></ul><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ol><li>jvm java 虚拟机</li><li>jre java 运行环境(封装有 jvm) 运行 java 代码</li><li>jdk java 工具包 (封装有 jre) 开发 java 代码</li></ol><h2 id="url-image-1-png-v-1-a-css-v-f02bc2"><a href="#url-image-1-png-v-1-a-css-v-f02bc2" class="headerlink" title="url(image/1.png?v=1) a.css?v=f02bc2"></a>url(image/1.png?v=1) a.css?v=f02bc2</h2><ul><li>向图片传参本身不会对图片有任何影响,一般是为了避免缓存才这么干，可能是由于这张图片经常更换，但又必须实时显示的缘故</li><li>css 文件后缀传参 利用 数据摘要要算法 对文件求摘要信息，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了 (摘要算法又称哈希算法，它表示输入任意长度的数据，输出固定长度的数据，相同的输入数据始终得到相同的输出，不同的输入数据尽量得到不同的输出。)</li></ul><h2 id="js-对时间进行排序"><a href="#js-对时间进行排序" class="headerlink" title="js 对时间进行排序"></a>js 对时间进行排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">"value1"</span>, <span class="attr">date</span>: <span class="string">"2018-08-08"</span>, <span class="attr">time</span>: <span class="string">"15:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">"value2"</span>, <span class="attr">date</span>: <span class="string">"2018-08-09"</span>, <span class="attr">time</span>: <span class="string">"12:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">"value3"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"17:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">value</span>: <span class="string">"value4"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"01:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">"value5"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"09:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">value</span>: <span class="string">"value6"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"23:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">"value7"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"16:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">value</span>: <span class="string">"value8"</span>, <span class="attr">date</span>: <span class="string">"2018-08-11"</span>, <span class="attr">time</span>: <span class="string">"10:27:17"</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">//time: "2019-06-13" 这种日期格式也可以升序降序</span></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line">arr.sort(</span><br><span class="line">  (a, b) =&gt; a.date.localeCompare(b.date) || a.time.localeCompare(b.time)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line">arr.sort(</span><br><span class="line">  (a, b) =&gt; b.date.localeCompare(a.date) || b.time.localeCompare(a.time)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="取消事件的方法"><a href="#取消事件的方法" class="headerlink" title="取消事件的方法"></a>取消事件的方法</h2><ol><li>event.preventDefault()</li><li>event.stopPropagation()</li></ol><ul><li>这两种是在 JS 中的常用取消事件的方法，但是其实还有一种用纯 css 就能实现取消事件响应的方法，pointer-events，使用起来更加简单，它可以：</li></ul><ol><li><p>阻止用户的点击动作产生任何效果</p></li><li><p>阻止缺省鼠标指针的显示</p></li><li><p>阻止 CSS 里的 hover 和 active 状态的变化触发事件</p></li><li><p>阻止 JavaScript 点击动作触发的事件</p></li></ol><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// "引用计数"（reference counting）：语言引擎有一张"引用表"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。</span></span><br><span class="line"><span class="comment">//数组[1,2,3,4]是一个值,会占用内存,arr是对这个数组的引用,因为引用次数为1,所以不会被系统释放掉,可以增加一行代码,接触对这个数值的引用</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//arr重置为null，就解除了对[1, 2, 3, 4]的引用，引用次数变成了0，内存就可以释放出来了。</span></span><br><span class="line"><span class="comment">//因此，并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用。如果是的话，就必须手动解除引用。</span></span><br></pre></td></tr></table></figure><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><ul><li>加密和解密需要两把钥匙 一把公钥 一把私钥</li><li>公钥是公开的，任何人都可以获取。私钥是保密的，只有拥有者才能使用。他人使用你的公钥加密信息，然后发送给你，你用私钥解密，取出信息。反过来，你也可以用私钥加密信息，别人用你的公钥解开，从而证明这个信息确实是你发出的，且未被篡改，这叫做数字签名</li></ul><h2 id="vue-三元运算符"><a href="#vue-三元运算符" class="headerlink" title="vue 三元运算符"></a>vue 三元运算符</h2><ul><li>gender: userInfo.gender == ‘F’ ? ‘2’ : userInfo.gender == ‘M’ ? ‘1’ : ‘0’, 可以判断男女其他</li></ul><h2 id="vue-钩子函数-updated-触发条件"><a href="#vue-钩子函数-updated-触发条件" class="headerlink" title="vue 钩子函数 updated 触发条件"></a>vue 钩子函数 updated 触发条件</h2><ul><li>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li></ul><h2 id="div-居中三种方法"><a href="#div-居中三种方法" class="headerlink" title="div 居中三种方法"></a>div 居中三种方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">margin</span>: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">父元素<span class="selector-tag">display</span><span class="selector-pseudo">:flex</span></span><br><span class="line">子元素<span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span> 子元素居中</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;切图&quot;&gt;&lt;a href=&quot;#切图&quot; class=&quot;headerlink&quot; title=&quot;切图&quot;&gt;&lt;/a&gt;切图&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择工具栏矩形选框工具&lt;/li&gt;
&lt;li&gt;顶栏样式选择固定大小&lt;/li&gt;
&lt;li&gt;选中切图区域后标注辅助线&lt;/li&gt;
&lt;li&gt;ctrl+c 复制选中图层&lt;/li&gt;
&lt;li&gt;ctrl+n 新建图层&lt;/li&gt;
&lt;li&gt;ctrl+v 粘贴图层&lt;/li&gt;
&lt;li&gt;ctrl+shift+alt+s 保存剪切好的图层到指定位置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;js-原生添加样式&quot;&gt;&lt;a href=&quot;#js-原生添加样式&quot; class=&quot;headerlink&quot; title=&quot;js 原生添加样式&quot;&gt;&lt;/a&gt;js 原生添加样式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;document.getElementById(“d1”).style.cssText = “color:red; font-size:13px;”;&lt;/li&gt;
&lt;li&gt;document.getElementById(“myDIV”).classList.add(“mystyle”);&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;less-的-amp-用法&quot;&gt;&lt;a href=&quot;#less-的-amp-用法&quot; class=&quot;headerlink&quot; title=&quot;less 的&amp;amp;用法&quot;&gt;&lt;/a&gt;less 的&amp;amp;用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;p+p 兄弟选择器,某元素后相邻的兄弟元素,p 后面的 p 样式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;some-和-every-的用法&quot;&gt;&lt;a href=&quot;#some-和-every-的用法&quot; class=&quot;headerlink&quot; title=&quot;some 和 every 的用法&quot;&gt;&lt;/a&gt;some 和 every 的用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;every()是对数组中每一项运行给定函数，如果该函数对每一项返回 true,则返回 true。&lt;/li&gt;
&lt;li&gt;some()是对数组中每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。&lt;/li&gt;
&lt;li&gt;some 一直在找符合条件的值，一旦找到，则不会继续迭代下去。&lt;/li&gt;
&lt;li&gt;every 从迭代开始，一旦有一个不符合条件，则不会继续迭代下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;map-和-foreach&quot;&gt;&lt;a href=&quot;#map-和-foreach&quot; class=&quot;headerlink&quot; title=&quot;map 和 foreach&quot;&gt;&lt;/a&gt;map 和 foreach&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;相同点：&lt;br&gt;　　　　　　 1.都是循环遍历数组中的每一项；&lt;br&gt;　　　　　　 2.在遍历中执行匿名函数都可以接收三个参数，分别为：遍历过程的每一项、遍历序号（索引值）、原数组；&lt;br&gt;　　　　　　 3.执行的匿名函数中 的 this 都指向 window。&lt;/li&gt;
&lt;li&gt;不同点：&lt;br&gt;　　　　　　 map():&lt;br&gt;　　　　　　根据遍历执行的匿名函数，对于原数组中的每个值产生一个对应的值，并返回一个新的数组，存在一个映射关系，并且不会改变原数组，不会对空数组进行检测。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;startswith-和-endswith&quot;&gt;&lt;a href=&quot;#startswith-和-endswith&quot; class=&quot;headerlink&quot; title=&quot;startswith 和 endswith&quot;&gt;&lt;/a&gt;startswith 和 endswith&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定义: startsWith() 方法用于检测字符串是否以指定的子字符串开始。如果是以指定的子字符串开头返回 true，否则 false。startsWith() 方法对大小写敏感。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;string.startsWith(searchvalue, 开始索引)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str1 = &lt;span class=&quot;string&quot;&gt;&quot;file:///C:/Users/iTAze/Desktop/1.html.png&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str2 = &lt;span class=&quot;string&quot;&gt;&quot;https://mp.csdn.net/postedit.jpg&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str1.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// true;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str1.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;.jpg&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// false;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str2.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// false;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str2.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;.jpg&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// true;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;if-后面不加大括号-只执行第一句&quot;&gt;&lt;a href=&quot;#if-后面不加大括号-只执行第一句&quot; class=&quot;headerlink&quot; title=&quot;if 后面不加大括号 只执行第一句&quot;&gt;&lt;/a&gt;if 后面不加大括号 只执行第一句&lt;/h2&gt;&lt;h2 id=&quot;a-和-a-的区别&quot;&gt;&lt;a href=&quot;#a-和-a-的区别&quot; class=&quot;headerlink&quot; title=&quot;a++和++a 的区别&quot;&gt;&lt;/a&gt;a++和++a 的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单独使用时，功能一模一样，都是让 a 的值增加 1；不同的是与赋值号“=”一起使用时，y=++a 表示先将 a 的值增加 1 后，再把值赋给 y；而，y=a++表示先把 a 的值给 y，a 自己再增加 1.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模块化规范</title>
    <link href="http://yoursite.com/2019/04/10/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/04/10/模块化规范/</id>
    <published>2019-04-10T13:41:35.000Z</published>
    <updated>2019-04-11T14:11:58.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包-维护私有变量安全-外部无法获取"><a href="#闭包-维护私有变量安全-外部无法获取" class="headerlink" title="闭包 维护私有变量安全 外部无法获取"></a>闭包 维护私有变量安全 外部无法获取</h2><blockquote><p>IIFE 模式:匿名函数自调用 闭包</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">"a"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过window暴露给全局</span></span><br><span class="line">  <span class="built_in">window</span>.module = &#123; foo &#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">// 页面调用</span></span><br><span class="line"><span class="built_in">module</span>.foo(); <span class="comment">//a</span></span><br></pre></td></tr></table></figure><h2 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h2><ol><li>commonjs 在服务端使用 NODEJS ,采用 commonJS 规范, require module.exports, 因为 html script 引入 js 文件中有 require 会报错 require not defined </li><li>commonjs 在浏览器端使用要处理 比如webpack 等打包工具会转换</li></ol><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义没有以来的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name  = <span class="string">'dataService.js'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//暴露模块</span></span><br><span class="line">    <span class="keyword">return</span>&#123;getName&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>import from export default</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包-维护私有变量安全-外部无法获取&quot;&gt;&lt;a href=&quot;#闭包-维护私有变量安全-外部无法获取&quot; class=&quot;headerlink&quot; title=&quot;闭包 维护私有变量安全 外部无法获取&quot;&gt;&lt;/a&gt;闭包 维护私有变量安全 外部无法获取&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>router两种方式</title>
    <link href="http://yoursite.com/2019/03/30/router%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/30/router两种方式/</id>
    <published>2019-03-30T13:24:00.000Z</published>
    <updated>2019-08-16T07:40:18.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-this-router-push、replace、go-的用法和区别"><a href="#关于-this-router-push、replace、go-的用法和区别" class="headerlink" title="关于 this.\$router.push、replace、go 的用法和区别"></a>关于 this.\$router.push、replace、go 的用法和区别</h2><ol><li>this.\$router.push 跳转到指定 url 路径，并想 history 栈中添加一个记录，点击后退会返回到上一个页面</li><li>this.\$router.replace 跳转到指定 url 路径，但是 history 栈中不会有记录，点击返回会跳转到上上个页面</li><li>this.\$router.go(n)向前或者向后跳转 n 个页面，n 可为正整数或负整数</li></ol><h2 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a><router-link :to="...">声明式</router-link></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"apple"</span>&gt;</span> to apple<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// 对象</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path:'apple'&#125;"</span>&gt;</span> to apple<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// 命名路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'applename'&#125;"</span>&gt;</span> to apple<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">//直接路由带查询参数query，地址栏变成 /apple?color=red</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'apple', query: &#123;color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">// 命名路由带查询参数query，地址栏变成/apple?color=red</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'applename', query: &#123;color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">//直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'apple', params: &#123; color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">// 命名路由带路由参数params，地址栏是/apple/red</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'applename', params: &#123; color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="router-push-…-编程式方法"><a href="#router-push-…-编程式方法" class="headerlink" title="router.push(…) 编程式方法"></a>router.push(…) 编程式方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">"apple"</span>);</span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">"apple"</span> &#125;);</span><br><span class="line"><span class="comment">// 命名路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">"applename"</span> &#125;);</span><br><span class="line"><span class="comment">//直接路由带查询参数query，地址栏变成 /apple?color=red</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">"apple"</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 命名路由带查询参数query，地址栏变成/apple?color=red</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">"applename"</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">//直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略,必须使用命名路由</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">"applename"</span>, <span class="attr">params</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 命名路由带路由参数params，地址栏是/apple/red</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">"applename"</span>, <span class="attr">params</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>关于带参数的路由总结如下</li></ol><ul><li>无论是直接路由“path” 还是命名路由“name”，带查询参数 query，地址栏会变成“/url?查询参数名：查询参数值“;</li><li>直接路由“path” 带路由参数 params params 不生效;</li><li>命名路由“name” 带路由参数 params 地址栏保持是“/url/路由参数值”;</li></ul><ol start="2"><li>设置路由 map 里的 path 值：</li></ol><ul><li>带路由参数 params 时，路由 map 里的 path 应该写成: path:’/apple/:color’ ;</li><li>带查询参数 query 时，路由 map 里的 path 应该写成: path:’/apple’ ；</li></ul><ol start="3"><li>获取参数方法：</li></ol><ul><li>在 template 中：</li><li>在 script 里： this.\$route.params.color</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于-this-router-push、replace、go-的用法和区别&quot;&gt;&lt;a href=&quot;#关于-this-router-push、replace、go-的用法和区别&quot; class=&quot;headerlink&quot; title=&quot;关于 this.\$router.p
      
    
    </summary>
    
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>菜虫网后台项目过程</title>
    <link href="http://yoursite.com/2019/03/30/%E8%8F%9C%E8%99%AB%E7%BD%91%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/30/菜虫网后台项目过程/</id>
    <published>2019-03-30T08:42:08.000Z</published>
    <updated>2019-04-01T06:53:22.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登陆页"><a href="#登陆页" class="headerlink" title="登陆页"></a>登陆页</h2><ol><li>在封装 axios 在挂载到 vue.prototype.\$http=axios;</li><li>methods 中用 axios 发送登陆请求,请求成功之后在 localStorage 里保存 token ; localStorage.setItem(“token”, data.token);</li><li>在用编程式导航 this.\$router.push({name: “home”})跳转到后台的首页</li><li>methods 中发请求的位置用 async await ,await 绑定在异步操作请求前面,async 写在离异步操作最近的外层函数前面</li><li>cookie 存小数据客户端 seession 服务端存数据 localstorge 存在浏览器内存中</li><li>element-ui 中的属性如果是布尔值 要在属性前加上:绑定.比如:opend=”true”,不加会认为属性是一个 true 字符串</li></ol><h2 id="退出登陆"><a href="#退出登陆" class="headerlink" title="退出登陆"></a>退出登陆</h2><ol><li>退出登陆 localStorage.clear();this.\$router.push({name: “login”});</li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ol><li>在 main.js 全局过滤器 - 处理日期格式 Vue.filter(‘fmtdate’, (v) =&gt; {return moment(v).format(‘YYYY-MM-DD’);})</li><li>element-ui 中一些自己的事件,比如搜索框当点击清空按钮@clear 会触发你绑定事件 事件中设置页码为 1 然后重新调用请求方法获取第一页数据</li><li>通过 template 标签里面设置 v-slot=”scope”绑定外层数据 scope.row 获取当前的对象,在获取对象属性的值发请求更改用户状态开关 删除和编辑和下拉框分配用户角色</li></ol><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>封装面包屑组件 在 main.js 导入封装好的面包屑 import CusBread from ‘@/components/cusBread.vue’然后在全局自定义 Vue.component(CusBread.name, CusBread);</li><li>表格展开行显示三层权限,用行列布局展示,element-ui 是一行 24 份,先分为 4:20;在 20 份中在分 4:20 完成效果</li><li>tree 形控件,只需要给最里层的id添加到数组中,然后就会选中,只有当最里层全部选中,外层会自动选上,如果给外层也选中,会导致里面所有层都全选</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">role.children.forEach(<span class="function"><span class="params">item1</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// temp2.push(item1.id);// 最外层id-&gt;temp-&gt;arrCheck</span></span><br><span class="line">  item1.children.forEach(<span class="function"><span class="params">item2</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// temp2.push(item2.id);</span></span><br><span class="line">    item2.children.forEach(<span class="function"><span class="params">item3</span> =&gt;</span> &#123;</span><br><span class="line">      temp2.push(item3.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;登陆页&quot;&gt;&lt;a href=&quot;#登陆页&quot; class=&quot;headerlink&quot; title=&quot;登陆页&quot;&gt;&lt;/a&gt;登陆页&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在封装 axios 在挂载到 vue.prototype.\$http=axios;&lt;/li&gt;
&lt;li&gt;methods 
      
    
    </summary>
    
    
      <category term="vue项目" scheme="http://yoursite.com/tags/vue%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据类型判断watch回调</title>
    <link href="http://yoursite.com/2019/03/26/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2019/03/26/js数据类型判断/</id>
    <published>2019-03-26T07:05:34.000Z</published>
    <updated>2019-03-28T14:38:38.193Z</updated>
    
    <content type="html"><![CDATA[<ol><li>typeof</li><li>instanceof</li><li>constructor</li><li>Object.prototype.toString<br><a href="https://blog.csdn.net/zjy_android_blog/article/details/81023177" target="_blank" rel="noopener">https://blog.csdn.net/zjy_android_blog/article/details/81023177</a></li></ol><p>个人理解:假设 arr 是一个数组,toString 是 object 的原型里面的方法其返回的是类似 ‘[object class]’的字符串,但是当我们使用 arr.toString()时，不能进行复杂数据类型的判断，因为它调用的是 Array.prototype.toString，虽然 Array 也继承自 Object，但 js 在 Array.prototype 上重写了 toString，将 toString 改变成转换为字符串的一个方法,而我们通过 toString.call(arr)实际上是改变 object 的 this 指向让 object 的 toString 重新通过原型链调用了 Object.prototype.toString。</p><a id="more"></a><blockquote><p>JavaScript 中一切都是对象，任何都不例外，对所有值类型应用 Object.prototype.toString.call() 方法结果如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">"123"</span>)); <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)); <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)); <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([])); <span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">//[object Function]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.prototype.toString ( )</span></span><br><span class="line"><span class="comment">// 在toString方法被调用时,会执行下面的操作步骤:</span></span><br><span class="line"><span class="comment">// 如果this的值为undefined,则返回"[object Undefined]".</span></span><br><span class="line"><span class="comment">// 如果this的值为null,则返回"[object Null]".</span></span><br><span class="line"><span class="comment">// 让O成为调用ToObject(this)的结果.</span></span><br><span class="line"><span class="comment">// 让class成为O的内部属性[[Class]]的值.</span></span><br><span class="line"><span class="comment">// 返回三个字符串"[object ", class, 以及 "]"连接后的新字符串.</span></span><br></pre></td></tr></table></figure><h2 id="ES6-高阶箭头函数-函数柯里化"><a href="#ES6-高阶箭头函数-函数柯里化" class="headerlink" title="ES6 高阶箭头函数 函数柯里化"></a>ES6 高阶箭头函数 函数柯里化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y + x;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adc = <span class="function"><span class="params">x</span> =&gt;</span> y =&gt; x + y;</span><br><span class="line">adc(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">//5</span></span><br></pre></td></tr></table></figure><h2 id="watch-高级用法"><a href="#watch-高级用法" class="headerlink" title="watch 高级用法"></a>watch 高级用法</h2><ol><li>watch 和 computed 详解 推荐阅读***<br><a href="https://segmentfault.com/a/1190000012948175?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012948175?utm_source=tag-newest</a></li><li>watch 高级用法<br><a href="https://www.cnblogs.com/forward-wuyi/p/9627962.html" target="_blank" rel="noopener">https://www.cnblogs.com/forward-wuyi/p/9627962.html</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听复杂数据类型需用深度监听</span></span><br><span class="line">data()&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        first:&#123;</span><br><span class="line">          second:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      secondChange:&#123;</span><br><span class="line">        handler(oldVal,newVal)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(oldVal)  <span class="comment">//当改变first.second值为2  打印2</span></span><br><span class="line">          <span class="built_in">console</span>.log(newVal)  <span class="comment">//当改变first.second值为2  打印2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        deep:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><ul><li>问题</li></ul><ol><li>console.log 打印的结果,发现 oldVal 和 newVal 值是一样的都是修改后的,因为深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化</li><li>oldVal 和 newVal 值一样的原因是它们索引同一个对象/数组。Vue 不会保留修改之前值的副本</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：可以直接对用对象.属性的方法拿到属性</span></span><br><span class="line">data()&#123;</span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">            first:&#123;</span><br><span class="line">              second:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">          <span class="string">'first.second'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newVal,oldVal);<span class="comment">//当改变first.second值为2  打印2和0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="comment">// 方法二：watch如果想要监听对象的单个属性的变化,必须用computed作为中间件转化,因为computed可以取到对应的属性值</span></span><br><span class="line">data()&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        first:&#123;</span><br><span class="line">          second:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      secondChange()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first.second</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      secondChange()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'second属性值变化了'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="js-回调函数"><a href="#js-回调函数" class="headerlink" title="js 回调函数"></a>js 回调函数</h2><p><a href="https://www.cnblogs.com/lishuxue/p/5999682.html" target="_blank" rel="noopener">https://www.cnblogs.com/lishuxue/p/5999682.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义主函数，回调函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我是主函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="string">"console.log('我是回调函数')"</span>, <span class="number">3000</span>); <span class="comment">//模仿耗时操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用主函数，将函数B传进去</span></span><br><span class="line">A(B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">我是主函数;</span><br><span class="line">我是回调函数;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;typeof&lt;/li&gt;
&lt;li&gt;instanceof&lt;/li&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;li&gt;Object.prototype.toString&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/zjy_android_blog/article/details/81023177&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zjy_android_blog/article/details/81023177&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;个人理解:假设 arr 是一个数组,toString 是 object 的原型里面的方法其返回的是类似 ‘[object class]’的字符串,但是当我们使用 arr.toString()时，不能进行复杂数据类型的判断，因为它调用的是 Array.prototype.toString，虽然 Array 也继承自 Object，但 js 在 Array.prototype 上重写了 toString，将 toString 改变成转换为字符串的一个方法,而我们通过 toString.call(arr)实际上是改变 object 的 this 指向让 object 的 toString 重新通过原型链调用了 Object.prototype.toString。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>react和vue</title>
    <link href="http://yoursite.com/2019/03/15/react%E5%92%8Cvue/"/>
    <id>http://yoursite.com/2019/03/15/react和vue/</id>
    <published>2019-03-14T16:04:32.000Z</published>
    <updated>2019-03-14T16:30:48.060Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路由-vue-router-嵌套路由"><a href="#路由-vue-router-嵌套路由" class="headerlink" title="路由-vue-router-嵌套路由"></a>路由-vue-router-嵌套路由</h4><blockquote><p>children 用法和 routes 一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> $route.params.id  路由配置对象$route -&gt; 获取数据时</span><br><span class="line"><span class="number">2.</span> <span class="keyword">this</span>.$router.push()  路由实例化对象 -&gt;调方法</span><br></pre></td></tr></table></figure><h4 id="git-介绍安装"><a href="#git-介绍安装" class="headerlink" title="git-介绍安装"></a>git-介绍安装</h4><blockquote><p>开发中-&gt;管理代码-&gt;1 每次记录代码变化 2 协同开发 3 把代码托管到平台(网站) -&gt; git/svn</p><p>版本控制工具(管理代码-&gt;合代码):git/svn</p></blockquote><ol><li><p>git 命令行工具</p></li><li><p>git 是软件(git 官网-&gt;找系统 32/64-&gt;下一步安装)</p></li><li><p>安装后的结果是: 文件夹-&gt;右键-&gt;gitbash/git-&gt;git 指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 检查git版本</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h4 id="git-基础概念"><a href="#git-基础概念" class="headerlink" title="git-基础概念"></a>git-基础概念</h4><blockquote><p>安装 git 软件-&gt;gitbash(小黑框)-&gt;使用 git 指令</p></blockquote><blockquote><p>在使用 git 指令之前 .配置邮箱名字</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"xxx"</span></span><br><span class="line">$ git config --global user.email xxx@example.com</span><br></pre></td></tr></table></figure><blockquote><p>可以使用 git 版本控制 -&gt; 管理代码-&gt;管理流程:</p></blockquote><ol><li>工作区(项目代码所在的文件夹)-&gt;暂存区(临时中转) : git add .</li><li>暂存区-&gt;本地仓库(项目代码所在文件夹中有个文件)</li><li>本地仓库的代码-&gt;代码托管平台(网站:github/码云)</li></ol><h4 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git-基本操作"></a>git-基本操作</h4><ol><li>新建项目目录 04/code/gitdemos</li><li>gitdemos 右键-&gt;gitbash-&gt;执行 git 指令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 当前gitdemos项目可以使用git去管理了</span><br><span class="line">// 效果: 生成.git文件</span><br><span class="line">git init</span><br><span class="line">// 检查每个文件的状态(未跟踪/已修改)</span><br><span class="line">// git status</span><br><span class="line">// 把工作区代码-&gt;暂存区</span><br><span class="line">git add .</span><br><span class="line">// 暂存区-&gt; 本地仓库</span><br><span class="line">git commit -m <span class="string">"注释"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: git init 只需要写一次</p></blockquote><h4 id="git-远程仓库"><a href="#git-远程仓库" class="headerlink" title="git-远程仓库"></a>git-远程仓库</h4><blockquote><p>代码托管平台(github/码云)</p></blockquote><ol><li>注册</li><li>登录</li><li>新建远程仓库 (右上角+-&gt;new-&gt;命名-&gt;create)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 关联远程仓库</span><br><span class="line">git remote add origin https://github.com/自己的账号/gitdemos64.git</span><br><span class="line">// 推送代码 keaichong:Song.316113</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 开发功能1 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释1&quot;</span><br><span class="line">// 开发功能2 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释2&quot;</span><br><span class="line">// 推送代码</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>git 基本使用-&gt; git 没讲完</p></blockquote><h4 id="vue-cli-工具-介绍"><a href="#vue-cli-工具-介绍" class="headerlink" title="vue-cli 工具-介绍"></a>vue-cli 工具-介绍</h4><blockquote><p>vue 开发项目-&gt; 本地服务器+less 配置+好多辅助开发的工具都需要配置+新建好多文件夹(静态资源的文件/项目入口文件等)-&gt;结果: 使用一个 vue 开发时工具帮助我们生成 vue 项目目录-&gt;vue-cli 脚手架</p></blockquote><ol><li>vue-cli 是 vue 开发时必用工具</li><li>vue-cli 是全局命令行工具(-g 全局安装)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装脚手架工具(默认安装最新稳定版3+)</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">// 检查版本</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure><h4 id="vue-cli-安装和-2-3-版本解释"><a href="#vue-cli-安装和-2-3-版本解释" class="headerlink" title="vue-cli-安装和 2-3 版本解释"></a>vue-cli-安装和 2-3 版本解释</h4><blockquote><p>目的:安装 3+版本-&gt;使用 2 版本的指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 安装桥接工具</span><br><span class="line">npm install -g @vue/cli-init</span><br><span class="line">// 可以使用2版本的指令</span><br><span class="line">// vue项目根据其复杂程度可以有多种不同的目录</span><br><span class="line">// vue复杂 -&gt; 目录文件多一些</span><br><span class="line">// vue项目简单-&gt;少一些文件</span><br><span class="line">// webpack-simple固定写法(简单vue项目目录)</span><br><span class="line">vue init webpack-simple 项目文件所在目录的文件夹名字</span><br><span class="line">//vuecli3</span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><blockquote><p>注意: 2 和 3 版本的指令不一样</p></blockquote><h4 id="vue-cli-创建项目"><a href="#vue-cli-创建项目" class="headerlink" title="vue-cli-创建项目"></a>vue-cli-创建项目</h4><ol><li>来到目录 -&gt; 打开 cmd</li><li>vue init webpack 项目名称</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 提示</span><br><span class="line">// 项目名</span><br><span class="line">// 描述</span><br><span class="line">// 作者</span><br><span class="line">// 认证</span><br><span class="line">// sass -&gt; N</span><br><span class="line"><span class="built_in">cd</span> 项目名称目录</span><br><span class="line">npm i</span><br><span class="line">// 启动开发模式:会把生成的vue项目在一个自带的本地服务器进行运行+ 自动打开浏览器</span><br><span class="line">// 拓展: 开发模式/测试/上线(生产)</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h4 id="vue-cli-项目目录解释"><a href="#vue-cli-项目目录解释" class="headerlink" title="vue-cli-项目目录解释"></a>vue-cli-项目目录解释</h4><blockquote><p>src</p></blockquote><ol><li>main.js 入口文件 : 引入其他包/样式</li><li>App.vue 根组件: 展示其他组件<ol><li>一个.vue 文件就是一个组件</li><li>.vue 文件代码三部分:template/script/style</li></ol></li><li>assets/静态资源(图片/字体/.css 等)</li></ol><blockquote><p>index.html 不需要写代码</p></blockquote><blockquote><p>.gitignore: git 排除忽略文件</p></blockquote><h4 id="开发-react-脚手架-介绍-安装"><a href="#开发-react-脚手架-介绍-安装" class="headerlink" title="开发-react 脚手架-介绍-安装"></a>开发-react 脚手架-介绍-安装</h4><blockquote><p>30 步-&gt;基于 webpack-&gt;react-&gt;可以写 react 代码-&gt;</p></blockquote><blockquote><p>vue-&gt;脚手架快速生成-&gt;vuecli</p><p>react-&gt;脚手架快速生成-&gt;create-react-app</p></blockquote><ol><li><p>npm i -g create-react-app</p></li><li><p>进入期望的项目所在的位置-&gt;cd</p></li><li><p>create-react-app 文件夹名字 reactclidemo</p><blockquote><p>network 有关-&gt;安装失败-&gt;再安装-&gt;清 npm 产生错误缓存-&gt;</p><ol><li>npm cache clean –force</li><li>找到 cache 目录-&gt;手动删除</li></ol></blockquote></li><li><p>cd reactclidemo</p></li><li><p>npm start-&gt;猜测?启动项目+open</p></li></ol><h4 id="开发-react-脚手架-目录说明-简化模板"><a href="#开发-react-脚手架-目录说明-简化模板" class="headerlink" title="开发-react 脚手架-目录说明-简化模板"></a>开发-react 脚手架-目录说明-简化模板</h4><blockquote><p>npm start-&gt;1.跑项目 2.自动浏览器</p></blockquote><blockquote><p>目录:</p><ol><li>public<ol><li>index.html-&gt;div#root</li><li>manifest.json-&gt;H5 新特性-&gt;离线缓存</li></ol></li><li><strong>src/</strong><ol><li>index.js-&gt;入口-&gt;导入根组件</li><li>index.css-&gt;针对 index.js 的样式</li><li>App.js-&gt;根组件-&gt;显示其他.js 组件</li><li>App.css-&gt;根组件的样式</li><li>serviceWorker-&gt;针对 mainfest 的服务端配置</li></ol></li></ol><p>指令-&gt;readme.md</p><ol><li><p><strong>npm start</strong></p></li><li><p>npm run build</p></li><li><p>npm test-&gt;跑测试用例</p></li><li><p>npm run eject-&gt;暴露出 webpack 配置/服务器配置</p><blockquote><p>不可逆操作!</p></blockquote></li></ol></blockquote><h4 id="开发-react-脚手架-业务编写"><a href="#开发-react-脚手架-业务编写" class="headerlink" title="开发-react 脚手架-业务编写"></a>开发-react 脚手架-业务编写</h4><blockquote><p>tab 切换-&gt;在脚手架目录-&gt;新建.js 组件-&gt;编码</p></blockquote><h4 id="路由-实现原理"><a href="#路由-实现原理" class="headerlink" title="路由-实现原理"></a>路由-实现原理</h4><blockquote><p>一 开发 SPA 组成原理:1. 前后端分离 2.<strong>前端路由</strong></p><p>vue 开发 SPA-&gt;vue-router-&gt;router-link+router-view this.\$router.push()</p><p>react 开发 SPA-&gt;路由包-&gt;react-router-dom(4 版本)</p><p>二:前端路由-&gt;js-&gt;2 种实现方式</p><ol><li>hash(#)</li><li>H5-&gt;history(浏览器历史访问记录)</li></ol><p>三:效果:url 标识变化-&gt;页面局部内容发生改变-&gt;演示(hash/)</p><p>四:react 提供了独立的包-&gt;实现路由效果</p></blockquote><h4 id="路由-react-router-dom-体验"><a href="#路由-react-router-dom-体验" class="headerlink" title="路由-react-router-dom-体验"></a>路由-react-router-dom-体验</h4><blockquote><p>讲的 4 版本 react-router-dom</p></blockquote><ol><li><p>npm i react-router-dom</p></li><li><p>新建 router/01.js</p></li><li><p>导入 react 和 react-router-dom 解构:</p><blockquote><p>import { BrowserRouter as Router, Route, Link } from ‘react-router-dom’</p></blockquote></li><li><p>配置 Router+Link+Route+提供组件</p></li></ol><h4 id="路由-react-router-dom-步骤"><a href="#路由-react-router-dom-步骤" class="headerlink" title="路由 react-router-dom-步骤"></a>路由 react-router-dom-步骤</h4><ol><li>安装</li><li>导入-&gt;as Router + Link +Route</li><li>return -&gt;Router&gt;(Link<em>n+Route</em>n)</li><li>Router-&gt;所有路由标签的最外层容器</li><li>Router 里面 Link-&gt;导航链接-&gt;to=”/“</li><li>Router 里面 Route-&gt;匹配路由同时提供填充位置-&gt;会把匹配到的组件显示在这个位置</li></ol><blockquote><p>注意: Router 中只能有一个子元素</p></blockquote><h4 id="路由-react-router-dom-嵌套"><a href="#路由-react-router-dom-嵌套" class="headerlink" title="路由-react-router-dom-嵌套"></a>路由-react-router-dom-嵌套</h4><blockquote><p>在一级路由匹配到的组件内容中写 Link+Route</p></blockquote><h4 id="路由-重定向"><a href="#路由-重定向" class="headerlink" title="路由-重定向"></a>路由-重定向</h4><blockquote><ol><li>点击 A-&gt;显示的是 B</li><li>所有的 route 没有匹配到-&gt;显示已经存在的组件</li></ol><blockquote><p>用法</p></blockquote><ol><li>导入</li><li>在 Route 末尾增加<redirect to="/标识"></redirect></li><li>在所有填充位外层包裹 Switch</li></ol></blockquote><h4 id="路由-react-router-dom-嵌套-1"><a href="#路由-react-router-dom-嵌套-1" class="headerlink" title="路由-react-router-dom-嵌套"></a>路由-react-router-dom-嵌套</h4><blockquote><p>在一级路由匹配到的组件内容中写 Link+Route</p></blockquote><h4 id="路由-重定向-1"><a href="#路由-重定向-1" class="headerlink" title="路由-重定向"></a>路由-重定向</h4><blockquote><ol><li>点击 A-&gt;显示的是 B</li><li>所有的 route 没有匹配到-&gt;显示已经存在的组件</li></ol><blockquote><p>用法</p></blockquote><ol><li>导入</li><li>在 Route 末尾增加<redirect to="/标识"></redirect></li><li>在所有填充位外层包裹 Switch</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;路由-vue-router-嵌套路由&quot;&gt;&lt;a href=&quot;#路由-vue-router-嵌套路由&quot; class=&quot;headerlink&quot; title=&quot;路由-vue-router-嵌套路由&quot;&gt;&lt;/a&gt;路由-vue-router-嵌套路由&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;children 用法和 routes 一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; $route.params.id  路由配置对象$route -&amp;gt; 获取数据时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$router.push()  路由实例化对象 -&amp;gt;调方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;git-介绍安装&quot;&gt;&lt;a href=&quot;#git-介绍安装&quot; class=&quot;headerlink&quot; title=&quot;git-介绍安装&quot;&gt;&lt;/a&gt;git-介绍安装&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;开发中-&amp;gt;管理代码-&amp;gt;1 每次记录代码变化 2 协同开发 3 把代码托管到平台(网站) -&amp;gt; git/svn&lt;/p&gt;
&lt;p&gt;版本控制工具(管理代码-&amp;gt;合代码):git/svn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git 命令行工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git 是软件(git 官网-&amp;gt;找系统 32/64-&amp;gt;下一步安装)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装后的结果是: 文件夹-&amp;gt;右键-&amp;gt;gitbash/git-&amp;gt;git 指令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 检查git版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react基础</title>
    <link href="http://yoursite.com/2019/03/07/react%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/07/react基础/</id>
    <published>2019-03-07T12:39:27.000Z</published>
    <updated>2019-03-13T01:36:42.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-基础-笔记"><a href="#react-基础-笔记" class="headerlink" title="react-基础-笔记"></a>react-基础-笔记</h1><ul><li><a href="https://reactjs.org/" target="_blank" rel="noopener">英文</a>-<a href="https://doc.react-china.org/" target="_blank" rel="noopener">中文</a></li><li><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="noopener">sublime 语法提示</a></li><li><a href="https://github.com/babel/babel-sublime" target="_blank" rel="noopener">sublime 语法高亮</a></li></ul><h2 id="前端的职责范畴"><a href="#前端的职责范畴" class="headerlink" title="前端的职责范畴"></a>前端的职责范畴</h2><ul><li>做网站前端（PCWeb 和移动 Web）- jquery</li><li>做后台开发（Node.js-java-php-python…）</li><li>做 APP（混合开发-react native）</li><li>做桌面程序（Electron）</li><li>javascript 有可能在未来一统江湖<a id="more"></a></li></ul><h2 id="react-事件处理"><a href="#react-事件处理" class="headerlink" title="react 事件处理"></a>react 事件处理</h2><p>我们通常建议在构造函数中绑定或使用属性初始化器语法来避免这类性能问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性初始化绑定回调函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  <span class="comment">// Warning: this is *experimental* syntax.</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数中绑定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;Markdown Preview Enhanced</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="React-概述"><a href="#React-概述" class="headerlink" title="React 概述"></a>React 概述</h2><ul><li><p>网站开发模式演变过程</p><blockquote><p>静态网站-&gt;动态网站（后端渲染）-&gt;Ajax-&gt;前后端渲染结合-&gt;前端渲染（前后端分离）SPA</p></blockquote></li><li><p>静态资源（网页 HTML 本身、js、css、font、视频、音频…）</p></li><li>静态网站缺陷：<ul><li>可维护性比较低</li><li>无法进行交互</li></ul></li><li>动态网站<ul><li>可维护性明显增强</li><li>并且可以处理参数，所以方便与客户端进行交互</li></ul></li><li>ajax 的诞生解决了阻塞问题<ul><li>ajax 请求是异步的，页面不需要阻塞</li><li>ajax 一般请求的是数据（json）,浏览器通过 ajax 获取到数据之后，在浏览器中进行渲染（前端渲染）</li><li>一般这种渲染方式处理的都是页面的局部（局部刷新）</li></ul></li><li><p>所以有了 ajax 之后，一般都是前端渲染与后端渲染结合使用</p><ul><li>基于 ajax 进行前端渲染之后，导致前端的业务量明显增加，那么对代码的风格带来了挑战，EXTJS（MVC）、backbone 等这些 mvc 框架解决了代码风格的一些问题，但是并不能从根本上解决（还是需要程序员去操作 DOM）,所以为了从根本上解决前端代码的风格或者开发体验，后来就诞生了更加先进的前端框架：Angular、React、Vue（SPA）—声明式编程（基本上不再需要显示的操作 DOM），解决浏览器历史回退的问题（前端路由）</li></ul></li><li><p>React 特性</p><ul><li>声明式视图<ul><li>对于声明式组件，当数据变更的时候，React 低层负责高效更新。这种方式代码更加可预见并且更容易调试。</li></ul></li><li>组件化<ul><li>封装管理数据的组件，通过组合的方式实现复杂的 UI，组件的逻辑采用 js 实现而不是模板，这样可以保持数据在 DOM 之外。</li></ul></li><li>一次学习，随处编写<ul><li>React 可以进行服务端渲染，也可以用于移动 APP 开发（React Native）</li></ul></li></ul></li></ul><h2 id="vue-和-react-对比"><a href="#vue-和-react-对比" class="headerlink" title="vue 和 react 对比"></a>vue 和 react 对比</h2><p><code>vue和react对比</code> <a href="http://index.baidu.com/?from=pinzhuan#/" target="_blank" rel="noopener">百度指数</a> <a href="https://github.com/HankBass/front-end-frameworks-comparison" target="_blank" rel="noopener">链接 1</a> <a href="https://www.zcfy.cc/article/react-or-vue-which-javascript-ui-library-should-you-be-using-2159.html" target="_blank" rel="noopener">链接 2</a></p><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><ol><li>babel</li><li>插件<ul><li>Simple React Snippets</li><li>JS JSX Snippets</li><li>jsx-beautify</li><li>Live Server</li></ul></li></ol><h2 id="React-之-HelloWorld"><a href="#React-之-HelloWorld" class="headerlink" title="React 之 HelloWorld"></a>React 之 HelloWorld</h2><ul><li><a href="https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html" target="_blank" rel="noopener">引入相关的库</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>javascript<span class="string">" src="</span>./lib/react.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">" src="</span>./lib/react-dom.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">" src="</span>./lib/babel.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>root<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/babel<span class="string">" src="</span>src/HelloWorld.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HelloWorld</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;<span class="comment">/*必须有根元素*/</span>&#125;</span><br><span class="line">    &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;div&gt;测试数据&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>基本步骤<ul><li>引入 react 库文件 react 和 react-dom</li><li>引入 babel 运行时</li><li>基于 React 语法进行开发</li></ul></li><li>细节分析<ul><li>运行环境</li><li>案例语法</li></ul></li></ul><h2 id="JSX-基础语法"><a href="#JSX-基础语法" class="headerlink" title="JSX 基础语法"></a>JSX 基础语法</h2><ul><li>什么是 JSX 元素<ul><li>区分于元素 DOM 元素，React 元素本质上是普通对象，是组件的基本组成单元</li></ul></li><li>JSX 特性<ul><li>元素可以嵌套，但是必须有跟元素，也就是最外层必须有一个元素包裹</li><li>标签必须闭合，标签中没有内容也需要闭合，比如<img></li></ul></li><li>JSX 嵌入表达式<ul><li>JSX 本质上也是表达式</li></ul></li><li>JSX 属性<ul><li>JSX 可以添加自定义属性，并且属性名采用驼峰式</li><li>属性添加可以使用延展运算符</li></ul></li></ul><h2 id="JSX-的本质"><a href="#JSX-的本质" class="headerlink" title="JSX 的本质"></a>JSX 的本质</h2><ul><li>React.createElement(type, props, …children)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactElement createElement(</span><br><span class="line">  string/ReactClass type,</span><br><span class="line">  [object props],</span><br><span class="line">  [children ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数一为字符串或者为类</li><li>参数二为元素的属性列表</li><li>第三个参数表示子节点，可以把子节点单独传递，也可以组合为一个数组来传递<ul><li>var root = React.createElement(‘ul’, { className: ‘my-list’ }, child1, child2, child3);</li><li>var root = React.createElement(‘ul’, { className: ‘my-list’ }, [child1, child2, child3]);</li></ul></li><li>分析元素的渲染方式</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>组件化思想分析<ul><li>web components</li><li>单一职责</li></ul></li><li>创建组件语法<ul><li>函数方式</li><li>类方式</li></ul></li><li>组件的状态 state</li><li>父组件向子组件传值 props<ul><li>单向数据流</li><li>子组件不可以修改 props 数据</li></ul></li></ul><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><ul><li>componentWillMount 组件挂载之前调用，render()之前调用</li><li>componentDidMount DOM 渲染完成后调用，可以用于加载后台数据</li><li>componentDidUpdate 组件更新时触发该方法，初始渲染不调用</li><li>componentWillUnmount 组件被销毁之前一般用于清理工作（定时器 timer、网络请求、订阅事件）</li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li>函数名采用驼峰式</li><li>函数值采用{函数名称}</li><li>阻止默认行为不可以使用 return false</li><li>事件函数中的 this 绑定<ul><li>构造函数中使用 bind(this)</li><li>声明函数时使用箭头函数</li></ul></li><li>函数传参</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件向父组件传值</li></ul><h2 id="条件渲染与循环渲染"><a href="#条件渲染与循环渲染" class="headerlink" title="条件渲染与循环渲染"></a>条件渲染与循环渲染</h2><ul><li>条件渲染<ul><li>js 形式条件渲染</li><li>元素变量</li><li>行内条件渲染</li><li>阻止组件渲染</li></ul></li><li>循环渲染<ul><li>渲染多个元素</li><li>key 只在数组上下文中有含义</li><li>key 在兄弟节点之间必须唯一</li><li>JSX 中可以嵌入 map 结构</li></ul></li></ul><h2 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h2><blockquote><p>表单元素本身就与别的元素不同，因为天生就包含一些初始状态</p></blockquote><ul><li>受控组件与非受控组件<ul><li>受控组件的数据由 React 组件控制</li><li>非受控组件的数据由 DOM 控制</li></ul></li></ul><h2 id="直接操作-DOM"><a href="#直接操作-DOM" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h2><ul><li>什么情况需要直接操作 DOM<ul><li>管理焦点，文本选择或者媒体重放</li><li>触发命令式动画</li><li>集成第三方 DOM 库</li></ul></li><li>ref 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">this.textInput = React.createRef();</span><br><span class="line">// 标签中</span><br><span class="line">&lt;input type=&quot;text&quot; ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">// 使用</span><br><span class="line">this.textInput.current.focus();</span><br></pre></td></tr></table></figure><h2 id="JSX-进阶特性"><a href="#JSX-进阶特性" class="headerlink" title="JSX 进阶特性"></a>JSX 进阶特性</h2><ul><li>点标记的组件用法&lt;MyComponents.DatePicker color=”blue”/&gt;</li><li>动态组件名称</li><li>props 值操作</li><li>组件 children</li></ul><h2 id="React-实现原理分析"><a href="#React-实现原理分析" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程</li></ul><h2 id="表单操作-1"><a href="#表单操作-1" class="headerlink" title="表单操作"></a>表单操作</h2><blockquote><p>表单元素本身就与别的元素不同，因为天生就包含一些初始状态</p></blockquote><ul><li>受控组件与非受控组件<ul><li>受控组件的数据由 React 组件控制</li><li>非受控组件的数据由 DOM 控制</li></ul></li><li>checkbox 与 radio 组件</li></ul><h2 id="直接操作-DOM-1"><a href="#直接操作-DOM-1" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h2><ul><li>什么情况需要直接操作 DOM<ul><li>管理焦点，文本选择或者媒体重放</li><li>触发命令式动画</li><li>集成第三方 DOM 库</li></ul></li><li>ref 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">this.textInput = React.createRef();</span><br><span class="line">// 标签中</span><br><span class="line">&lt;input type=&quot;text&quot; ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">// 使用</span><br><span class="line">this.textInput.current.focus();</span><br></pre></td></tr></table></figure><ul><li>文件上传</li></ul><h2 id="React-实现原理分析-1"><a href="#React-实现原理分析-1" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程</li><li>mvc/mvvm–&gt;mv*</li></ul><h2 id="React-实现原理分析-2"><a href="#React-实现原理分析-2" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程(数据驱动的开发模式)</li></ul><h2 id="JSX-进阶特性-1"><a href="#JSX-进阶特性-1" class="headerlink" title="JSX 进阶特性"></a>JSX 进阶特性</h2><ul><li>点标记的组件用法&lt;MyComponents.DatePicker color=”blue”/&gt;</li><li>组件 children</li><li>props 值操作</li><li>动态组件名称</li></ul><h2 id="后台数据处理"><a href="#后台数据处理" class="headerlink" title="后台数据处理"></a>后台数据处理</h2><ul><li><a href="https://github.com/github/fetch#readme" target="_blank" rel="noopener">fetch-pollyfill</a></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, options).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle HTTP response</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle network error</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>注意：fetch api 返回的是一个 promise 对象</li><li>参数：options<ul><li>method(String): HTTP 请求方法，默认为 GET</li><li>body(String): HTTP 的请求参数</li><li>headers(Object): HTTP 的请求头，默认为{}</li><li>credentials(String): 默认为 omit,忽略的意思，也就是不带 cookie;还有两个参数，same-origin，意思就是同源请求带 cookie；include,表示无论跨域还是同源请求都会带 cookie</li></ul></li><li>第一个 then 函数里面处理的是 response 的格式</li><li>响应<ul><li>text(): 将返回体处理成字符串类型</li><li>json()： 返回结果和 JSON.parse(responseText)一样</li><li>blob()： 返回一个 Blob，Blob 对象是一个不可更改的类文件的二进制数据</li><li>arrayBuffer()</li><li>formData()</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/abc"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意这里得到的才是最终的数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>cookie 传递<ul><li>必须在 header 参数里面加上 credientials: ‘include’，才会如 xhr 一样将当前 cookies 带到请求中</li></ul></li><li>错误处理<ul><li>fetch 在服务器返回 4xx、5xx 时是不会抛出错误的，这里需要手动通过，通过 response 中的 ok 字段和 status 字段来判断</li></ul></li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>：基于 http 客户端的 Promise，用于浏览器和 Node.js。</p></blockquote><ul><li>axios 特性<ul><li>从浏览器发送 ajax 请求</li><li>从 Node.js 发送 http 请求</li><li>支持 Promise API</li><li>请求和相应拦截器</li><li>转换请求和响应数据</li><li>取消请求</li><li>JSON 数据自动转换</li><li>客户端支持防止 XSRF</li></ul></li></ul><h2 id="webpack-搭建-React-环境"><a href="#webpack-搭建-React-环境" class="headerlink" title="webpack 搭建 React 环境"></a>webpack 搭建 React 环境</h2><h2 id="官方脚手架"><a href="#官方脚手架" class="headerlink" title="官方脚手架"></a>官方脚手架</h2><ol><li>npm start<ul><li>在<a href="http://localhost:3000下监视文件，文件修改将自动更新，你可以在控制台中看到检测错误" target="_blank" rel="noopener">http://localhost:3000下监视文件，文件修改将自动更新，你可以在控制台中看到检测错误</a></li></ul></li><li>npm test<ul><li>在交互监视模式下启动测试运行程序。</li></ul></li><li>npm run build<ul><li>在生产环境中编译代码，并放在 build 目录中</li></ul></li><li>npm run eject<ul><li>抽取出项目配置文件，这是一个单向操作，一旦你使用 eject，那么就不能恢复了</li><li>使用说明：如果你对 create-react-app 这个构建工具和配置项不满意，你可以在任何时候 eject，从而导出可配置的模板</li></ul></li></ol><h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><ul><li><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a></li><li><a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">doc</a></li></ul><h2 id="前端路由概念分析"><a href="#前端路由概念分析" class="headerlink" title="前端路由概念分析"></a>前端路由概念分析</h2><ul><li>前端路由与后端路由的区别<ul><li>后端路由</li><li>前端路由</li></ul></li></ul><h2 id="React-router-之-HelloWorld"><a href="#React-router-之-HelloWorld" class="headerlink" title="React-router 之 HelloWorld"></a>React-router 之 HelloWorld</h2><blockquote><p>声明式路由</p></blockquote><ul><li>路由使用的基本步骤<ul><li>配置路由的容器 BrowserRouter</li><li>配置路由连接 Link</li><li>配置路由填充位置以及路径和组件的映射关系</li></ul></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ul><li>嵌套路由使用步骤<ul><li>在父路由的组件中配置子路由</li><li>子路由同样需要配置 Link 和 Route</li></ul></li></ul><h2 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h2><ul><li>路由传参指的是在路由的路径中通过【:参数名称】的方式进行传参，该参数在路由匹配的组件中通过【match.params.参数名称】的方式获取</li></ul><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><ul><li>路由的重定向通过 <redirect to="目标"></redirect></li></ul><h2 id="自定义路由链接"><a href="#自定义路由链接" class="headerlink" title="自定义路由链接"></a>自定义路由链接</h2><h2 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>基本用法</li><li>嵌套路由</li><li>路由重定向</li><li>路由参数</li><li>编程式路由</li><li>自定义路由连接</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;react-基础-笔记&quot;&gt;&lt;a href=&quot;#react-基础-笔记&quot; class=&quot;headerlink&quot; title=&quot;react-基础-笔记&quot;&gt;&lt;/a&gt;react-基础-笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;英文&lt;/a&gt;-&lt;a href=&quot;https://doc.react-china.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebookarchive/sublime-react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime 语法提示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/babel/babel-sublime&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime 语法高亮&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端的职责范畴&quot;&gt;&lt;a href=&quot;#前端的职责范畴&quot; class=&quot;headerlink&quot; title=&quot;前端的职责范畴&quot;&gt;&lt;/a&gt;前端的职责范畴&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;做网站前端（PCWeb 和移动 Web）- jquery&lt;/li&gt;
&lt;li&gt;做后台开发（Node.js-java-php-python…）&lt;/li&gt;
&lt;li&gt;做 APP（混合开发-react native）&lt;/li&gt;
&lt;li&gt;做桌面程序（Electron）&lt;/li&gt;
&lt;li&gt;javascript 有可能在未来一统江湖
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Promise用法</title>
    <link href="http://yoursite.com/2019/02/28/Promise%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/28/Promise用法/</id>
    <published>2019-02-28T02:01:47.000Z</published>
    <updated>2019-03-28T14:04:04.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="promise-用法"><a href="#promise-用法" class="headerlink" title="promise 用法"></a>promise 用法</h2><p>参考:</p><ol><li>E:\北京顺义黑马前端与移动开发基础 62 期\就业班 品优购前台\day02\03-加密视频 07 20 分钟详细说明了 promise</li><li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/05/async.html</a> 阮一峰微博<blockquote><p>Promise 的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数,在异步操作成功时调用，并将异步操作的结果作为参数传递出去<br>我们用 Promise 的时候一般是包在一个函数中，在需要的时候去运行这个函数，</p></blockquote></li></ol><ul><li>用法:在一个函数内部 return 一个 promise 对象,再调用这个函数的时候就得到了 promise 对象,就可以用 promise 的.then 方法,then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果</li></ul><h2 id="链式操作的用法"><a href="#链式操作的用法" class="headerlink" title="链式操作的用法"></a>链式操作的用法</h2><p>从表面上看，Promise 只是能够简化层层回调的写法，而实质上，Promise 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 callback 函数要简单、灵活的多。所以使用 Promise 的正确场景是这样的：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务1执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据1"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务2执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据2"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务3执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据3"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runAsync1()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync3();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">异步任务3执行完成</span><br><span class="line">随便什么数据3</span><br></pre></td></tr></table></figure><p>在 then 方法中，你也可以直接 return 数据而不是 Promise 对象，在后面的 then 中就可以接收到数据了，比如我们把上面的代码修改成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'直接返回数据'</span>;  <span class="comment">//这里直接返回数据</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">直接返回数据</span><br></pre></td></tr></table></figure><h2 id="catch-的用法"><a href="#catch-的用法" class="headerlink" title="catch 的用法"></a>catch 的用法</h2><p>Promise 对象除了 then 方法，还有一个 catch 方法,它和 then 的第二个参数一样，用来指定 reject 的回调，用法是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br></pre></td></tr></table></figure><p>效果和写在 then 的第二个参数里面一样。不过它还有另外一个作用：在执行 resolve 的回调（也就是上面 then 中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死 js，而是会进到这个 catch 方法中。并把错误的原因传入 reason 参数中,请看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(somedata); <span class="comment">//此处的somedata未定义</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>用 Promise.all 来执行，all 接收一个数组参数，里面的值最终都算返回 Promise 对象,会等待最慢的一个异步任务执行完成之后返回结果,等到它们都执行完后才会进到 then 里面, 返回结果按照传入的顺序存在一个数组之中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([runAsync1(), runAsync2(), runAsync3()]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/28/Promise用法/promise.png"><p>有了 all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash 以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</p><h2 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h2><p>await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> somethingThatReturnsAPromise(); <span class="comment">//等待返回一个promise对象</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> somethingThatReturnsAPromise().catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-函数简单用法"><a href="#async-函数简单用法" class="headerlink" title="async 函数简单用法"></a>async 函数简单用法</h2><p>async 的用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为 async 就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行。 写一个 async 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(timeout());</span><br><span class="line"><span class="comment">// 控制台打印</span></span><br><span class="line"><span class="comment">//Promise &#123;&lt;resolved&gt;: "hello world"&#125;</span></span><br></pre></td></tr></table></figure><p>原来 async 函数返回的是一个 promise 对象，如果要获取到 promise 返回值，我们应该用 then 方法， 继续修改代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line">timeout().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"虽然在后面，但是我先执行"</span>);</span><br><span class="line"><span class="comment">//控制台打印</span></span><br><span class="line"><span class="comment">//虽然在后面，但是我先执行</span></span><br><span class="line"><span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p>现在写一个函数，让它返回 promise 对象，该函数的作用是 2s 之后让数值乘以 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2s 之后返回双倍的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doubleAfter2seconds</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span> * num);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个 async 函数，从而可以使用 await 关键字， await 后面放置的就是返回 promise 对象的一个表达式，所以它后面可以写上 doubleAfter2seconds 函数的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> doubleAfter2seconds(<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">testResult();</span><br><span class="line"><span class="comment">//控制台打印</span></span><br><span class="line"><span class="comment">//2s后打印 60</span></span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><a href="https://www.jianshu.com/p/fe0159f8beb4" target="_blank" rel="noopener">https://www.jianshu.com/p/fe0159f8beb4</a></p><blockquote><p>注意:promise 的 then()和 catch(err=&gt;err)的回调结果都会走 return 之后的下一个 promise 的点 then 方法里面,如果需要把第一个 promise 里面的错误抛出给下一个 promise 的 catch 接收,第一个 promise 的 catch 要写这样 .catch(err =&gt; Promise.reject(err)) ,Promise.reject()是快速的获取一个拒绝状态的 Promise 对象<br>使用静态 Promise.reject()方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">"Testing static reject"</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未被调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// "Testing static reject"</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//方法二等价方法一(主动创建的reject会走promise的catch也就是第二个回调数)</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">"Testing static reject"</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未被调用</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// "Testing static reject"</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>结论:</p><ol><li>虽然 await 会阻塞 async 异步函数，但是并没有阻塞主线程。</li><li>虽然 await 阻塞异步函数向后执行，看起来像是同步的，但是它本质还是异步的，我们同样可以并行执行。而同步函数不能并行执行。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;promise-用法&quot;&gt;&lt;a href=&quot;#promise-用法&quot; class=&quot;headerlink&quot; title=&quot;promise 用法&quot;&gt;&lt;/a&gt;promise 用法&lt;/h2&gt;&lt;p&gt;参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;E:\北京顺义黑马前端与移动开发基础 62 期\就业班 品优购前台\day02\03-加密视频 07 20 分钟详细说明了 promise&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/05/async.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2015/05/async.html&lt;/a&gt; 阮一峰微博&lt;blockquote&gt;
&lt;p&gt;Promise 的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数,在异步操作成功时调用，并将异步操作的结果作为参数传递出去&lt;br&gt;我们用 Promise 的时候一般是包在一个函数中，在需要的时候去运行这个函数，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;用法:在一个函数内部 return 一个 promise 对象,再调用这个函数的时候就得到了 promise 对象,就可以用 promise 的.then 方法,then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;链式操作的用法&quot;&gt;&lt;a href=&quot;#链式操作的用法&quot; class=&quot;headerlink&quot; title=&quot;链式操作的用法&quot;&gt;&lt;/a&gt;链式操作的用法&lt;/h2&gt;&lt;p&gt;从表面上看，Promise 只是能够简化层层回调的写法，而实质上，Promise 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 callback 函数要简单、灵活的多。所以使用 Promise 的正确场景是这样的：&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>什么时候用module.export?什么时候用exports？</title>
    <link href="http://yoursite.com/2019/02/26/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8module-export-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8exports%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/02/26/什么时候用module-export-什么时候用exports？/</id>
    <published>2019-02-26T15:49:51.000Z</published>
    <updated>2019-02-27T08:08:12.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-引用-module"><a href="#创建-引用-module" class="headerlink" title="创建/引用 module"></a>创建/引用 module</h2><p>假设这是 rocker.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在另一个文件中引用 rocker.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rocker = <span class="built_in">require</span>(<span class="string">"./rocker.js"</span>);</span><br><span class="line">rocker.name(); <span class="comment">// my name is cp</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>先来看一个例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 1 &#125;</span></span><br><span class="line"></span><br><span class="line">b.name = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">name</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 3 &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><ol><li>一开始,a 是一个对象，b 是对 a 的引用,即 a 和 b 指向同一块内存，所以前两个输出一样。</li><li>然后对 b 做修改,即 a 和 b 指向同一块内存地址的内容发生了改变,所以 a 和 b 的输出是一样的。</li><li>接着 b 被重新赋值时，这时候 b 指向了一块新的内存,a 还是指向原来的内存，所以最后两个输出不一样。</li></ol><h2 id="module-exports-和-exports-到底是什么？"><a href="#module-exports-和-exports-到底是什么？" class="headerlink" title="module.exports 和 exports 到底是什么？"></a>module.exports 和 exports 到底是什么？</h2><blockquote><p>每一个 node.js 执行文件，都自动创建一个 module 对象和 exports 对象，同时，module 对象会创建一个叫 exports 的属性，初始化的值是 {}。实际上， exports 和 module.exports 指向同一块内存，可以理解为 exports 只是 module.exports 的引用，即：exports = module.exports = {};<br>其实，Module.exports 才是真正的接口，exports 只不过是它的一个辅助工具。最终返回给调用的是 Module.exports 而不是 exports。所以不要直接给 exports 赋值,可以在赋值后使用 module.exports = exports 重新将 exports 和 module.exports 关联起来。也可以直接给 module.exports 赋值。<br>所有的 exports 收集到的属性和方法，都赋值给了 Module.exports。当然，这有个前提，就是 Module.exports 本身不具备任何属性和方法。如果，Module.exports 已经具备一些属性和方法，那么 exports 收集来的信息将被忽略。原因是 require 引入的对象本质上是 module.exports。这就产生了一个问题，当 module.exports 和 exports 指向的不是同一块内存时，exports 的内容就会失效。</p></blockquote><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫叔叔'</span>&#125;；</span><br><span class="line">exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫老阿姨'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时 module.exports 指向了一块新的内存（该内存的内容为{name: ‘萤火虫叔叔’}），exports 指向了另一块新的内存（该内存的内容为{name: ‘萤火虫老阿姨’}）。require 得到的是{name: ‘萤火虫叔叔’}。</p></blockquote><h2 id="什么时候用-exports？什么时候用-module-exports？"><a href="#什么时候用-exports？什么时候用-module-exports？" class="headerlink" title="什么时候用 exports？什么时候用 module.exports？"></a>什么时候用 exports？什么时候用 module.exports？</h2><ul><li>如果你想你的模块是一个特定的类型就用 Module.exports。</li><li>如果你想的模块是一个典型的“实例化对象”就用 exports。<br>给 module.exports 添加属性类似于给 exports 添加属性，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样，exports 是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 exports 导出，除非你打算从原来的“实例化对象”改变成一个类型。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>exports 是指向的 module.exports 的引用</p></li><li><p>module.exports 初始值为一个空对象 {}，所以 exports 初始值也是 {}</p></li><li><p>require()返回的是 module.exports 而不是 exports</p></li><li><p>module.exports导出的是函数,require引入的也是函数,导出对象,require引入也是对象</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建-引用-module&quot;&gt;&lt;a href=&quot;#创建-引用-module&quot; class=&quot;headerlink&quot; title=&quot;创建/引用 module&quot;&gt;&lt;/a&gt;创建/引用 module&lt;/h2&gt;&lt;p&gt;假设这是 rocker.js 文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exports.name = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;my name is cp&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在另一个文件中引用 rocker.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rocker = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./rocker.js&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rocker.name(); &lt;span class=&quot;comment&quot;&gt;// my name is cp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vuex的基本入门</title>
    <link href="http://yoursite.com/2019/02/26/Vuex%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/26/Vuex的基本入门/</id>
    <published>2019-02-25T16:17:05.000Z</published>
    <updated>2019-03-25T09:53:36.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuex-流程"><a href="#vuex-流程" class="headerlink" title="vuex 流程"></a>vuex 流程</h2><blockquote><p>vuex就像一个无形的仓库，公共的状态我们会抽离出来放进里面</p></blockquote><ol><li>state-&gt;声明数据(组件可以用,响应式)</li><li>actions-&gt;和后台交互(ajax 请求)-&gt;返回新结果</li><li>mutations-&gt;修改 state,接收 actions 传递的结果</li><li>dispatch：含有异步操作，例如向后台提交数据，写法： this.$store.dispatch(‘action方法名’,值)</li><li>commit：同步操作，写法：this.$store.commit(‘mutations方法名’,值)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">state:声明数据(响应式数据)-&gt;组件的computed</span><br><span class="line"></span><br><span class="line">getters:声明复杂数据将state中的某个状态进行过滤然后获取新的状态-&gt;组件的computed</span><br><span class="line"></span><br><span class="line">mutations:修改state的方法(同步方法)-&gt;组件的methods   </span><br><span class="line"></span><br><span class="line">actions:异步操作获取新数据(和后台交互-&gt;ajax) -&gt;通过commit的方法把新数据交给mutations-&gt;组件的methods</span><br><span class="line"></span><br><span class="line">modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://segmentfault.com/a/1190000015782272" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015782272</a></p></blockquote><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actions:方法-&gt;异步</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  fnac1(context) &#123;</span><br><span class="line">    <span class="comment">// context就是仓库</span></span><br><span class="line">    <span class="comment">// 异步代码</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> numNew = <span class="number">200</span></span><br><span class="line">      <span class="comment">// 在异步有结果的位置,把结果提交给mutations的方法</span></span><br><span class="line">      context.commit(<span class="string">'setNum'</span>, numNew)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>app.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">    fn2()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">"fnac1"</span>)</span><br><span class="line">        ...mapActions([<span class="string">"fnac2"</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vuex-流程&quot;&gt;&lt;a href=&quot;#vuex-流程&quot; class=&quot;headerlink&quot; title=&quot;vuex 流程&quot;&gt;&lt;/a&gt;vuex 流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;vuex就像一个无形的仓库，公共的状态我们会抽离出来放进里面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;state-&amp;gt;声明数据(组件可以用,响应式)&lt;/li&gt;
&lt;li&gt;actions-&amp;gt;和后台交互(ajax 请求)-&amp;gt;返回新结果&lt;/li&gt;
&lt;li&gt;mutations-&amp;gt;修改 state,接收 actions 传递的结果&lt;/li&gt;
&lt;li&gt;dispatch：含有异步操作，例如向后台提交数据，写法： this.$store.dispatch(‘action方法名’,值)&lt;/li&gt;
&lt;li&gt;commit：同步操作，写法：this.$store.commit(‘mutations方法名’,值)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;state:声明数据(响应式数据)-&amp;gt;组件的computed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getters:声明复杂数据将state中的某个状态进行过滤然后获取新的状态-&amp;gt;组件的computed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mutations:修改state的方法(同步方法)-&amp;gt;组件的methods   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;actions:异步操作获取新数据(和后台交互-&amp;gt;ajax) -&amp;gt;通过commit的方法把新数据交给mutations-&amp;gt;组件的methods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015782272&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000015782272&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>品优购前台项目</title>
    <link href="http://yoursite.com/2019/02/25/%E5%93%81%E4%BC%98%E8%B4%AD%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/02/25/品优购前台项目/</id>
    <published>2019-02-25T13:12:21.000Z</published>
    <updated>2019-03-09T15:24:59.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-mvc-思想构建项目"><a href="#使用-mvc-思想构建项目" class="headerlink" title="使用 mvc 思想构建项目"></a>使用 mvc 思想构建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">models 数据模型   获取接口服务器数据</span><br><span class="line">views  视图层     渲染页面 使用模版引擎</span><br><span class="line">controllers 控制器   组织请求对应的去进行业务处理</span><br><span class="line">public 静态资源</span><br><span class="line">utils 工具类</span><br></pre></td></tr></table></figure><h2 id="开发用插件"><a href="#开发用插件" class="headerlink" title="开发用插件"></a>开发用插件</h2><ol><li>express-favicon 统一处理小图标路径插件</li><li>youch 包 ,具体的错误信息输出到页面, 美化错误信息 ,准确的定位错误的位置</li><li>http-errors 创建 HTTP 错误插件,会让 http 请求产生的 err 更具体</li><li>cross-env 能跨平台地设置及使用环境变量(开发模式/生产模式)<a id="more"></a></li></ol><h2 id="启动环境配置"><a href="#启动环境配置" class="headerlink" title="启动环境配置"></a>启动环境配置</h2><blockquote><p>在 package.json 中的 scripts 对象 自定义指令</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "cross-env NODE_ENV=development nodemon app.js","start": "start":"cross-env NODE_ENV=production node app.js"</span><br></pre></td></tr></table></figure><blockquote><p>获取变量环境</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = req.app.get(<span class="string">"env"</span>);</span><br></pre></td></tr></table></figure><h2 id="模板引擎-express-art-template"><a href="#模板引擎-express-art-template" class="headerlink" title="模板引擎 express-art-template"></a>模板引擎 express-art-template</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> artTemplate = <span class="built_in">require</span>(<span class="string">"express-art-template"</span>);</span><br><span class="line">app.engine(<span class="string">"art"</span>, artTemplate);</span><br><span class="line"><span class="comment">// app.engine('art', require('express-art-template'));</span></span><br><span class="line"><span class="comment">//app.engine告诉express,art后缀模板交给expressTPL去处理  app.set是去view文件夹下面找要渲染的art文件</span></span><br><span class="line"><span class="comment">//因为默认页面被缓存了 而且被压缩了  模版引擎默认的是生产环境的配置 所以下面debug进行判断</span></span><br><span class="line"><span class="comment">//debug 使用的布尔值  false 生产环境(压缩缓存页面)  true开发环境实时更新页面 不进行压缩方便开发者调试</span></span><br><span class="line">app.set(<span class="string">"view options"</span>, &#123;</span><br><span class="line">  debug: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="\$.get()"></a>\$.get()</h2><p>这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax</p><h2 id="报错和-undefined"><a href="#报错和-undefined" class="headerlink" title="报错和 undefined"></a>报错和 undefined</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a.a); <span class="comment">//Cannot read property 'a' of undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//报错 a is not undefined</span></span><br></pre></td></tr></table></figure><p>如果访问一个对象的属性时候,属性如果没有声明赋值,那么就是 undefined,如果访问一个变量,没有声明,就会报错,访问 undefined 的属性也会报错,undefined 上找不到任何属性</p><h2 id="input-type-number-购物车增加减少"><a href="#input-type-number-购物车增加减少" class="headerlink" title="input type=number 购物车增加减少"></a>input type=number 购物车增加减少</h2><p><input type="number" autofocus name="num" min="1" value="1"><br>最小值是 1  自动获取焦点 出现增加减少按钮</p><h2 id="express-art-template-渲染变量-res-locals"><a href="#express-art-template-渲染变量-res-locals" class="headerlink" title="express-art-template 渲染变量 res.locals"></a>express-art-template 渲染变量 res.locals</h2><blockquote><p>在调用 res.render 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：res.render 传入的对象&gt; res.locals 对象 &gt; app.locals 对象，所以 app.locals 和 res.locals 几乎没有区别，都用来渲染模板，使用上的区别在于：app.locals 上通常挂载常量信息（如博客名、描述、作者信息），res.locals 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，res.locals.user = req.session.user）。<br>修改 index.js，在 routes(app); 上一行添加如下代码：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模板全局常量</span></span><br><span class="line">app.locals.blog = &#123;</span><br><span class="line">  title: pkg.name,</span><br><span class="line">  description: pkg.description</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加模板必需的三个变量</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.locals.user = req.session.user;</span><br><span class="line">  res.locals.success = req.flash(<span class="string">"success"</span>).toString();</span><br><span class="line">  res.locals.error = req.flash(<span class="string">"error"</span>).toString();</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.locals 属性值将在应用程序的整个生命周期中保持不变，而 res.locals 属性仅在请求的生命周期内有效。</p><p>这样在调用 res.render 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量</p><h2 id="jquery-parent-和-parents-的区别"><a href="#jquery-parent-和-parents-的区别" class="headerlink" title="jquery parent 和 parents 的区别"></a>jquery parent 和 parents 的区别</h2><p>从字面上不难看出 parent 是指取得一个包含着所有匹配元素的唯一父元素的元素集合。parents 则是取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选可以看出 parent 的取值很明确，就是当前元素的父元素；parents 则是当前元素的祖先元素。下面列出例子说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div4"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br>　　$(‘p’).parent()取到的是div2,div3,div4　　<br>　　$(‘p’).parent(‘.a’)取到的是 div3<br>　　$(‘p’).parent().parent()取到的是div1，这点比较奇特；不过Jquery对象本身的特点决定了这是可行的。<br>　　$(‘p’).parents()取到的是 div1,div2,div3,div4<br>　　\$(‘p’).parents(‘.a’)取到的是 div3</p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>正向代理（forward proxy） ，一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并制定目标（原始服务器），然后代理向原始服务器转发请求并将获得的内容返回给客户端，客户端才能使用正向代理。我们平时说的代理就是指正向代理。<br>简单一点：A 向 C 借钱，由于一些情况不能直接向 C 借钱，于是 A 想了一个办法，他让 B 去向 C 借钱，这样 B 就代替 A 向 C 借钱，A 就得到了 C 的钱，C 并不知道 A 的存在，B 就充当了 A 的代理人的角色。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正向代理的用途：</span><br><span class="line">　　（1）访问原来无法访问的资源，如 google</span><br><span class="line">    （2） 可以做缓存，加速访问资源</span><br><span class="line">　　（3）对客户端访问授权，上网进行认证</span><br><span class="line">　　（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<br>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反向代理用途</span><br><span class="line">（1）保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击,大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</span><br><span class="line">（2）负载均衡，通过反向代理服务器来优化网站的负载</span><br></pre></td></tr></table></figure><blockquote><p>正向代理和反向代理的区别</p></blockquote><ul><li>位置不同</li></ul><ol><li>正向代理，架设在客户机和目标主机之间；</li><li>反向代理，架设在服务器端；</li></ol><ul><li>代理对象不同</li></ul><ol><li>正向代理，代理客户端，服务端不知道实际发起请求的客户端；</li><li>反向代理，代理服务端，客户端不知道实际提供服务的服务端；<blockquote><p>备注：正向代理–HTTP 代理为多个人提供翻墙服务；反向代理–百度外卖为多个商户提供平台给某个用户提供外卖服务。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用-mvc-思想构建项目&quot;&gt;&lt;a href=&quot;#使用-mvc-思想构建项目&quot; class=&quot;headerlink&quot; title=&quot;使用 mvc 思想构建项目&quot;&gt;&lt;/a&gt;使用 mvc 思想构建项目&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;models 数据模型   获取接口服务器数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;views  视图层     渲染页面 使用模版引擎&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;controllers 控制器   组织请求对应的去进行业务处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public 静态资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utils 工具类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;开发用插件&quot;&gt;&lt;a href=&quot;#开发用插件&quot; class=&quot;headerlink&quot; title=&quot;开发用插件&quot;&gt;&lt;/a&gt;开发用插件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;express-favicon 统一处理小图标路径插件&lt;/li&gt;
&lt;li&gt;youch 包 ,具体的错误信息输出到页面, 美化错误信息 ,准确的定位错误的位置&lt;/li&gt;
&lt;li&gt;http-errors 创建 HTTP 错误插件,会让 http 请求产生的 err 更具体&lt;/li&gt;
&lt;li&gt;cross-env 能跨平台地设置及使用环境变量(开发模式/生产模式)
    
    </summary>
    
    
  </entry>
  
</feed>
