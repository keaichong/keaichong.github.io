<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阳仔的博客</title>
  
  <subtitle>选择性失忆</subtitle>
  <link href="/keaichong.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-12T02:38:27.879Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>愚人阳仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>slot插槽使用</title>
    <link href="http://yoursite.com/2019/08/12/slot%E6%8F%92%E6%A7%BD%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/12/slot插槽使用/</id>
    <published>2019-08-12T02:31:20.000Z</published>
    <updated>2019-08-12T02:38:27.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子组件-Child"><a href="#子组件-Child" class="headerlink" title="子组件 Child"></a>子组件 Child</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- // 作用域插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:aa</span>=<span class="string">"data"</span> <span class="attr">:bb</span>=<span class="string">"shuju"</span> <span class="attr">cc</span>=<span class="string">"这是一首简单的歌"</span>&gt;</span> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// props的值来源于父组件</span></span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">"无数据"</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      shuju: &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">"无数据"</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="父组件使用"><a href="#父组件使用" class="headerlink" title="父组件使用"></a>父组件使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:data</span>=<span class="string">"dataprop"</span> <span class="attr">:shuju</span>=<span class="string">"shuju1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;template v-slot="scope"&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue2.6以上语法 v-slot:default="scope" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- scope是一个对象 对象的属性是child组件中&lt;slot&gt;绑定的属性 对象的值是&lt;slot&gt;绑定的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>下面是scope内容:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;scope&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in scope.aa"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>姓名:&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in scope.bb"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">          姓名:&#123;&#123;item.name&#125;&#125;-年龄:&#123;&#123;item.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>歌曲:&#123;&#123;scope.cc&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">"./child.vue"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        dataprop: [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wanwu"</span>, <span class="string">"zhaoliu"</span>, <span class="string">"tianqi"</span>, <span class="string">"xiaoba"</span>],</span></span><br><span class="line"><span class="undefined">        shuju1: [</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">"科比"</span>,</span></span><br><span class="line"><span class="javascript">            age: <span class="string">"29"</span>,</span></span><br><span class="line"><span class="javascript">            sex: <span class="string">"man"</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">"欧文"</span>,</span></span><br><span class="line"><span class="javascript">            age: <span class="string">"30"</span>,</span></span><br><span class="line"><span class="javascript">            sex: <span class="string">"woman"</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Child</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="页面显示内容"><a href="#页面显示内容" class="headerlink" title="页面显示内容"></a>页面显示内容</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">我是父组件</span><br><span class="line">我是子组件child</span><br><span class="line">下面是scope内容:</span><br><span class="line">&#123; <span class="attr">"aa"</span>: [ <span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wanwu"</span>, <span class="string">"zhaoliu"</span>, <span class="string">"tianqi"</span>, <span class="string">"xiaoba"</span> ], <span class="attr">"bb"</span>: [ &#123; <span class="attr">"name"</span>: <span class="string">"科比"</span>, <span class="attr">"age"</span>: <span class="string">"29"</span>, <span class="attr">"sex"</span>: <span class="string">"man"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"欧文"</span>, <span class="attr">"age"</span>: <span class="string">"30"</span>, <span class="attr">"sex"</span>: <span class="string">"woman"</span> &#125; ], <span class="attr">"cc"</span>: <span class="string">"这是一首简单的歌"</span> &#125;</span><br><span class="line">姓名:zhangsan</span><br><span class="line">姓名:lisi</span><br><span class="line">姓名:wanwu</span><br><span class="line">姓名:zhaoliu</span><br><span class="line">姓名:tianqi</span><br><span class="line">姓名:xiaoba</span><br><span class="line">姓名:科比-年龄:29</span><br><span class="line">姓名:欧文-年龄:30</span><br><span class="line">歌曲:这是一首简单的歌</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;子组件-Child&quot;&gt;&lt;a href=&quot;#子组件-Child&quot; class=&quot;headerlink&quot; title=&quot;子组件 Child&quot;&gt;&lt;/a&gt;子组件 Child&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>axios封装</title>
    <link href="http://yoursite.com/2019/07/11/axios%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/07/11/axios封装/</id>
    <published>2019-07-11T08:15:17.000Z</published>
    <updated>2019-07-11T08:23:38.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="axios-封装-api-模块化-vuex"><a href="#axios-封装-api-模块化-vuex" class="headerlink" title="axios 封装 api 模块化 vuex"></a>axios 封装 api 模块化 vuex</h2><ul><li><p><a href="https://juejin.im/post/5c3c544c6fb9a049d37f5903" target="_blank" rel="noopener">https://juejin.im/post/5c3c544c6fb9a049d37f5903</a></p></li><li><p>在 src 目录下创建 utils/， 并创建 request.js 用来封装 axios，上代码：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios 实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.BASE_API, <span class="comment">// api的base_url</span></span><br><span class="line">  timeout: <span class="number">10000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里可以自定义一些config 配置</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">//  这里处理一些请求出错的情况</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="comment">// 这里处理一些response 正常放回时的逻辑</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里处理一些response 出错时的逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><ul><li>如何使用？ 我比较建议在 src/下创建 api 目录，用来统一管理所有的请求，比如下面这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//登陆</span></span><br><span class="line">  login(data) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">"/login"</span>,</span><br><span class="line">      method: <span class="string">"post"</span>,</span><br><span class="line">      data</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取用户信息</span></span><br><span class="line">  getuserInfo() &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">"/userInfo"</span>,</span><br><span class="line">      method: <span class="string">"get"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>这样的好处是方便管理、后期维护，还可以和后端的微服务对应，建立多文件存放不同模块的 api。剩下的就是你使用到哪个 api 时，自己引入便可。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;axios-封装-api-模块化-vuex&quot;&gt;&lt;a href=&quot;#axios-封装-api-模块化-vuex&quot; class=&quot;headerlink&quot; title=&quot;axios 封装 api 模块化 vuex&quot;&gt;&lt;/a&gt;axios 封装 api 模块化 vuex&lt;/
      
    
    </summary>
    
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>PS切图</title>
    <link href="http://yoursite.com/2019/06/27/PS%E5%88%87%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/06/27/PS切图/</id>
    <published>2019-06-27T08:14:46.000Z</published>
    <updated>2019-08-09T14:05:16.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h3><ol><li>选择工具栏矩形选框工具</li><li>顶栏样式选择固定大小</li><li>选中切图区域后标注辅助线</li><li>ctrl+c 复制选中图层</li><li>ctrl+n 新建图层</li><li>ctrl+v 粘贴图层</li><li>ctrl+shift+alt+s 保存剪切好的图层到指定位置</li></ol><h2 id="判断页面是否是微信浏览器打开"><a href="#判断页面是否是微信浏览器打开" class="headerlink" title="判断页面是否是微信浏览器打开"></a>判断页面是否是微信浏览器打开</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> is_weixin = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">"micromessenger"</span>) !== <span class="number">-1</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">if</span> (is_weixin) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vscode-快捷键"><a href="#vscode-快捷键" class="headerlink" title="vscode 快捷键"></a>vscode 快捷键</h2><ol><li>选中一段文字，按 shift+alt+i，可以在每行末尾出现光标</li><li>光标放在一个地方，按 ctrl+shift+L 或者 ctrl+f2，可以在页面中出现这个词的不同地方都出现光标。有时候这个快捷键的作用和 f2 重命名变量类似，但是它更加广泛，因为还可以对比如字符串相同的非同一变量或函数类的东西修改。</li></ol><h2 id="vue-计算属性-computed"><a href="#vue-计算属性-computed" class="headerlink" title="vue 计算属性 computed"></a>vue 计算属性 computed</h2><ol><li>computed 如果依赖了 data 里的数据，当依赖变化就会触发 computed 的更新，前提是 computed 里的值必须要在模板里使用才行,否则也不会触发 computed</li></ol><h2 id="作用域插槽-带数据的插槽"><a href="#作用域插槽-带数据的插槽" class="headerlink" title="作用域插槽|带数据的插槽"></a>作用域插槽|带数据的插槽</h2><ul><li>参考 <a href="https://segmentfault.com/a/1190000012996217" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012996217</a></li><li>参考优先 <a href="https://www.bbsmax.com/A/nAJvP0Xndr/" target="_blank" rel="noopener">https://www.bbsmax.com/A/nAJvP0Xndr/</a></li></ul><ol><li><p>slot-scope=’scope’  scope是一个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">匿名插槽</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">具名插槽</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"up"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>作用域插槽，实际上，对比前面两种插槽，我们可以叫它带数据的插槽。作用域插槽要求，在 slot 上面绑定数据。也就是你得写成大概下面这个样子。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">"up"</span> :data=<span class="string">"data"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        data: [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wanwu'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'tianqi'</span>,<span class="string">'xiaoba'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插槽最后显示不显示是看父组件有没有在 child 下面写模板，像下面那样。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">  html模板</span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="slice-和-concat-对数组的深拷贝"><a href="#slice-和-concat-对数组的深拷贝" class="headerlink" title="slice 和 concat 对数组的深拷贝"></a>slice 和 concat 对数组的深拷贝</h2><ul><li>slice,concat 方法的局限性,slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝不会改变原数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.slice();</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat();</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="string">"9"</span>;</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="string">"5"</span>;</span><br><span class="line"><span class="comment">//arr1 = ["1","2","3"];</span></span><br><span class="line"><span class="comment">//arr2 = ["1","9","3"];</span></span><br><span class="line"><span class="comment">//arr3 = ["1","5","3"];</span></span><br></pre></td></tr></table></figure><h2 id="获取表单中所有具有-name-属性的值"><a href="#获取表单中所有具有-name-属性的值" class="headerlink" title="获取表单中所有具有 name 属性的值"></a>获取表单中所有具有 name 属性的值</h2><ul><li>获取表单中所有具有 name 属性的值 包括</li><li>var formData = \$(‘#edit_form’).serialize();</li></ul><h2 id="js-判断字符串长度"><a href="#js-判断字符串长度" class="headerlink" title="js 判断字符串长度"></a>js 判断字符串长度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.gblen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.charCodeAt(i) &gt; <span class="number">127</span> || <span class="keyword">this</span>.charCodeAt(i) == <span class="number">94</span>) &#123;</span><br><span class="line">      len += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      len++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h2><ul><li>表单序列化的三种方式</li><li><a href="https://www.cnblogs.com/tanzq/p/9857213.html" target="_blank" rel="noopener">https://www.cnblogs.com/tanzq/p/9857213.html</a></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $("button").click(function()&#123;</span><br><span class="line">    $("div").text($("form").serialize());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;form action=""&gt;</span><br><span class="line">First name: &lt;input type="text" name="FirstName" value="Bill" /&gt;&lt;br /&gt;</span><br><span class="line">Last name: &lt;input type="text" name="LastName" value="Gates" /&gt;&lt;br /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">//最终序列化出的结果就是:FirstName=Bill&amp;LastName=Gates</span><br></pre></td></tr></table></figure><h2 id="js-选中-select-下拉框的值"><a href="#js-选中-select-下拉框的值" class="headerlink" title="js 选中 select 下拉框的值"></a>js 选中 select 下拉框的值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"select1"</span> <span class="attr">id</span>=<span class="string">"select1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">id</span>=<span class="string">"pg"</span> <span class="attr">value</span>=<span class="string">"pg"</span> <span class="attr">name</span>=<span class="string">"pg"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"xj"</span> <span class="attr">name</span>=<span class="string">"xj"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"jz"</span> <span class="attr">name</span>=<span class="string">"jz"</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"xg"</span> <span class="attr">name</span>=<span class="string">"xg"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取选择框select1</span></span><br><span class="line"><span class="keyword">var</span> select1 = <span class="built_in">document</span>.getElementById(<span class="string">"select1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择框选中的value</span></span><br><span class="line"><span class="comment">//var select1_value = select1.value;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//select1的改变事件,输出选中的选项的value</span></span><br><span class="line">select1.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(select1.value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//机械获取选择框里的选项的value</span></span><br><span class="line"><span class="keyword">var</span> option_value1 = select1.options[<span class="number">0</span>].value; <span class="comment">//"pg"</span></span><br><span class="line"><span class="keyword">var</span> option_value2 = select1.options[<span class="number">1</span>].value; <span class="comment">//"xj"</span></span><br><span class="line"><span class="keyword">var</span> option_value3 = select1.options[<span class="number">2</span>].value; <span class="comment">//"jz"</span></span><br><span class="line"><span class="keyword">var</span> option_value4 = select1.options[<span class="number">3</span>].value; <span class="comment">//"xg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前被选中选项的index值</span></span><br><span class="line"><span class="keyword">var</span> Index = select1.selectedIndex; <span class="comment">//比如选中西瓜,select1.selectedIndex=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到选中项options的value</span></span><br><span class="line">myselect.options[select1.selectedIndex].value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到选中项options的text：</span></span><br><span class="line">select1.options[select1.selectedIndex].text;</span><br></pre></td></tr></table></figure><h2 id="文件图片上传显示"><a href="#文件图片上传显示" class="headerlink" title="文件图片上传显示"></a>文件图片上传显示</h2><ul><li><a href="https://www.cnblogs.com/gr07/p/9628523.html" target="_blank" rel="noopener">https://www.cnblogs.com/gr07/p/9628523.html</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"fileinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"sendImg"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">      <span class="attr">accept</span>=<span class="string">"image/*"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> form1 = <span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>);</span><br><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line"><span class="comment">//文件发生改变时候触发</span></span><br><span class="line">file.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> file = event.target.files[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(file, <span class="string">"file"</span>);</span><br><span class="line">  <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="built_in">console</span>.log(reader);</span><br><span class="line">  <span class="comment">// 调用reader.readAsDataURL()方法，把图片转成base64(必须)</span></span><br><span class="line">  reader.readAsDataURL(file);</span><br><span class="line">  <span class="comment">// 监听reader对象的onload事件，当图片加载完成时，把base64编码賦值给预览图片</span></span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    img.src = <span class="keyword">this</span>.result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="聊天对话信息展示用-pre-标签包裹"><a href="#聊天对话信息展示用-pre-标签包裹" class="headerlink" title="聊天对话信息展示用 pre 标签包裹"></a>聊天对话信息展示用 pre 标签包裹</h2><ol><li>pre 这是预格式文本。它保留空格和换行。</li><li>pre 标签很适合显示计算机代码：</li></ol><p>for i = 1 to 10<br>print i<br>next i</p><h2 id="父组件获取子组件-data"><a href="#父组件获取子组件-data" class="headerlink" title="父组件获取子组件 data"></a>父组件获取子组件 data</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.form.age;</span><br></pre></td></tr></table></figure><h2 id="url-地址栏路径的问题"><a href="#url-地址栏路径的问题" class="headerlink" title="url 地址栏路径的问题"></a>url 地址栏路径的问题</h2><ul><li>E:\前端与移动开发基础\就业班 node.js\09-nodejs\视频\23_路径的问题</li></ul><h2 id="谷歌-f12-看不到-vue-的-devtools-图标"><a href="#谷歌-f12-看不到-vue-的-devtools-图标" class="headerlink" title="谷歌 f12 看不到 vue 的 devtools 图标"></a>谷歌 f12 看不到 vue 的 devtools 图标</h2><ol><li>先刷新 f5,在按 f12</li><li>看一下引用的 vue 是 vue.js 还是 vue.min.js , vue.min.js 是生产下用的， 所以 devtools 是没有用</li></ol><h2 id="forEach-和-map-比较"><a href="#forEach-和-map-比较" class="headerlink" title="forEach 和 map 比较"></a>forEach 和 map 比较</h2><ol><li>区别：map 的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）</li><li><p>map 速度比 foreach 快</p></li><li><p>map 会返回一个新数组，不对原数组产生影响,foreach 不会产生新数组，</p></li><li><p>map 因为返回数组所以可以链式操作，foreach 不能</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = arr.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> v * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//r=[2,4,5,8,10] arr= [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">//把map换为forEach 因为foreach没有返回值所以把undefined赋值给了r</span></span><br></pre></td></tr></table></figure><h2 id="块级元素居中显示-css3-属性"><a href="#块级元素居中显示-css3-属性" class="headerlink" title="块级元素居中显示 css3 属性"></a>块级元素居中显示 css3 属性</h2><ol><li>使用 css3 样式属性 display:flex 设定水平垂直居中，父元素样式属性 display:flex;子元素使用 margin:auto;未知子元素高度的时候依然可以使用。</li><li>一般 chrome 和火狐都能很好地支持。ie 不支持</li></ol><h2 id="bit-位和-Byte-字节"><a href="#bit-位和-Byte-字节" class="headerlink" title="bit 位和 Byte 字节"></a>bit 位和 Byte 字节</h2><ol><li>bit(位) 一个数字 0 或者一个数字 1;代表一位</li><li>Byte(字节) 1 Byte = 8bit ;是数据存储的最小单位</li></ol><ul><li>假设我们的宽带是 100Mbps, 第二个 b 就是 bit;但是下载网速是 12.5MB/S; 第二个 B 代表的 Byte;所以要用 100%8 才会是我们下载的理论大小速度</li></ul><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ol><li>jvm java 虚拟机</li><li>jre java 运行环境(封装有 jvm) 运行 java 代码</li><li>jdk java 工具包 (封装有 jre) 开发 java 代码</li></ol><h2 id="url-image-1-png-v-1-a-css-v-f02bc2"><a href="#url-image-1-png-v-1-a-css-v-f02bc2" class="headerlink" title="url(image/1.png?v=1) a.css?v=f02bc2"></a>url(image/1.png?v=1) a.css?v=f02bc2</h2><ul><li>向图片传参本身不会对图片有任何影响,一般是为了避免缓存才这么干，可能是由于这张图片经常更换，但又必须实时显示的缘故</li><li>css 文件后缀传参 利用 数据摘要要算法 对文件求摘要信息，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了 (摘要算法又称哈希算法，它表示输入任意长度的数据，输出固定长度的数据，相同的输入数据始终得到相同的输出，不同的输入数据尽量得到不同的输出。)</li></ul><h2 id="js-对时间进行排序"><a href="#js-对时间进行排序" class="headerlink" title="js 对时间进行排序"></a>js 对时间进行排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">"value1"</span>, <span class="attr">date</span>: <span class="string">"2018-08-08"</span>, <span class="attr">time</span>: <span class="string">"15:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">"value2"</span>, <span class="attr">date</span>: <span class="string">"2018-08-09"</span>, <span class="attr">time</span>: <span class="string">"12:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">"value3"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"17:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">value</span>: <span class="string">"value4"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"01:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">"value5"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"09:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">value</span>: <span class="string">"value6"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"23:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">value</span>: <span class="string">"value7"</span>, <span class="attr">date</span>: <span class="string">"2018-08-10"</span>, <span class="attr">time</span>: <span class="string">"16:27:17"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">value</span>: <span class="string">"value8"</span>, <span class="attr">date</span>: <span class="string">"2018-08-11"</span>, <span class="attr">time</span>: <span class="string">"10:27:17"</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">//time: "2019-06-13" 这种日期格式也可以升序降序</span></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line">arr.sort(</span><br><span class="line">  (a, b) =&gt; a.date.localeCompare(b.date) || a.time.localeCompare(b.time)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line">arr.sort(</span><br><span class="line">  (a, b) =&gt; b.date.localeCompare(a.date) || b.time.localeCompare(a.time)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="取消事件的方法"><a href="#取消事件的方法" class="headerlink" title="取消事件的方法"></a>取消事件的方法</h2><ol><li>event.preventDefault()</li><li>event.stopPropagation()</li></ol><ul><li>这两种是在 JS 中的常用取消事件的方法，但是其实还有一种用纯 css 就能实现取消事件响应的方法，pointer-events，使用起来更加简单，它可以：</li></ul><ol><li><p>阻止用户的点击动作产生任何效果</p></li><li><p>阻止缺省鼠标指针的显示</p></li><li><p>阻止 CSS 里的 hover 和 active 状态的变化触发事件</p></li><li><p>阻止 JavaScript 点击动作触发的事件</p></li></ol><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// "引用计数"（reference counting）：语言引擎有一张"引用表"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。</span></span><br><span class="line"><span class="comment">//数组[1,2,3,4]是一个值,会占用内存,arr是对这个数组的引用,因为引用次数为1,所以不会被系统释放掉,可以增加一行代码,接触对这个数值的引用</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//arr重置为null，就解除了对[1, 2, 3, 4]的引用，引用次数变成了0，内存就可以释放出来了。</span></span><br><span class="line"><span class="comment">//因此，并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用。如果是的话，就必须手动解除引用。</span></span><br></pre></td></tr></table></figure><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><ul><li>加密和解密需要两把钥匙 一把公钥 一把私钥</li><li>公钥是公开的，任何人都可以获取。私钥是保密的，只有拥有者才能使用。他人使用你的公钥加密信息，然后发送给你，你用私钥解密，取出信息。反过来，你也可以用私钥加密信息，别人用你的公钥解开，从而证明这个信息确实是你发出的，且未被篡改，这叫做数字签名</li></ul><h2 id="vue-三元运算符"><a href="#vue-三元运算符" class="headerlink" title="vue 三元运算符"></a>vue 三元运算符</h2><ul><li>gender: userInfo.gender == ‘F’ ? ‘2’ : userInfo.gender == ‘M’ ? ‘1’ : ‘0’, 可以判断男女其他</li></ul><h2 id="vue-钩子函数-updated-触发条件"><a href="#vue-钩子函数-updated-触发条件" class="headerlink" title="vue 钩子函数 updated 触发条件"></a>vue 钩子函数 updated 触发条件</h2><ul><li>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>无论是组件本身的数据变更，还是从父组件接收到的 props 或者从 vuex 里面拿到的数据有变更，都会触发虚拟 DOM 重新渲染和打补丁，并在之后调用 updated。</li></ul><h2 id="div-居中三种方法"><a href="#div-居中三种方法" class="headerlink" title="div 居中三种方法"></a>div 居中三种方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">margin</span>: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">父元素<span class="selector-tag">display</span><span class="selector-pseudo">:flex</span></span><br><span class="line">子元素<span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span> 子元素居中</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;切图&quot;&gt;&lt;a href=&quot;#切图&quot; class=&quot;headerlink&quot; title=&quot;切图&quot;&gt;&lt;/a&gt;切图&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择工具栏矩形选框工具&lt;/li&gt;
&lt;li&gt;顶栏样式选择固定大小&lt;/li&gt;
&lt;li&gt;选中切图区域后标注辅助线&lt;/li&gt;
&lt;li&gt;ctrl+c 复制选中图层&lt;/li&gt;
&lt;li&gt;ctrl+n 新建图层&lt;/li&gt;
&lt;li&gt;ctrl+v 粘贴图层&lt;/li&gt;
&lt;li&gt;ctrl+shift+alt+s 保存剪切好的图层到指定位置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;判断页面是否是微信浏览器打开&quot;&gt;&lt;a href=&quot;#判断页面是否是微信浏览器打开&quot; class=&quot;headerlink&quot; title=&quot;判断页面是否是微信浏览器打开&quot;&gt;&lt;/a&gt;判断页面是否是微信浏览器打开&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模块化规范</title>
    <link href="http://yoursite.com/2019/04/10/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/04/10/模块化规范/</id>
    <published>2019-04-10T13:41:35.000Z</published>
    <updated>2019-04-11T14:11:58.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包-维护私有变量安全-外部无法获取"><a href="#闭包-维护私有变量安全-外部无法获取" class="headerlink" title="闭包 维护私有变量安全 外部无法获取"></a>闭包 维护私有变量安全 外部无法获取</h2><blockquote><p>IIFE 模式:匿名函数自调用 闭包</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">"a"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过window暴露给全局</span></span><br><span class="line">  <span class="built_in">window</span>.module = &#123; foo &#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">// 页面调用</span></span><br><span class="line"><span class="built_in">module</span>.foo(); <span class="comment">//a</span></span><br></pre></td></tr></table></figure><h2 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h2><ol><li>commonjs 在服务端使用 NODEJS ,采用 commonJS 规范, require module.exports, 因为 html script 引入 js 文件中有 require 会报错 require not defined </li><li>commonjs 在浏览器端使用要处理 比如webpack 等打包工具会转换</li></ol><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义没有以来的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name  = <span class="string">'dataService.js'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//暴露模块</span></span><br><span class="line">    <span class="keyword">return</span>&#123;getName&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>import from export default</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包-维护私有变量安全-外部无法获取&quot;&gt;&lt;a href=&quot;#闭包-维护私有变量安全-外部无法获取&quot; class=&quot;headerlink&quot; title=&quot;闭包 维护私有变量安全 外部无法获取&quot;&gt;&lt;/a&gt;闭包 维护私有变量安全 外部无法获取&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>router两种方式</title>
    <link href="http://yoursite.com/2019/03/30/router%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/30/router两种方式/</id>
    <published>2019-03-30T13:24:00.000Z</published>
    <updated>2019-03-30T14:54:57.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a><router-link :to="...">声明式</router-link></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"apple"</span>&gt;</span> to apple<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// 对象</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path:'apple'&#125;"</span>&gt;</span> to apple<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// 命名路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'applename'&#125;"</span>&gt;</span> to apple<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">//直接路由带查询参数query，地址栏变成 /apple?color=red</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'apple', query: &#123;color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">// 命名路由带查询参数query，地址栏变成/apple?color=red</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'applename', query: &#123;color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">//直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'apple', params: &#123; color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">// 命名路由带路由参数params，地址栏是/apple/red</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'applename', params: &#123; color: 'red' &#125;&#125;"</span>&gt;</span></span><br><span class="line">  to apple<span class="tag">&lt;/<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="router-push-…-编程式方法"><a href="#router-push-…-编程式方法" class="headerlink" title="router.push(…) 编程式方法"></a>router.push(…) 编程式方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">"apple"</span>);</span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">"apple"</span> &#125;);</span><br><span class="line"><span class="comment">// 命名路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">"applename"</span> &#125;);</span><br><span class="line"><span class="comment">//直接路由带查询参数query，地址栏变成 /apple?color=red</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">"apple"</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 命名路由带查询参数query，地址栏变成/apple?color=red</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">"applename"</span>, <span class="attr">query</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">//直接路由带路由参数params，params 不生效，如果提供了 path，params 会被忽略,必须使用命名路由</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">"applename"</span>, <span class="attr">params</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 命名路由带路由参数params，地址栏是/apple/red</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">"applename"</span>, <span class="attr">params</span>: &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>关于带参数的路由总结如下</li></ol><ul><li>无论是直接路由“path” 还是命名路由“name”，带查询参数 query，地址栏会变成“/url?查询参数名：查询参数值“;</li><li>直接路由“path” 带路由参数 params params 不生效;</li><li>命名路由“name” 带路由参数 params 地址栏保持是“/url/路由参数值”;</li></ul><ol start="2"><li>设置路由 map 里的 path 值：</li></ol><ul><li>带路由参数 params 时，路由 map 里的 path 应该写成: path:’/apple/:color’ ;</li><li>带查询参数 query 时，路由 map 里的 path 应该写成: path:’/apple’ ；</li></ul><ol start="3"><li>获取参数方法：</li></ol><ul><li>在 template 中：</li><li>在 script 里： this.\$route.params.color</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;声明式&quot;&gt;&lt;a href=&quot;#声明式&quot; class=&quot;headerlink&quot; title=&quot;声明式&quot;&gt;&lt;/a&gt;&lt;router-link :to=&quot;...&quot;&gt;声明式&lt;/router-link&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>菜虫网后台项目过程</title>
    <link href="http://yoursite.com/2019/03/30/%E8%8F%9C%E8%99%AB%E7%BD%91%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/30/菜虫网后台项目过程/</id>
    <published>2019-03-30T08:42:08.000Z</published>
    <updated>2019-04-01T06:53:22.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登陆页"><a href="#登陆页" class="headerlink" title="登陆页"></a>登陆页</h2><ol><li>在封装 axios 在挂载到 vue.prototype.\$http=axios;</li><li>methods 中用 axios 发送登陆请求,请求成功之后在 localStorage 里保存 token ; localStorage.setItem(“token”, data.token);</li><li>在用编程式导航 this.\$router.push({name: “home”})跳转到后台的首页</li><li>methods 中发请求的位置用 async await ,await 绑定在异步操作请求前面,async 写在离异步操作最近的外层函数前面</li><li>cookie 存小数据客户端 seession 服务端存数据 localstorge 存在浏览器内存中</li><li>element-ui 中的属性如果是布尔值 要在属性前加上:绑定.比如:opend=”true”,不加会认为属性是一个 true 字符串</li></ol><h2 id="退出登陆"><a href="#退出登陆" class="headerlink" title="退出登陆"></a>退出登陆</h2><ol><li>退出登陆 localStorage.clear();this.\$router.push({name: “login”});</li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ol><li>在 main.js 全局过滤器 - 处理日期格式 Vue.filter(‘fmtdate’, (v) =&gt; {return moment(v).format(‘YYYY-MM-DD’);})</li><li>element-ui 中一些自己的事件,比如搜索框当点击清空按钮@clear 会触发你绑定事件 事件中设置页码为 1 然后重新调用请求方法获取第一页数据</li><li>通过 template 标签里面设置 v-slot=”scope”绑定外层数据 scope.row 获取当前的对象,在获取对象属性的值发请求更改用户状态开关 删除和编辑和下拉框分配用户角色</li></ol><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>封装面包屑组件 在 main.js 导入封装好的面包屑 import CusBread from ‘@/components/cusBread.vue’然后在全局自定义 Vue.component(CusBread.name, CusBread);</li><li>表格展开行显示三层权限,用行列布局展示,element-ui 是一行 24 份,先分为 4:20;在 20 份中在分 4:20 完成效果</li><li>tree 形控件,只需要给最里层的id添加到数组中,然后就会选中,只有当最里层全部选中,外层会自动选上,如果给外层也选中,会导致里面所有层都全选</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">role.children.forEach(<span class="function"><span class="params">item1</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// temp2.push(item1.id);// 最外层id-&gt;temp-&gt;arrCheck</span></span><br><span class="line">  item1.children.forEach(<span class="function"><span class="params">item2</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// temp2.push(item2.id);</span></span><br><span class="line">    item2.children.forEach(<span class="function"><span class="params">item3</span> =&gt;</span> &#123;</span><br><span class="line">      temp2.push(item3.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;登陆页&quot;&gt;&lt;a href=&quot;#登陆页&quot; class=&quot;headerlink&quot; title=&quot;登陆页&quot;&gt;&lt;/a&gt;登陆页&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在封装 axios 在挂载到 vue.prototype.\$http=axios;&lt;/li&gt;
&lt;li&gt;methods 
      
    
    </summary>
    
    
      <category term="vue项目" scheme="http://yoursite.com/tags/vue%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据类型判断watch回调</title>
    <link href="http://yoursite.com/2019/03/26/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2019/03/26/js数据类型判断/</id>
    <published>2019-03-26T07:05:34.000Z</published>
    <updated>2019-03-28T14:38:38.193Z</updated>
    
    <content type="html"><![CDATA[<ol><li>typeof</li><li>instanceof</li><li>constructor</li><li>Object.prototype.toString<br><a href="https://blog.csdn.net/zjy_android_blog/article/details/81023177" target="_blank" rel="noopener">https://blog.csdn.net/zjy_android_blog/article/details/81023177</a></li></ol><p>个人理解:假设 arr 是一个数组,toString 是 object 的原型里面的方法其返回的是类似 ‘[object class]’的字符串,但是当我们使用 arr.toString()时，不能进行复杂数据类型的判断，因为它调用的是 Array.prototype.toString，虽然 Array 也继承自 Object，但 js 在 Array.prototype 上重写了 toString，将 toString 改变成转换为字符串的一个方法,而我们通过 toString.call(arr)实际上是改变 object 的 this 指向让 object 的 toString 重新通过原型链调用了 Object.prototype.toString。</p><a id="more"></a><blockquote><p>JavaScript 中一切都是对象，任何都不例外，对所有值类型应用 Object.prototype.toString.call() 方法结果如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">"123"</span>)); <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)); <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)); <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([])); <span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">//[object Function]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.prototype.toString ( )</span></span><br><span class="line"><span class="comment">// 在toString方法被调用时,会执行下面的操作步骤:</span></span><br><span class="line"><span class="comment">// 如果this的值为undefined,则返回"[object Undefined]".</span></span><br><span class="line"><span class="comment">// 如果this的值为null,则返回"[object Null]".</span></span><br><span class="line"><span class="comment">// 让O成为调用ToObject(this)的结果.</span></span><br><span class="line"><span class="comment">// 让class成为O的内部属性[[Class]]的值.</span></span><br><span class="line"><span class="comment">// 返回三个字符串"[object ", class, 以及 "]"连接后的新字符串.</span></span><br></pre></td></tr></table></figure><h2 id="ES6-高阶箭头函数-函数柯里化"><a href="#ES6-高阶箭头函数-函数柯里化" class="headerlink" title="ES6 高阶箭头函数 函数柯里化"></a>ES6 高阶箭头函数 函数柯里化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y + x;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adc = <span class="function"><span class="params">x</span> =&gt;</span> y =&gt; x + y;</span><br><span class="line">adc(<span class="number">2</span>)(<span class="number">3</span>); <span class="comment">//5</span></span><br></pre></td></tr></table></figure><h2 id="watch-高级用法"><a href="#watch-高级用法" class="headerlink" title="watch 高级用法"></a>watch 高级用法</h2><ol><li>watch 和 computed 详解 推荐阅读***<br><a href="https://segmentfault.com/a/1190000012948175?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012948175?utm_source=tag-newest</a></li><li>watch 高级用法<br><a href="https://www.cnblogs.com/forward-wuyi/p/9627962.html" target="_blank" rel="noopener">https://www.cnblogs.com/forward-wuyi/p/9627962.html</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听复杂数据类型需用深度监听</span></span><br><span class="line">data()&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        first:&#123;</span><br><span class="line">          second:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      secondChange:&#123;</span><br><span class="line">        handler(oldVal,newVal)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(oldVal)  <span class="comment">//当改变first.second值为2  打印2</span></span><br><span class="line">          <span class="built_in">console</span>.log(newVal)  <span class="comment">//当改变first.second值为2  打印2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        deep:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><ul><li>问题</li></ul><ol><li>console.log 打印的结果,发现 oldVal 和 newVal 值是一样的都是修改后的,因为深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化</li><li>oldVal 和 newVal 值一样的原因是它们索引同一个对象/数组。Vue 不会保留修改之前值的副本</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：可以直接对用对象.属性的方法拿到属性</span></span><br><span class="line">data()&#123;</span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">            first:&#123;</span><br><span class="line">              second:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">          <span class="string">'first.second'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newVal,oldVal);<span class="comment">//当改变first.second值为2  打印2和0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="comment">// 方法二：watch如果想要监听对象的单个属性的变化,必须用computed作为中间件转化,因为computed可以取到对应的属性值</span></span><br><span class="line">data()&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        first:&#123;</span><br><span class="line">          second:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      secondChange()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first.second</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      secondChange()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'second属性值变化了'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="js-回调函数"><a href="#js-回调函数" class="headerlink" title="js 回调函数"></a>js 回调函数</h2><p><a href="https://www.cnblogs.com/lishuxue/p/5999682.html" target="_blank" rel="noopener">https://www.cnblogs.com/lishuxue/p/5999682.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义主函数，回调函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我是主函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="string">"console.log('我是回调函数')"</span>, <span class="number">3000</span>); <span class="comment">//模仿耗时操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用主函数，将函数B传进去</span></span><br><span class="line">A(B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">我是主函数;</span><br><span class="line">我是回调函数;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;typeof&lt;/li&gt;
&lt;li&gt;instanceof&lt;/li&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;li&gt;Object.prototype.toString&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/zjy_android_blog/article/details/81023177&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zjy_android_blog/article/details/81023177&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;个人理解:假设 arr 是一个数组,toString 是 object 的原型里面的方法其返回的是类似 ‘[object class]’的字符串,但是当我们使用 arr.toString()时，不能进行复杂数据类型的判断，因为它调用的是 Array.prototype.toString，虽然 Array 也继承自 Object，但 js 在 Array.prototype 上重写了 toString，将 toString 改变成转换为字符串的一个方法,而我们通过 toString.call(arr)实际上是改变 object 的 this 指向让 object 的 toString 重新通过原型链调用了 Object.prototype.toString。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>react和vue</title>
    <link href="http://yoursite.com/2019/03/15/react%E5%92%8Cvue/"/>
    <id>http://yoursite.com/2019/03/15/react和vue/</id>
    <published>2019-03-14T16:04:32.000Z</published>
    <updated>2019-03-14T16:30:48.060Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路由-vue-router-嵌套路由"><a href="#路由-vue-router-嵌套路由" class="headerlink" title="路由-vue-router-嵌套路由"></a>路由-vue-router-嵌套路由</h4><blockquote><p>children 用法和 routes 一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> $route.params.id  路由配置对象$route -&gt; 获取数据时</span><br><span class="line"><span class="number">2.</span> <span class="keyword">this</span>.$router.push()  路由实例化对象 -&gt;调方法</span><br></pre></td></tr></table></figure><h4 id="git-介绍安装"><a href="#git-介绍安装" class="headerlink" title="git-介绍安装"></a>git-介绍安装</h4><blockquote><p>开发中-&gt;管理代码-&gt;1 每次记录代码变化 2 协同开发 3 把代码托管到平台(网站) -&gt; git/svn</p><p>版本控制工具(管理代码-&gt;合代码):git/svn</p></blockquote><ol><li><p>git 命令行工具</p></li><li><p>git 是软件(git 官网-&gt;找系统 32/64-&gt;下一步安装)</p></li><li><p>安装后的结果是: 文件夹-&gt;右键-&gt;gitbash/git-&gt;git 指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 检查git版本</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h4 id="git-基础概念"><a href="#git-基础概念" class="headerlink" title="git-基础概念"></a>git-基础概念</h4><blockquote><p>安装 git 软件-&gt;gitbash(小黑框)-&gt;使用 git 指令</p></blockquote><blockquote><p>在使用 git 指令之前 .配置邮箱名字</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"xxx"</span></span><br><span class="line">$ git config --global user.email xxx@example.com</span><br></pre></td></tr></table></figure><blockquote><p>可以使用 git 版本控制 -&gt; 管理代码-&gt;管理流程:</p></blockquote><ol><li>工作区(项目代码所在的文件夹)-&gt;暂存区(临时中转) : git add .</li><li>暂存区-&gt;本地仓库(项目代码所在文件夹中有个文件)</li><li>本地仓库的代码-&gt;代码托管平台(网站:github/码云)</li></ol><h4 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git-基本操作"></a>git-基本操作</h4><ol><li>新建项目目录 04/code/gitdemos</li><li>gitdemos 右键-&gt;gitbash-&gt;执行 git 指令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 当前gitdemos项目可以使用git去管理了</span><br><span class="line">// 效果: 生成.git文件</span><br><span class="line">git init</span><br><span class="line">// 检查每个文件的状态(未跟踪/已修改)</span><br><span class="line">// git status</span><br><span class="line">// 把工作区代码-&gt;暂存区</span><br><span class="line">git add .</span><br><span class="line">// 暂存区-&gt; 本地仓库</span><br><span class="line">git commit -m <span class="string">"注释"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: git init 只需要写一次</p></blockquote><h4 id="git-远程仓库"><a href="#git-远程仓库" class="headerlink" title="git-远程仓库"></a>git-远程仓库</h4><blockquote><p>代码托管平台(github/码云)</p></blockquote><ol><li>注册</li><li>登录</li><li>新建远程仓库 (右上角+-&gt;new-&gt;命名-&gt;create)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 关联远程仓库</span><br><span class="line">git remote add origin https://github.com/自己的账号/gitdemos64.git</span><br><span class="line">// 推送代码 keaichong:Song.316113</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 开发功能1 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释1&quot;</span><br><span class="line">// 开发功能2 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释2&quot;</span><br><span class="line">// 推送代码</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>git 基本使用-&gt; git 没讲完</p></blockquote><h4 id="vue-cli-工具-介绍"><a href="#vue-cli-工具-介绍" class="headerlink" title="vue-cli 工具-介绍"></a>vue-cli 工具-介绍</h4><blockquote><p>vue 开发项目-&gt; 本地服务器+less 配置+好多辅助开发的工具都需要配置+新建好多文件夹(静态资源的文件/项目入口文件等)-&gt;结果: 使用一个 vue 开发时工具帮助我们生成 vue 项目目录-&gt;vue-cli 脚手架</p></blockquote><ol><li>vue-cli 是 vue 开发时必用工具</li><li>vue-cli 是全局命令行工具(-g 全局安装)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装脚手架工具(默认安装最新稳定版3+)</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">// 检查版本</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure><h4 id="vue-cli-安装和-2-3-版本解释"><a href="#vue-cli-安装和-2-3-版本解释" class="headerlink" title="vue-cli-安装和 2-3 版本解释"></a>vue-cli-安装和 2-3 版本解释</h4><blockquote><p>目的:安装 3+版本-&gt;使用 2 版本的指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 安装桥接工具</span><br><span class="line">npm install -g @vue/cli-init</span><br><span class="line">// 可以使用2版本的指令</span><br><span class="line">// vue项目根据其复杂程度可以有多种不同的目录</span><br><span class="line">// vue复杂 -&gt; 目录文件多一些</span><br><span class="line">// vue项目简单-&gt;少一些文件</span><br><span class="line">// webpack-simple固定写法(简单vue项目目录)</span><br><span class="line">vue init webpack-simple 项目文件所在目录的文件夹名字</span><br><span class="line">//vuecli3</span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><blockquote><p>注意: 2 和 3 版本的指令不一样</p></blockquote><h4 id="vue-cli-创建项目"><a href="#vue-cli-创建项目" class="headerlink" title="vue-cli-创建项目"></a>vue-cli-创建项目</h4><ol><li>来到目录 -&gt; 打开 cmd</li><li>vue init webpack 项目名称</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 提示</span><br><span class="line">// 项目名</span><br><span class="line">// 描述</span><br><span class="line">// 作者</span><br><span class="line">// 认证</span><br><span class="line">// sass -&gt; N</span><br><span class="line"><span class="built_in">cd</span> 项目名称目录</span><br><span class="line">npm i</span><br><span class="line">// 启动开发模式:会把生成的vue项目在一个自带的本地服务器进行运行+ 自动打开浏览器</span><br><span class="line">// 拓展: 开发模式/测试/上线(生产)</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h4 id="vue-cli-项目目录解释"><a href="#vue-cli-项目目录解释" class="headerlink" title="vue-cli-项目目录解释"></a>vue-cli-项目目录解释</h4><blockquote><p>src</p></blockquote><ol><li>main.js 入口文件 : 引入其他包/样式</li><li>App.vue 根组件: 展示其他组件<ol><li>一个.vue 文件就是一个组件</li><li>.vue 文件代码三部分:template/script/style</li></ol></li><li>assets/静态资源(图片/字体/.css 等)</li></ol><blockquote><p>index.html 不需要写代码</p></blockquote><blockquote><p>.gitignore: git 排除忽略文件</p></blockquote><h4 id="开发-react-脚手架-介绍-安装"><a href="#开发-react-脚手架-介绍-安装" class="headerlink" title="开发-react 脚手架-介绍-安装"></a>开发-react 脚手架-介绍-安装</h4><blockquote><p>30 步-&gt;基于 webpack-&gt;react-&gt;可以写 react 代码-&gt;</p></blockquote><blockquote><p>vue-&gt;脚手架快速生成-&gt;vuecli</p><p>react-&gt;脚手架快速生成-&gt;create-react-app</p></blockquote><ol><li><p>npm i -g create-react-app</p></li><li><p>进入期望的项目所在的位置-&gt;cd</p></li><li><p>create-react-app 文件夹名字 reactclidemo</p><blockquote><p>network 有关-&gt;安装失败-&gt;再安装-&gt;清 npm 产生错误缓存-&gt;</p><ol><li>npm cache clean –force</li><li>找到 cache 目录-&gt;手动删除</li></ol></blockquote></li><li><p>cd reactclidemo</p></li><li><p>npm start-&gt;猜测?启动项目+open</p></li></ol><h4 id="开发-react-脚手架-目录说明-简化模板"><a href="#开发-react-脚手架-目录说明-简化模板" class="headerlink" title="开发-react 脚手架-目录说明-简化模板"></a>开发-react 脚手架-目录说明-简化模板</h4><blockquote><p>npm start-&gt;1.跑项目 2.自动浏览器</p></blockquote><blockquote><p>目录:</p><ol><li>public<ol><li>index.html-&gt;div#root</li><li>manifest.json-&gt;H5 新特性-&gt;离线缓存</li></ol></li><li><strong>src/</strong><ol><li>index.js-&gt;入口-&gt;导入根组件</li><li>index.css-&gt;针对 index.js 的样式</li><li>App.js-&gt;根组件-&gt;显示其他.js 组件</li><li>App.css-&gt;根组件的样式</li><li>serviceWorker-&gt;针对 mainfest 的服务端配置</li></ol></li></ol><p>指令-&gt;readme.md</p><ol><li><p><strong>npm start</strong></p></li><li><p>npm run build</p></li><li><p>npm test-&gt;跑测试用例</p></li><li><p>npm run eject-&gt;暴露出 webpack 配置/服务器配置</p><blockquote><p>不可逆操作!</p></blockquote></li></ol></blockquote><h4 id="开发-react-脚手架-业务编写"><a href="#开发-react-脚手架-业务编写" class="headerlink" title="开发-react 脚手架-业务编写"></a>开发-react 脚手架-业务编写</h4><blockquote><p>tab 切换-&gt;在脚手架目录-&gt;新建.js 组件-&gt;编码</p></blockquote><h4 id="路由-实现原理"><a href="#路由-实现原理" class="headerlink" title="路由-实现原理"></a>路由-实现原理</h4><blockquote><p>一 开发 SPA 组成原理:1. 前后端分离 2.<strong>前端路由</strong></p><p>vue 开发 SPA-&gt;vue-router-&gt;router-link+router-view this.\$router.push()</p><p>react 开发 SPA-&gt;路由包-&gt;react-router-dom(4 版本)</p><p>二:前端路由-&gt;js-&gt;2 种实现方式</p><ol><li>hash(#)</li><li>H5-&gt;history(浏览器历史访问记录)</li></ol><p>三:效果:url 标识变化-&gt;页面局部内容发生改变-&gt;演示(hash/)</p><p>四:react 提供了独立的包-&gt;实现路由效果</p></blockquote><h4 id="路由-react-router-dom-体验"><a href="#路由-react-router-dom-体验" class="headerlink" title="路由-react-router-dom-体验"></a>路由-react-router-dom-体验</h4><blockquote><p>讲的 4 版本 react-router-dom</p></blockquote><ol><li><p>npm i react-router-dom</p></li><li><p>新建 router/01.js</p></li><li><p>导入 react 和 react-router-dom 解构:</p><blockquote><p>import { BrowserRouter as Router, Route, Link } from ‘react-router-dom’</p></blockquote></li><li><p>配置 Router+Link+Route+提供组件</p></li></ol><h4 id="路由-react-router-dom-步骤"><a href="#路由-react-router-dom-步骤" class="headerlink" title="路由 react-router-dom-步骤"></a>路由 react-router-dom-步骤</h4><ol><li>安装</li><li>导入-&gt;as Router + Link +Route</li><li>return -&gt;Router&gt;(Link<em>n+Route</em>n)</li><li>Router-&gt;所有路由标签的最外层容器</li><li>Router 里面 Link-&gt;导航链接-&gt;to=”/“</li><li>Router 里面 Route-&gt;匹配路由同时提供填充位置-&gt;会把匹配到的组件显示在这个位置</li></ol><blockquote><p>注意: Router 中只能有一个子元素</p></blockquote><h4 id="路由-react-router-dom-嵌套"><a href="#路由-react-router-dom-嵌套" class="headerlink" title="路由-react-router-dom-嵌套"></a>路由-react-router-dom-嵌套</h4><blockquote><p>在一级路由匹配到的组件内容中写 Link+Route</p></blockquote><h4 id="路由-重定向"><a href="#路由-重定向" class="headerlink" title="路由-重定向"></a>路由-重定向</h4><blockquote><ol><li>点击 A-&gt;显示的是 B</li><li>所有的 route 没有匹配到-&gt;显示已经存在的组件</li></ol><blockquote><p>用法</p></blockquote><ol><li>导入</li><li>在 Route 末尾增加<redirect to="/标识"></redirect></li><li>在所有填充位外层包裹 Switch</li></ol></blockquote><h4 id="路由-react-router-dom-嵌套-1"><a href="#路由-react-router-dom-嵌套-1" class="headerlink" title="路由-react-router-dom-嵌套"></a>路由-react-router-dom-嵌套</h4><blockquote><p>在一级路由匹配到的组件内容中写 Link+Route</p></blockquote><h4 id="路由-重定向-1"><a href="#路由-重定向-1" class="headerlink" title="路由-重定向"></a>路由-重定向</h4><blockquote><ol><li>点击 A-&gt;显示的是 B</li><li>所有的 route 没有匹配到-&gt;显示已经存在的组件</li></ol><blockquote><p>用法</p></blockquote><ol><li>导入</li><li>在 Route 末尾增加<redirect to="/标识"></redirect></li><li>在所有填充位外层包裹 Switch</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;路由-vue-router-嵌套路由&quot;&gt;&lt;a href=&quot;#路由-vue-router-嵌套路由&quot; class=&quot;headerlink&quot; title=&quot;路由-vue-router-嵌套路由&quot;&gt;&lt;/a&gt;路由-vue-router-嵌套路由&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;children 用法和 routes 一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; $route.params.id  路由配置对象$route -&amp;gt; 获取数据时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$router.push()  路由实例化对象 -&amp;gt;调方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;git-介绍安装&quot;&gt;&lt;a href=&quot;#git-介绍安装&quot; class=&quot;headerlink&quot; title=&quot;git-介绍安装&quot;&gt;&lt;/a&gt;git-介绍安装&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;开发中-&amp;gt;管理代码-&amp;gt;1 每次记录代码变化 2 协同开发 3 把代码托管到平台(网站) -&amp;gt; git/svn&lt;/p&gt;
&lt;p&gt;版本控制工具(管理代码-&amp;gt;合代码):git/svn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git 命令行工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git 是软件(git 官网-&amp;gt;找系统 32/64-&amp;gt;下一步安装)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装后的结果是: 文件夹-&amp;gt;右键-&amp;gt;gitbash/git-&amp;gt;git 指令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 检查git版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react基础</title>
    <link href="http://yoursite.com/2019/03/07/react%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/07/react基础/</id>
    <published>2019-03-07T12:39:27.000Z</published>
    <updated>2019-03-13T01:36:42.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-基础-笔记"><a href="#react-基础-笔记" class="headerlink" title="react-基础-笔记"></a>react-基础-笔记</h1><ul><li><a href="https://reactjs.org/" target="_blank" rel="noopener">英文</a>-<a href="https://doc.react-china.org/" target="_blank" rel="noopener">中文</a></li><li><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="noopener">sublime 语法提示</a></li><li><a href="https://github.com/babel/babel-sublime" target="_blank" rel="noopener">sublime 语法高亮</a></li></ul><h2 id="前端的职责范畴"><a href="#前端的职责范畴" class="headerlink" title="前端的职责范畴"></a>前端的职责范畴</h2><ul><li>做网站前端（PCWeb 和移动 Web）- jquery</li><li>做后台开发（Node.js-java-php-python…）</li><li>做 APP（混合开发-react native）</li><li>做桌面程序（Electron）</li><li>javascript 有可能在未来一统江湖<a id="more"></a></li></ul><h2 id="react-事件处理"><a href="#react-事件处理" class="headerlink" title="react 事件处理"></a>react 事件处理</h2><p>我们通常建议在构造函数中绑定或使用属性初始化器语法来避免这类性能问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性初始化绑定回调函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  <span class="comment">// Warning: this is *experimental* syntax.</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数中绑定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;Markdown Preview Enhanced</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="React-概述"><a href="#React-概述" class="headerlink" title="React 概述"></a>React 概述</h2><ul><li><p>网站开发模式演变过程</p><blockquote><p>静态网站-&gt;动态网站（后端渲染）-&gt;Ajax-&gt;前后端渲染结合-&gt;前端渲染（前后端分离）SPA</p></blockquote></li><li><p>静态资源（网页 HTML 本身、js、css、font、视频、音频…）</p></li><li>静态网站缺陷：<ul><li>可维护性比较低</li><li>无法进行交互</li></ul></li><li>动态网站<ul><li>可维护性明显增强</li><li>并且可以处理参数，所以方便与客户端进行交互</li></ul></li><li>ajax 的诞生解决了阻塞问题<ul><li>ajax 请求是异步的，页面不需要阻塞</li><li>ajax 一般请求的是数据（json）,浏览器通过 ajax 获取到数据之后，在浏览器中进行渲染（前端渲染）</li><li>一般这种渲染方式处理的都是页面的局部（局部刷新）</li></ul></li><li><p>所以有了 ajax 之后，一般都是前端渲染与后端渲染结合使用</p><ul><li>基于 ajax 进行前端渲染之后，导致前端的业务量明显增加，那么对代码的风格带来了挑战，EXTJS（MVC）、backbone 等这些 mvc 框架解决了代码风格的一些问题，但是并不能从根本上解决（还是需要程序员去操作 DOM）,所以为了从根本上解决前端代码的风格或者开发体验，后来就诞生了更加先进的前端框架：Angular、React、Vue（SPA）—声明式编程（基本上不再需要显示的操作 DOM），解决浏览器历史回退的问题（前端路由）</li></ul></li><li><p>React 特性</p><ul><li>声明式视图<ul><li>对于声明式组件，当数据变更的时候，React 低层负责高效更新。这种方式代码更加可预见并且更容易调试。</li></ul></li><li>组件化<ul><li>封装管理数据的组件，通过组合的方式实现复杂的 UI，组件的逻辑采用 js 实现而不是模板，这样可以保持数据在 DOM 之外。</li></ul></li><li>一次学习，随处编写<ul><li>React 可以进行服务端渲染，也可以用于移动 APP 开发（React Native）</li></ul></li></ul></li></ul><h2 id="vue-和-react-对比"><a href="#vue-和-react-对比" class="headerlink" title="vue 和 react 对比"></a>vue 和 react 对比</h2><p><code>vue和react对比</code> <a href="http://index.baidu.com/?from=pinzhuan#/" target="_blank" rel="noopener">百度指数</a> <a href="https://github.com/HankBass/front-end-frameworks-comparison" target="_blank" rel="noopener">链接 1</a> <a href="https://www.zcfy.cc/article/react-or-vue-which-javascript-ui-library-should-you-be-using-2159.html" target="_blank" rel="noopener">链接 2</a></p><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><ol><li>babel</li><li>插件<ul><li>Simple React Snippets</li><li>JS JSX Snippets</li><li>jsx-beautify</li><li>Live Server</li></ul></li></ol><h2 id="React-之-HelloWorld"><a href="#React-之-HelloWorld" class="headerlink" title="React 之 HelloWorld"></a>React 之 HelloWorld</h2><ul><li><a href="https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html" target="_blank" rel="noopener">引入相关的库</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>javascript<span class="string">" src="</span>./lib/react.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">" src="</span>./lib/react-dom.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">" src="</span>./lib/babel.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>root<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/babel<span class="string">" src="</span>src/HelloWorld.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HelloWorld</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;<span class="comment">/*必须有根元素*/</span>&#125;</span><br><span class="line">    &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;div&gt;测试数据&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>基本步骤<ul><li>引入 react 库文件 react 和 react-dom</li><li>引入 babel 运行时</li><li>基于 React 语法进行开发</li></ul></li><li>细节分析<ul><li>运行环境</li><li>案例语法</li></ul></li></ul><h2 id="JSX-基础语法"><a href="#JSX-基础语法" class="headerlink" title="JSX 基础语法"></a>JSX 基础语法</h2><ul><li>什么是 JSX 元素<ul><li>区分于元素 DOM 元素，React 元素本质上是普通对象，是组件的基本组成单元</li></ul></li><li>JSX 特性<ul><li>元素可以嵌套，但是必须有跟元素，也就是最外层必须有一个元素包裹</li><li>标签必须闭合，标签中没有内容也需要闭合，比如<img></li></ul></li><li>JSX 嵌入表达式<ul><li>JSX 本质上也是表达式</li></ul></li><li>JSX 属性<ul><li>JSX 可以添加自定义属性，并且属性名采用驼峰式</li><li>属性添加可以使用延展运算符</li></ul></li></ul><h2 id="JSX-的本质"><a href="#JSX-的本质" class="headerlink" title="JSX 的本质"></a>JSX 的本质</h2><ul><li>React.createElement(type, props, …children)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactElement createElement(</span><br><span class="line">  string/ReactClass type,</span><br><span class="line">  [object props],</span><br><span class="line">  [children ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数一为字符串或者为类</li><li>参数二为元素的属性列表</li><li>第三个参数表示子节点，可以把子节点单独传递，也可以组合为一个数组来传递<ul><li>var root = React.createElement(‘ul’, { className: ‘my-list’ }, child1, child2, child3);</li><li>var root = React.createElement(‘ul’, { className: ‘my-list’ }, [child1, child2, child3]);</li></ul></li><li>分析元素的渲染方式</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>组件化思想分析<ul><li>web components</li><li>单一职责</li></ul></li><li>创建组件语法<ul><li>函数方式</li><li>类方式</li></ul></li><li>组件的状态 state</li><li>父组件向子组件传值 props<ul><li>单向数据流</li><li>子组件不可以修改 props 数据</li></ul></li></ul><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><ul><li>componentWillMount 组件挂载之前调用，render()之前调用</li><li>componentDidMount DOM 渲染完成后调用，可以用于加载后台数据</li><li>componentDidUpdate 组件更新时触发该方法，初始渲染不调用</li><li>componentWillUnmount 组件被销毁之前一般用于清理工作（定时器 timer、网络请求、订阅事件）</li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li>函数名采用驼峰式</li><li>函数值采用{函数名称}</li><li>阻止默认行为不可以使用 return false</li><li>事件函数中的 this 绑定<ul><li>构造函数中使用 bind(this)</li><li>声明函数时使用箭头函数</li></ul></li><li>函数传参</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件向父组件传值</li></ul><h2 id="条件渲染与循环渲染"><a href="#条件渲染与循环渲染" class="headerlink" title="条件渲染与循环渲染"></a>条件渲染与循环渲染</h2><ul><li>条件渲染<ul><li>js 形式条件渲染</li><li>元素变量</li><li>行内条件渲染</li><li>阻止组件渲染</li></ul></li><li>循环渲染<ul><li>渲染多个元素</li><li>key 只在数组上下文中有含义</li><li>key 在兄弟节点之间必须唯一</li><li>JSX 中可以嵌入 map 结构</li></ul></li></ul><h2 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h2><blockquote><p>表单元素本身就与别的元素不同，因为天生就包含一些初始状态</p></blockquote><ul><li>受控组件与非受控组件<ul><li>受控组件的数据由 React 组件控制</li><li>非受控组件的数据由 DOM 控制</li></ul></li></ul><h2 id="直接操作-DOM"><a href="#直接操作-DOM" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h2><ul><li>什么情况需要直接操作 DOM<ul><li>管理焦点，文本选择或者媒体重放</li><li>触发命令式动画</li><li>集成第三方 DOM 库</li></ul></li><li>ref 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">this.textInput = React.createRef();</span><br><span class="line">// 标签中</span><br><span class="line">&lt;input type=&quot;text&quot; ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">// 使用</span><br><span class="line">this.textInput.current.focus();</span><br></pre></td></tr></table></figure><h2 id="JSX-进阶特性"><a href="#JSX-进阶特性" class="headerlink" title="JSX 进阶特性"></a>JSX 进阶特性</h2><ul><li>点标记的组件用法&lt;MyComponents.DatePicker color=”blue”/&gt;</li><li>动态组件名称</li><li>props 值操作</li><li>组件 children</li></ul><h2 id="React-实现原理分析"><a href="#React-实现原理分析" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程</li></ul><h2 id="表单操作-1"><a href="#表单操作-1" class="headerlink" title="表单操作"></a>表单操作</h2><blockquote><p>表单元素本身就与别的元素不同，因为天生就包含一些初始状态</p></blockquote><ul><li>受控组件与非受控组件<ul><li>受控组件的数据由 React 组件控制</li><li>非受控组件的数据由 DOM 控制</li></ul></li><li>checkbox 与 radio 组件</li></ul><h2 id="直接操作-DOM-1"><a href="#直接操作-DOM-1" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h2><ul><li>什么情况需要直接操作 DOM<ul><li>管理焦点，文本选择或者媒体重放</li><li>触发命令式动画</li><li>集成第三方 DOM 库</li></ul></li><li>ref 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">this.textInput = React.createRef();</span><br><span class="line">// 标签中</span><br><span class="line">&lt;input type=&quot;text&quot; ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">// 使用</span><br><span class="line">this.textInput.current.focus();</span><br></pre></td></tr></table></figure><ul><li>文件上传</li></ul><h2 id="React-实现原理分析-1"><a href="#React-实现原理分析-1" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程</li><li>mvc/mvvm–&gt;mv*</li></ul><h2 id="React-实现原理分析-2"><a href="#React-实现原理分析-2" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程(数据驱动的开发模式)</li></ul><h2 id="JSX-进阶特性-1"><a href="#JSX-进阶特性-1" class="headerlink" title="JSX 进阶特性"></a>JSX 进阶特性</h2><ul><li>点标记的组件用法&lt;MyComponents.DatePicker color=”blue”/&gt;</li><li>组件 children</li><li>props 值操作</li><li>动态组件名称</li></ul><h2 id="后台数据处理"><a href="#后台数据处理" class="headerlink" title="后台数据处理"></a>后台数据处理</h2><ul><li><a href="https://github.com/github/fetch#readme" target="_blank" rel="noopener">fetch-pollyfill</a></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, options).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle HTTP response</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle network error</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>注意：fetch api 返回的是一个 promise 对象</li><li>参数：options<ul><li>method(String): HTTP 请求方法，默认为 GET</li><li>body(String): HTTP 的请求参数</li><li>headers(Object): HTTP 的请求头，默认为{}</li><li>credentials(String): 默认为 omit,忽略的意思，也就是不带 cookie;还有两个参数，same-origin，意思就是同源请求带 cookie；include,表示无论跨域还是同源请求都会带 cookie</li></ul></li><li>第一个 then 函数里面处理的是 response 的格式</li><li>响应<ul><li>text(): 将返回体处理成字符串类型</li><li>json()： 返回结果和 JSON.parse(responseText)一样</li><li>blob()： 返回一个 Blob，Blob 对象是一个不可更改的类文件的二进制数据</li><li>arrayBuffer()</li><li>formData()</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/abc"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意这里得到的才是最终的数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>cookie 传递<ul><li>必须在 header 参数里面加上 credientials: ‘include’，才会如 xhr 一样将当前 cookies 带到请求中</li></ul></li><li>错误处理<ul><li>fetch 在服务器返回 4xx、5xx 时是不会抛出错误的，这里需要手动通过，通过 response 中的 ok 字段和 status 字段来判断</li></ul></li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>：基于 http 客户端的 Promise，用于浏览器和 Node.js。</p></blockquote><ul><li>axios 特性<ul><li>从浏览器发送 ajax 请求</li><li>从 Node.js 发送 http 请求</li><li>支持 Promise API</li><li>请求和相应拦截器</li><li>转换请求和响应数据</li><li>取消请求</li><li>JSON 数据自动转换</li><li>客户端支持防止 XSRF</li></ul></li></ul><h2 id="webpack-搭建-React-环境"><a href="#webpack-搭建-React-环境" class="headerlink" title="webpack 搭建 React 环境"></a>webpack 搭建 React 环境</h2><h2 id="官方脚手架"><a href="#官方脚手架" class="headerlink" title="官方脚手架"></a>官方脚手架</h2><ol><li>npm start<ul><li>在<a href="http://localhost:3000下监视文件，文件修改将自动更新，你可以在控制台中看到检测错误" target="_blank" rel="noopener">http://localhost:3000下监视文件，文件修改将自动更新，你可以在控制台中看到检测错误</a></li></ul></li><li>npm test<ul><li>在交互监视模式下启动测试运行程序。</li></ul></li><li>npm run build<ul><li>在生产环境中编译代码，并放在 build 目录中</li></ul></li><li>npm run eject<ul><li>抽取出项目配置文件，这是一个单向操作，一旦你使用 eject，那么就不能恢复了</li><li>使用说明：如果你对 create-react-app 这个构建工具和配置项不满意，你可以在任何时候 eject，从而导出可配置的模板</li></ul></li></ol><h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><ul><li><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a></li><li><a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">doc</a></li></ul><h2 id="前端路由概念分析"><a href="#前端路由概念分析" class="headerlink" title="前端路由概念分析"></a>前端路由概念分析</h2><ul><li>前端路由与后端路由的区别<ul><li>后端路由</li><li>前端路由</li></ul></li></ul><h2 id="React-router-之-HelloWorld"><a href="#React-router-之-HelloWorld" class="headerlink" title="React-router 之 HelloWorld"></a>React-router 之 HelloWorld</h2><blockquote><p>声明式路由</p></blockquote><ul><li>路由使用的基本步骤<ul><li>配置路由的容器 BrowserRouter</li><li>配置路由连接 Link</li><li>配置路由填充位置以及路径和组件的映射关系</li></ul></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ul><li>嵌套路由使用步骤<ul><li>在父路由的组件中配置子路由</li><li>子路由同样需要配置 Link 和 Route</li></ul></li></ul><h2 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h2><ul><li>路由传参指的是在路由的路径中通过【:参数名称】的方式进行传参，该参数在路由匹配的组件中通过【match.params.参数名称】的方式获取</li></ul><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><ul><li>路由的重定向通过 <redirect to="目标"></redirect></li></ul><h2 id="自定义路由链接"><a href="#自定义路由链接" class="headerlink" title="自定义路由链接"></a>自定义路由链接</h2><h2 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>基本用法</li><li>嵌套路由</li><li>路由重定向</li><li>路由参数</li><li>编程式路由</li><li>自定义路由连接</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;react-基础-笔记&quot;&gt;&lt;a href=&quot;#react-基础-笔记&quot; class=&quot;headerlink&quot; title=&quot;react-基础-笔记&quot;&gt;&lt;/a&gt;react-基础-笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;英文&lt;/a&gt;-&lt;a href=&quot;https://doc.react-china.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebookarchive/sublime-react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime 语法提示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/babel/babel-sublime&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime 语法高亮&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端的职责范畴&quot;&gt;&lt;a href=&quot;#前端的职责范畴&quot; class=&quot;headerlink&quot; title=&quot;前端的职责范畴&quot;&gt;&lt;/a&gt;前端的职责范畴&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;做网站前端（PCWeb 和移动 Web）- jquery&lt;/li&gt;
&lt;li&gt;做后台开发（Node.js-java-php-python…）&lt;/li&gt;
&lt;li&gt;做 APP（混合开发-react native）&lt;/li&gt;
&lt;li&gt;做桌面程序（Electron）&lt;/li&gt;
&lt;li&gt;javascript 有可能在未来一统江湖
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Promise用法</title>
    <link href="http://yoursite.com/2019/02/28/Promise%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/28/Promise用法/</id>
    <published>2019-02-28T02:01:47.000Z</published>
    <updated>2019-03-28T14:04:04.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="promise-用法"><a href="#promise-用法" class="headerlink" title="promise 用法"></a>promise 用法</h2><p>参考:</p><ol><li>E:\北京顺义黑马前端与移动开发基础 62 期\就业班 品优购前台\day02\03-加密视频 07 20 分钟详细说明了 promise</li><li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/05/async.html</a> 阮一峰微博<blockquote><p>Promise 的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数,在异步操作成功时调用，并将异步操作的结果作为参数传递出去<br>我们用 Promise 的时候一般是包在一个函数中，在需要的时候去运行这个函数，</p></blockquote></li></ol><ul><li>用法:在一个函数内部 return 一个 promise 对象,再调用这个函数的时候就得到了 promise 对象,就可以用 promise 的.then 方法,then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果</li></ul><h2 id="链式操作的用法"><a href="#链式操作的用法" class="headerlink" title="链式操作的用法"></a>链式操作的用法</h2><p>从表面上看，Promise 只是能够简化层层回调的写法，而实质上，Promise 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 callback 函数要简单、灵活的多。所以使用 Promise 的正确场景是这样的：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务1执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据1"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务2执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据2"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务3执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据3"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runAsync1()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync3();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">异步任务3执行完成</span><br><span class="line">随便什么数据3</span><br></pre></td></tr></table></figure><p>在 then 方法中，你也可以直接 return 数据而不是 Promise 对象，在后面的 then 中就可以接收到数据了，比如我们把上面的代码修改成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'直接返回数据'</span>;  <span class="comment">//这里直接返回数据</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">直接返回数据</span><br></pre></td></tr></table></figure><h2 id="catch-的用法"><a href="#catch-的用法" class="headerlink" title="catch 的用法"></a>catch 的用法</h2><p>Promise 对象除了 then 方法，还有一个 catch 方法,它和 then 的第二个参数一样，用来指定 reject 的回调，用法是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br></pre></td></tr></table></figure><p>效果和写在 then 的第二个参数里面一样。不过它还有另外一个作用：在执行 resolve 的回调（也就是上面 then 中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死 js，而是会进到这个 catch 方法中。并把错误的原因传入 reason 参数中,请看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(somedata); <span class="comment">//此处的somedata未定义</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>用 Promise.all 来执行，all 接收一个数组参数，里面的值最终都算返回 Promise 对象,会等待最慢的一个异步任务执行完成之后返回结果,等到它们都执行完后才会进到 then 里面, 返回结果按照传入的顺序存在一个数组之中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([runAsync1(), runAsync2(), runAsync3()]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/28/Promise用法/promise.png"><p>有了 all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash 以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</p><h2 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h2><p>await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> somethingThatReturnsAPromise(); <span class="comment">//等待返回一个promise对象</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> somethingThatReturnsAPromise().catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-函数简单用法"><a href="#async-函数简单用法" class="headerlink" title="async 函数简单用法"></a>async 函数简单用法</h2><p>async 的用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为 async 就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行。 写一个 async 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(timeout());</span><br><span class="line"><span class="comment">// 控制台打印</span></span><br><span class="line"><span class="comment">//Promise &#123;&lt;resolved&gt;: "hello world"&#125;</span></span><br></pre></td></tr></table></figure><p>原来 async 函数返回的是一个 promise 对象，如果要获取到 promise 返回值，我们应该用 then 方法， 继续修改代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br><span class="line">timeout().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"虽然在后面，但是我先执行"</span>);</span><br><span class="line"><span class="comment">//控制台打印</span></span><br><span class="line"><span class="comment">//虽然在后面，但是我先执行</span></span><br><span class="line"><span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p>现在写一个函数，让它返回 promise 对象，该函数的作用是 2s 之后让数值乘以 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2s 之后返回双倍的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doubleAfter2seconds</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span> * num);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个 async 函数，从而可以使用 await 关键字， await 后面放置的就是返回 promise 对象的一个表达式，所以它后面可以写上 doubleAfter2seconds 函数的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> doubleAfter2seconds(<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">testResult();</span><br><span class="line"><span class="comment">//控制台打印</span></span><br><span class="line"><span class="comment">//2s后打印 60</span></span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><a href="https://www.jianshu.com/p/fe0159f8beb4" target="_blank" rel="noopener">https://www.jianshu.com/p/fe0159f8beb4</a></p><blockquote><p>注意:promise 的 then()和 catch(err=&gt;err)的回调结果都会走 return 之后的下一个 promise 的点 then 方法里面,如果需要把第一个 promise 里面的错误抛出给下一个 promise 的 catch 接收,第一个 promise 的 catch 要写这样 .catch(err =&gt; Promise.reject(err)) ,Promise.reject()是快速的获取一个拒绝状态的 Promise 对象<br>使用静态 Promise.reject()方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">"Testing static reject"</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未被调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// "Testing static reject"</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//方法二等价方法一(主动创建的reject会走promise的catch也就是第二个回调数)</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">"Testing static reject"</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未被调用</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// "Testing static reject"</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>结论:</p><ol><li>虽然 await 会阻塞 async 异步函数，但是并没有阻塞主线程。</li><li>虽然 await 阻塞异步函数向后执行，看起来像是同步的，但是它本质还是异步的，我们同样可以并行执行。而同步函数不能并行执行。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;promise-用法&quot;&gt;&lt;a href=&quot;#promise-用法&quot; class=&quot;headerlink&quot; title=&quot;promise 用法&quot;&gt;&lt;/a&gt;promise 用法&lt;/h2&gt;&lt;p&gt;参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;E:\北京顺义黑马前端与移动开发基础 62 期\就业班 品优购前台\day02\03-加密视频 07 20 分钟详细说明了 promise&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/05/async.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2015/05/async.html&lt;/a&gt; 阮一峰微博&lt;blockquote&gt;
&lt;p&gt;Promise 的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数,在异步操作成功时调用，并将异步操作的结果作为参数传递出去&lt;br&gt;我们用 Promise 的时候一般是包在一个函数中，在需要的时候去运行这个函数，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;用法:在一个函数内部 return 一个 promise 对象,再调用这个函数的时候就得到了 promise 对象,就可以用 promise 的.then 方法,then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;链式操作的用法&quot;&gt;&lt;a href=&quot;#链式操作的用法&quot; class=&quot;headerlink&quot; title=&quot;链式操作的用法&quot;&gt;&lt;/a&gt;链式操作的用法&lt;/h2&gt;&lt;p&gt;从表面上看，Promise 只是能够简化层层回调的写法，而实质上，Promise 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 callback 函数要简单、灵活的多。所以使用 Promise 的正确场景是这样的：&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>什么时候用module.export?什么时候用exports？</title>
    <link href="http://yoursite.com/2019/02/26/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8module-export-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8exports%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/02/26/什么时候用module-export-什么时候用exports？/</id>
    <published>2019-02-26T15:49:51.000Z</published>
    <updated>2019-02-27T08:08:12.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-引用-module"><a href="#创建-引用-module" class="headerlink" title="创建/引用 module"></a>创建/引用 module</h2><p>假设这是 rocker.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在另一个文件中引用 rocker.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rocker = <span class="built_in">require</span>(<span class="string">"./rocker.js"</span>);</span><br><span class="line">rocker.name(); <span class="comment">// my name is cp</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>先来看一个例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 1 &#125;</span></span><br><span class="line"></span><br><span class="line">b.name = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">name</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 3 &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><ol><li>一开始,a 是一个对象，b 是对 a 的引用,即 a 和 b 指向同一块内存，所以前两个输出一样。</li><li>然后对 b 做修改,即 a 和 b 指向同一块内存地址的内容发生了改变,所以 a 和 b 的输出是一样的。</li><li>接着 b 被重新赋值时，这时候 b 指向了一块新的内存,a 还是指向原来的内存，所以最后两个输出不一样。</li></ol><h2 id="module-exports-和-exports-到底是什么？"><a href="#module-exports-和-exports-到底是什么？" class="headerlink" title="module.exports 和 exports 到底是什么？"></a>module.exports 和 exports 到底是什么？</h2><blockquote><p>每一个 node.js 执行文件，都自动创建一个 module 对象和 exports 对象，同时，module 对象会创建一个叫 exports 的属性，初始化的值是 {}。实际上， exports 和 module.exports 指向同一块内存，可以理解为 exports 只是 module.exports 的引用，即：exports = module.exports = {};<br>其实，Module.exports 才是真正的接口，exports 只不过是它的一个辅助工具。最终返回给调用的是 Module.exports 而不是 exports。所以不要直接给 exports 赋值,可以在赋值后使用 module.exports = exports 重新将 exports 和 module.exports 关联起来。也可以直接给 module.exports 赋值。<br>所有的 exports 收集到的属性和方法，都赋值给了 Module.exports。当然，这有个前提，就是 Module.exports 本身不具备任何属性和方法。如果，Module.exports 已经具备一些属性和方法，那么 exports 收集来的信息将被忽略。原因是 require 引入的对象本质上是 module.exports。这就产生了一个问题，当 module.exports 和 exports 指向的不是同一块内存时，exports 的内容就会失效。</p></blockquote><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫叔叔'</span>&#125;；</span><br><span class="line">exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫老阿姨'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时 module.exports 指向了一块新的内存（该内存的内容为{name: ‘萤火虫叔叔’}），exports 指向了另一块新的内存（该内存的内容为{name: ‘萤火虫老阿姨’}）。require 得到的是{name: ‘萤火虫叔叔’}。</p></blockquote><h2 id="什么时候用-exports？什么时候用-module-exports？"><a href="#什么时候用-exports？什么时候用-module-exports？" class="headerlink" title="什么时候用 exports？什么时候用 module.exports？"></a>什么时候用 exports？什么时候用 module.exports？</h2><ul><li>如果你想你的模块是一个特定的类型就用 Module.exports。</li><li>如果你想的模块是一个典型的“实例化对象”就用 exports。<br>给 module.exports 添加属性类似于给 exports 添加属性，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样，exports 是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 exports 导出，除非你打算从原来的“实例化对象”改变成一个类型。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>exports 是指向的 module.exports 的引用</p></li><li><p>module.exports 初始值为一个空对象 {}，所以 exports 初始值也是 {}</p></li><li><p>require()返回的是 module.exports 而不是 exports</p></li><li><p>module.exports导出的是函数,require引入的也是函数,导出对象,require引入也是对象</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建-引用-module&quot;&gt;&lt;a href=&quot;#创建-引用-module&quot; class=&quot;headerlink&quot; title=&quot;创建/引用 module&quot;&gt;&lt;/a&gt;创建/引用 module&lt;/h2&gt;&lt;p&gt;假设这是 rocker.js 文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exports.name = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;my name is cp&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在另一个文件中引用 rocker.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rocker = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./rocker.js&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rocker.name(); &lt;span class=&quot;comment&quot;&gt;// my name is cp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vuex的基本入门</title>
    <link href="http://yoursite.com/2019/02/26/Vuex%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/26/Vuex的基本入门/</id>
    <published>2019-02-25T16:17:05.000Z</published>
    <updated>2019-03-25T09:53:36.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuex-流程"><a href="#vuex-流程" class="headerlink" title="vuex 流程"></a>vuex 流程</h2><blockquote><p>vuex就像一个无形的仓库，公共的状态我们会抽离出来放进里面</p></blockquote><ol><li>state-&gt;声明数据(组件可以用,响应式)</li><li>actions-&gt;和后台交互(ajax 请求)-&gt;返回新结果</li><li>mutations-&gt;修改 state,接收 actions 传递的结果</li><li>dispatch：含有异步操作，例如向后台提交数据，写法： this.$store.dispatch(‘action方法名’,值)</li><li>commit：同步操作，写法：this.$store.commit(‘mutations方法名’,值)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">state:声明数据(响应式数据)-&gt;组件的computed</span><br><span class="line"></span><br><span class="line">getters:声明复杂数据将state中的某个状态进行过滤然后获取新的状态-&gt;组件的computed</span><br><span class="line"></span><br><span class="line">mutations:修改state的方法(同步方法)-&gt;组件的methods   </span><br><span class="line"></span><br><span class="line">actions:异步操作获取新数据(和后台交互-&gt;ajax) -&gt;通过commit的方法把新数据交给mutations-&gt;组件的methods</span><br><span class="line"></span><br><span class="line">modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://segmentfault.com/a/1190000015782272" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015782272</a></p></blockquote><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actions:方法-&gt;异步</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  fnac1(context) &#123;</span><br><span class="line">    <span class="comment">// context就是仓库</span></span><br><span class="line">    <span class="comment">// 异步代码</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> numNew = <span class="number">200</span></span><br><span class="line">      <span class="comment">// 在异步有结果的位置,把结果提交给mutations的方法</span></span><br><span class="line">      context.commit(<span class="string">'setNum'</span>, numNew)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>app.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">    fn2()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">"fnac1"</span>)</span><br><span class="line">        ...mapActions([<span class="string">"fnac2"</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vuex-流程&quot;&gt;&lt;a href=&quot;#vuex-流程&quot; class=&quot;headerlink&quot; title=&quot;vuex 流程&quot;&gt;&lt;/a&gt;vuex 流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;vuex就像一个无形的仓库，公共的状态我们会抽离出来放进里面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;state-&amp;gt;声明数据(组件可以用,响应式)&lt;/li&gt;
&lt;li&gt;actions-&amp;gt;和后台交互(ajax 请求)-&amp;gt;返回新结果&lt;/li&gt;
&lt;li&gt;mutations-&amp;gt;修改 state,接收 actions 传递的结果&lt;/li&gt;
&lt;li&gt;dispatch：含有异步操作，例如向后台提交数据，写法： this.$store.dispatch(‘action方法名’,值)&lt;/li&gt;
&lt;li&gt;commit：同步操作，写法：this.$store.commit(‘mutations方法名’,值)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;state:声明数据(响应式数据)-&amp;gt;组件的computed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getters:声明复杂数据将state中的某个状态进行过滤然后获取新的状态-&amp;gt;组件的computed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mutations:修改state的方法(同步方法)-&amp;gt;组件的methods   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;actions:异步操作获取新数据(和后台交互-&amp;gt;ajax) -&amp;gt;通过commit的方法把新数据交给mutations-&amp;gt;组件的methods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015782272&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000015782272&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>品优购前台项目</title>
    <link href="http://yoursite.com/2019/02/25/%E5%93%81%E4%BC%98%E8%B4%AD%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/02/25/品优购前台项目/</id>
    <published>2019-02-25T13:12:21.000Z</published>
    <updated>2019-03-09T15:24:59.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-mvc-思想构建项目"><a href="#使用-mvc-思想构建项目" class="headerlink" title="使用 mvc 思想构建项目"></a>使用 mvc 思想构建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">models 数据模型   获取接口服务器数据</span><br><span class="line">views  视图层     渲染页面 使用模版引擎</span><br><span class="line">controllers 控制器   组织请求对应的去进行业务处理</span><br><span class="line">public 静态资源</span><br><span class="line">utils 工具类</span><br></pre></td></tr></table></figure><h2 id="开发用插件"><a href="#开发用插件" class="headerlink" title="开发用插件"></a>开发用插件</h2><ol><li>express-favicon 统一处理小图标路径插件</li><li>youch 包 ,具体的错误信息输出到页面, 美化错误信息 ,准确的定位错误的位置</li><li>http-errors 创建 HTTP 错误插件,会让 http 请求产生的 err 更具体</li><li>cross-env 能跨平台地设置及使用环境变量(开发模式/生产模式)<a id="more"></a></li></ol><h2 id="启动环境配置"><a href="#启动环境配置" class="headerlink" title="启动环境配置"></a>启动环境配置</h2><blockquote><p>在 package.json 中的 scripts 对象 自定义指令</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "cross-env NODE_ENV=development nodemon app.js","start": "start":"cross-env NODE_ENV=production node app.js"</span><br></pre></td></tr></table></figure><blockquote><p>获取变量环境</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = req.app.get(<span class="string">"env"</span>);</span><br></pre></td></tr></table></figure><h2 id="模板引擎-express-art-template"><a href="#模板引擎-express-art-template" class="headerlink" title="模板引擎 express-art-template"></a>模板引擎 express-art-template</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> artTemplate = <span class="built_in">require</span>(<span class="string">"express-art-template"</span>);</span><br><span class="line">app.engine(<span class="string">"art"</span>, artTemplate);</span><br><span class="line"><span class="comment">// app.engine('art', require('express-art-template'));</span></span><br><span class="line"><span class="comment">//app.engine告诉express,art后缀模板交给expressTPL去处理  app.set是去view文件夹下面找要渲染的art文件</span></span><br><span class="line"><span class="comment">//因为默认页面被缓存了 而且被压缩了  模版引擎默认的是生产环境的配置 所以下面debug进行判断</span></span><br><span class="line"><span class="comment">//debug 使用的布尔值  false 生产环境(压缩缓存页面)  true开发环境实时更新页面 不进行压缩方便开发者调试</span></span><br><span class="line">app.set(<span class="string">"view options"</span>, &#123;</span><br><span class="line">  debug: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="\$.get()"></a>\$.get()</h2><p>这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax</p><h2 id="报错和-undefined"><a href="#报错和-undefined" class="headerlink" title="报错和 undefined"></a>报错和 undefined</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a.a); <span class="comment">//Cannot read property 'a' of undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//报错 a is not undefined</span></span><br></pre></td></tr></table></figure><p>如果访问一个对象的属性时候,属性如果没有声明赋值,那么就是 undefined,如果访问一个变量,没有声明,就会报错,访问 undefined 的属性也会报错,undefined 上找不到任何属性</p><h2 id="input-type-number-购物车增加减少"><a href="#input-type-number-购物车增加减少" class="headerlink" title="input type=number 购物车增加减少"></a>input type=number 购物车增加减少</h2><p><input type="number" autofocus name="num" min="1" value="1"><br>最小值是 1  自动获取焦点 出现增加减少按钮</p><h2 id="express-art-template-渲染变量-res-locals"><a href="#express-art-template-渲染变量-res-locals" class="headerlink" title="express-art-template 渲染变量 res.locals"></a>express-art-template 渲染变量 res.locals</h2><blockquote><p>在调用 res.render 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：res.render 传入的对象&gt; res.locals 对象 &gt; app.locals 对象，所以 app.locals 和 res.locals 几乎没有区别，都用来渲染模板，使用上的区别在于：app.locals 上通常挂载常量信息（如博客名、描述、作者信息），res.locals 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，res.locals.user = req.session.user）。<br>修改 index.js，在 routes(app); 上一行添加如下代码：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模板全局常量</span></span><br><span class="line">app.locals.blog = &#123;</span><br><span class="line">  title: pkg.name,</span><br><span class="line">  description: pkg.description</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加模板必需的三个变量</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.locals.user = req.session.user;</span><br><span class="line">  res.locals.success = req.flash(<span class="string">"success"</span>).toString();</span><br><span class="line">  res.locals.error = req.flash(<span class="string">"error"</span>).toString();</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.locals 属性值将在应用程序的整个生命周期中保持不变，而 res.locals 属性仅在请求的生命周期内有效。</p><p>这样在调用 res.render 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量</p><h2 id="jquery-parent-和-parents-的区别"><a href="#jquery-parent-和-parents-的区别" class="headerlink" title="jquery parent 和 parents 的区别"></a>jquery parent 和 parents 的区别</h2><p>从字面上不难看出 parent 是指取得一个包含着所有匹配元素的唯一父元素的元素集合。parents 则是取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选可以看出 parent 的取值很明确，就是当前元素的父元素；parents 则是当前元素的祖先元素。下面列出例子说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div4"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br>　　$(‘p’).parent()取到的是div2,div3,div4　　<br>　　$(‘p’).parent(‘.a’)取到的是 div3<br>　　$(‘p’).parent().parent()取到的是div1，这点比较奇特；不过Jquery对象本身的特点决定了这是可行的。<br>　　$(‘p’).parents()取到的是 div1,div2,div3,div4<br>　　\$(‘p’).parents(‘.a’)取到的是 div3</p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>正向代理（forward proxy） ，一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并制定目标（原始服务器），然后代理向原始服务器转发请求并将获得的内容返回给客户端，客户端才能使用正向代理。我们平时说的代理就是指正向代理。<br>简单一点：A 向 C 借钱，由于一些情况不能直接向 C 借钱，于是 A 想了一个办法，他让 B 去向 C 借钱，这样 B 就代替 A 向 C 借钱，A 就得到了 C 的钱，C 并不知道 A 的存在，B 就充当了 A 的代理人的角色。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正向代理的用途：</span><br><span class="line">　　（1）访问原来无法访问的资源，如 google</span><br><span class="line">    （2） 可以做缓存，加速访问资源</span><br><span class="line">　　（3）对客户端访问授权，上网进行认证</span><br><span class="line">　　（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<br>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反向代理用途</span><br><span class="line">（1）保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击,大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。</span><br><span class="line">（2）负载均衡，通过反向代理服务器来优化网站的负载</span><br></pre></td></tr></table></figure><blockquote><p>正向代理和反向代理的区别</p></blockquote><ul><li>位置不同</li></ul><ol><li>正向代理，架设在客户机和目标主机之间；</li><li>反向代理，架设在服务器端；</li></ol><ul><li>代理对象不同</li></ul><ol><li>正向代理，代理客户端，服务端不知道实际发起请求的客户端；</li><li>反向代理，代理服务端，客户端不知道实际提供服务的服务端；<blockquote><p>备注：正向代理–HTTP 代理为多个人提供翻墙服务；反向代理–百度外卖为多个商户提供平台给某个用户提供外卖服务。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用-mvc-思想构建项目&quot;&gt;&lt;a href=&quot;#使用-mvc-思想构建项目&quot; class=&quot;headerlink&quot; title=&quot;使用 mvc 思想构建项目&quot;&gt;&lt;/a&gt;使用 mvc 思想构建项目&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;models 数据模型   获取接口服务器数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;views  视图层     渲染页面 使用模版引擎&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;controllers 控制器   组织请求对应的去进行业务处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public 静态资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utils 工具类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;开发用插件&quot;&gt;&lt;a href=&quot;#开发用插件&quot; class=&quot;headerlink&quot; title=&quot;开发用插件&quot;&gt;&lt;/a&gt;开发用插件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;express-favicon 统一处理小图标路径插件&lt;/li&gt;
&lt;li&gt;youch 包 ,具体的错误信息输出到页面, 美化错误信息 ,准确的定位错误的位置&lt;/li&gt;
&lt;li&gt;http-errors 创建 HTTP 错误插件,会让 http 请求产生的 err 更具体&lt;/li&gt;
&lt;li&gt;cross-env 能跨平台地设置及使用环境变量(开发模式/生产模式)
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue双绑原理组件之间传值</title>
    <link href="http://yoursite.com/2019/02/23/vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2019/02/23/vue组件之间传值/</id>
    <published>2019-02-23T14:36:36.000Z</published>
    <updated>2019-04-01T02:49:02.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><blockquote><p>v-on 指令用于监听 DOM 事件 形式如：v-on:click 缩写为 @click<br>v-model 在表单控件或者组件上创建双向绑定<br>v-bind 缩写 :）动态地绑定一个或多个特性、或一个组件 prop 到表达式<br>触发事件 this.$emit(“事件名”,要传的数据shican)   绑定事件this.$on(“事件名”,要传的数据 xincan)<br>注意，在 Vue 实例中 data 属性其实不一定使用 data() { return {} }的（方法），可以直接用 data: { }（对象）。因为在组件中，如果 data 声明为一个方法，就可以使组件中的数据独立，避免相互影响。<br>子组件的命名无法识别驼峰命名法，当组件作为标签时，需要使用-和小写字母。</p></blockquote><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><ol><li>声明属性 props:[“属性 a”]</li><li>赋值 使用组件时 <data-st :msg="父组件data的数据"></data-st></li><li>使用 子组件 template </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data-st</span> <span class="attr">:msg</span>=<span class="string">"str"</span> <span class="attr">class</span>=<span class="string">"xx"</span>&gt;</span><span class="tag">&lt;/<span class="name">data-st</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><img src="/keaichong.github.io/2019/02/23/vue组件之间传值/ps.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"DataChild"</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">100</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h3 &gt;你好啊---&#123;&#123;msg&#125;&#125;   &lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">  props: [<span class="string">"msg"</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    str: <span class="string">"我是父组件data的数据"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 选项props</span></span><br><span class="line"><span class="comment">// 1. props是组件的选项</span></span><br><span class="line"><span class="comment">// 2. props的值可以是字符串数组</span></span><br><span class="line"><span class="comment">// 3. props数组里面的元素称之为prop(属性) 属性=?值</span></span><br><span class="line"><span class="comment">// 4. prop的值来源于外部的(组件的外部)</span></span><br><span class="line"><span class="comment">// 5. prop(我们这里是msg)是组件的属性-&gt;自定义标签的属性</span></span><br><span class="line"><span class="comment">// 6. prop的赋值位置(在使用组件时,通过标签属性去赋值)</span></span><br><span class="line"><span class="comment">// 7. prop的用法和data中的数据用法一样-&gt;&#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="comment">// 补充 : 组件的数据的值来源于自己(内容),此时这个数据的声明写在data中</span></span><br><span class="line"><span class="comment">// 推论-&gt; data的数据的值只能来源于自己-&gt;</span></span><br><span class="line"><span class="comment">// 2个组件-&gt; newVue的视图当成整个网页的根组件</span></span><br><span class="line"><span class="comment">// 此时 根组件就是newVue的视图div#app  子组件就是DataChild</span></span><br></pre></td></tr></table></figure><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><ol><li>子组件创建自定义事件，事件的处理函数是父组件的函数，子组件再通过 this.\$emit 触发自定义事件</li><li>重点: 主要是通过\$emit 方法来实现传参的方式，第一个参数是自定义事件名称，第二个则是要传的数据</li><li>触发事件 this.\$emit(“事件名”,要传的数据)</li><li>在使用组件时绑定自定义事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data-child</span> <span class="attr">class</span>=<span class="string">"xx"</span> @<span class="attr">transfer</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">data-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/23/vue组件之间传值/sp.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"DataChild"</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      str: <span class="string">"我从子组件data传过来"</span>,</span><br><span class="line">      str1: <span class="string">"我是子组件data里面的数据"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;右边插值表达式展示子组件data数据---&gt;&#123;&#123;str1&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click="son" &gt;点我传值给父组件&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    son() &#123;</span><br><span class="line">      <span class="comment">//触发事件</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"transfer"</span>, <span class="keyword">this</span>.str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    parent(str) &#123;</span><br><span class="line">      alert(str + <span class="string">"---"</span> + <span class="keyword">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h2><blockquote><p>b 组件传值给 c 组件<br>方法: eventBus.js(中央事件总线):给其他文件提供了共享/公用的对象(newVue())</p></blockquote><ol><li>B 中 触发事件 vm.\$emit(“event”,值 num)</li><li>C 中 绑定事件 vm.\$on(“event”,(argv)=&gt;{argv 就是值 num})</li></ol><blockquote><p>注意:先绑定事件,再触发事件 代码写在 created 是为了让事件自动绑定触发</p></blockquote><img src="/keaichong.github.io/2019/02/23/vue组件之间传值/BC.png"><p>argv 就是 B 组件传过来的值 100</p><blockquote><p>下面是 eventBus.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js代码+实例化vm-&gt;具有独立功能的js代码-&gt;js模块</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vm;</span><br></pre></td></tr></table></figure><h2 id="Vue-中如何在组件内部实现一个双向数据绑定？"><a href="#Vue-中如何在组件内部实现一个双向数据绑定？" class="headerlink" title="Vue 中如何在组件内部实现一个双向数据绑定？"></a>Vue 中如何在组件内部实现一个双向数据绑定？</h2><blockquote><p>具体思路：父组件通过 props 传值给子组件，子组件通过 \$emit 来通知父组件修改相应的 props 值，具体实现如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-one</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"value=arguments[0]"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-one</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getdata();</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [<span class="string">"value"</span>],</span><br><span class="line">  template: <span class="string">`&lt;div &gt;   </span></span><br><span class="line"><span class="string"> &lt;input type ="text" @input="handleInput" :value="value"&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleInput(e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"input"</span>, e.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">    getdata() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CompOne: component</span><br><span class="line">  &#125;,</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="number">123</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="双向绑定原理"><a href="#双向绑定原理" class="headerlink" title="双向绑定原理"></a>双向绑定原理</h2><ul><li>vue 关于数组和对象的更新</li></ul><ol><li>由于 JavaScript 的限制，Vue 不能检测以下变动的数组： 一是当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue 二是当你修改数组的长度时，例如：vm.items.length = newLength</li><li>还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">"x"</span>; <span class="comment">// 不是响应性的</span></span><br><span class="line">vm.items.length = <span class="number">2</span>; <span class="comment">// 不是响应性的</span></span><br><span class="line"><span class="comment">// 为了解决第一类问题，以下两种方式都可以实现和 vm.items[indexOfItem] = newValue 相同的效果，同时也将触发状态更新：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue);</span><br><span class="line"><span class="comment">// 你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名：</span></span><br><span class="line">vm.$<span class="keyword">set</span>(vm.items, indexOfItem, newValue);</span><br><span class="line">// Array.prototype.splice</span><br><span class="line">vm.items.splice(indexOfItem, 1, newValue);</span><br><span class="line"></span><br><span class="line">// 为了解决第二类问题，你可以使用 splice：</span><br><span class="line">vm.items.splice(newLength);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象删除或添加属性 渲染方法一</span></span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.userProfile, "age", "18");</span><br><span class="line">//删除或添加属性 渲染方法二</span><br><span class="line">//Object.assign(目标,...源对象) 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</span><br><span class="line">Object.assign(this.userProfile, &#123;</span><br><span class="line">  book: <span class="string">"三国演义"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>vue 绑定数组里面对象变化无法更新 view<br>Vue 是通過監測  get, set 來得知數據是否更新，而數組的索引是沒有 get、set 的，所以 Vue 才沒辦法監聽，這是 javascript 語言特性的限制</p><p>vue 是通过 ES5 中的 Object.defineProperty()来实现数据劫持的。在 data 中的每一个属性都有一个 get 和 set 方法,get 获取数据 set 设置数据<br><a href="https://www.cnblogs.com/canfoo/p/6891868.html" target="_blank" rel="noopener">https://www.cnblogs.com/canfoo/p/6891868.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Book, <span class="string">"name"</span>, &#123;</span><br><span class="line">  <span class="keyword">set</span>: function(value) &#123;</span><br><span class="line">    name = value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你取了一个书名叫做"</span> + value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"《"</span> + name + <span class="string">"》"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Book.name = <span class="string">"vue权威指南"</span>; <span class="comment">//你取了一个书名叫做vue权威指南</span></span><br><span class="line"><span class="built_in">console</span>.log(Book.name); <span class="comment">// 《vue权威指南》</span></span><br></pre></td></tr></table></figure><p>我们通过 Object.defineProperty( )设置了对象 Book 的 name 属性，对其 get 和 set 进行重写操作，顾名思义，get 就是在读取 name 属性这个值触发的函数，set 就是在设置 name 属性这个值触发的函数，所以当执行 Book.name = ‘vue 权威指南’ 这个语句时，控制台会打印出 “你取了一个书名叫做 vue 权威指南”，紧接着，当读取这个属性时，就会输出 “《vue 权威指南》”</p><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p><a href="https://imweb.io/topic/56d40adc0848801a4ba198ce" target="_blank" rel="noopener">https://imweb.io/topic/56d40adc0848801a4ba198ce</a></p><blockquote><p>语法 Object.defineProperty(object, propertyname, descriptor)</p></blockquote><blockquote><p>参数</p></blockquote><ol><li>object 必需。 要在其上添加或修改属性的对象。 这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。</li><li>propertyname 必需。 一个包含属性名称的字符串。</li><li>descriptor 必需。 属性描述符。 它可以针对数据属性或访问器属性<br>value 属性的值，默认为 undefined。</li></ol><ul><li>configurable、属性可否删除 enumerable、可枚举 writable 属性可修改 和 value 设置属性值</li><li>enumerable <a href="https://segmentfault.com/a/1190000002953364" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002953364</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defineProperty动态态描述（getter和setter方法）</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o1.a = <span class="string">"o1a"</span>;</span><br><span class="line">o1.b = <span class="string">"b"</span>;</span><br><span class="line"><span class="comment">// 给对象的当前属性添加getter和setter</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o1, <span class="string">"b"</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// writable: true,  // 添加getter和setter时不能设置writable和value</span></span><br><span class="line">  <span class="comment">// value: 'chang1 oa.b',</span></span><br><span class="line">  <span class="comment">//get:function()&#123;&#125;对象方法可以简写</span></span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"触发了getter"</span>);</span><br><span class="line">    <span class="keyword">return</span> o1.b; <span class="comment">//这里的返回值是o1.b 又会调用get()触发</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"触发了setter"</span>);</span><br><span class="line">    o1.b = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.b); <span class="comment">// 啊哦，出现很多次重复调用getter，我的浏览器卡死了-_-!</span></span><br></pre></td></tr></table></figure><p>改进方法：效避免被触发多次，将 getter 和 setter 需要修改的值赋值给外部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o1.a = <span class="string">"o1a"</span>;</span><br><span class="line">o1.b = <span class="string">"b"</span>;</span><br><span class="line"><span class="keyword">var</span> bVal = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o1, <span class="string">"b"</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"触发了getter"</span>);</span><br><span class="line">    <span class="keyword">return</span> bVal;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"触发了setter"</span>);</span><br><span class="line">    bVal = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">o1.b = <span class="number">322</span>; <span class="comment">// 触发了setter</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.b); <span class="comment">// 触发了getter 322</span></span><br></pre></td></tr></table></figure><h2 id="组件的-data-为什么是一个带-return-返回值的函数"><a href="#组件的-data-为什么是一个带-return-返回值的函数" class="headerlink" title="组件的 data 为什么是一个带 return 返回值的函数"></a>组件的 data 为什么是一个带 return 返回值的函数</h2><p>原型上的 data 方法是一个函数,两个实例都会指向原型的方法,引用类型, 如果 return 出这个对象, 组件 1 会有自己的 data,组件二也会有自己的 data<br><img src="/keaichong.github.io/2019/02/23/vue组件之间传值/datareturn.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复习&quot;&gt;&lt;a href=&quot;#复习&quot; class=&quot;headerlink&quot; title=&quot;复习&quot;&gt;&lt;/a&gt;复习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;v-on 指令用于监听 DOM 事件 形式如：v-on:click 缩写为 @click&lt;br&gt;v-model 在表单控件或者组件上创建双向绑定&lt;br&gt;v-bind 缩写 :）动态地绑定一个或多个特性、或一个组件 prop 到表达式&lt;br&gt;触发事件 this.$emit(“事件名”,要传的数据shican)   绑定事件this.$on(“事件名”,要传的数据 xincan)&lt;br&gt;注意，在 Vue 实例中 data 属性其实不一定使用 data() { return {} }的（方法），可以直接用 data: { }（对象）。因为在组件中，如果 data 声明为一个方法，就可以使组件中的数据独立，避免相互影响。&lt;br&gt;子组件的命名无法识别驼峰命名法，当组件作为标签时，需要使用-和小写字母。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;父传子&quot;&gt;&lt;a href=&quot;#父传子&quot; class=&quot;headerlink&quot; title=&quot;父传子&quot;&gt;&lt;/a&gt;父传子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;声明属性 props:[“属性 a”]&lt;/li&gt;
&lt;li&gt;赋值 使用组件时 &lt;data-st :msg=&quot;父组件data的数据&quot;&gt;&lt;/data-st&gt;&lt;/li&gt;
&lt;li&gt;使用 子组件 template &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 子组件页面 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;你好吗&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;data-st&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:msg&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;str&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;xx&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;data-st&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>路由元信息</title>
    <link href="http://yoursite.com/2019/02/22/%E8%B7%AF%E7%94%B1%E5%85%83%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2019/02/22/路由元信息/</id>
    <published>2019-02-22T05:10:39.000Z</published>
    <updated>2019-02-23T04:01:09.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h2><h3 id="为什么会有路由元信息这个东西？"><a href="#为什么会有路由元信息这个东西？" class="headerlink" title="为什么会有路由元信息这个东西？"></a>为什么会有路由元信息这个东西？</h3><p>我们在做网站登录验证的时候，可以使用到 beforeEach 钩子函数进行验证操作，如下面代码 ，如果页面 path 为’/goodsList’，那么就让它跳转到登录页面，实现了验证登录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">"/goodsList"</span>) &#123;</span><br><span class="line">    next(<span class="string">"/login"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果需要登录验证的网页多了怎么办？</p><p>1.这里是对比 path。如果需要验证的网页很多，那么在 if 条件里得写下所有的路由地址，将会是非常麻烦的一件事情。</p><p>2.因为路由是可以嵌套的。有’/goodsList’，那么可能会有’/goodsList/online’，再或者还有’/goodsList/offline’、’/goodsList/audit’、’/goodsList/online/edit’等等。</p><p>如果像刚才例子中这样对比（to.path === ‘/goodsList’），就非常单一，其他的路径压根不会限制（验证）到，照样能正常登陆！因为每个 to.path 根本不一样。</p><p>我们所理想的就是把’/goodsList’限制了，其他所有的以’/goodsList’开头的那些页面都给限制到！</p><p>to Route: 即将要进入的目标 路由对象<br>我们打印一下 to</p><p>它有很多属性，有</p><ul><li>fullPath</li><li>hash</li><li>matched</li><li>meta</li><li>name</li><li>params</li><li>path</li><li>query</li></ul><p>其中有个属性，matched，就是匹配了的路由，我们打印出来，这个是个数组。它的第一项就是{path: “/goodslist”}，一直到最为具体的当前 path （例如：{path: “/goodslist/online/edit”}）</p><p>这里可以循环 matched 这个数组，看每一项的 path 有没有等于’/goodsList’,只要其中一个有，那么就让它跳转到登录状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    to.matched.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.path == <span class="string">"/goodslist"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    next(<span class="string">"/login"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么这里只是对 goodsList 进行验证判断，且限制的还是 path，如果页面中还有会员列表、资讯列表、广告列表都需要进行验证的时候，用 path 来做限制似乎有点不好用。轮到主角登场了</p><h2 id="路由元信息-meta-字段（元数据）"><a href="#路由元信息-meta-字段（元数据）" class="headerlink" title="路由元信息 meta 字段（元数据）"></a>路由元信息 meta 字段（元数据）</h2><p>定义路由的时候可以配置 meta 字段：</p><blockquote><p>因为一个路由匹配到的所有路由记录会暴露为 $route 对象 (还有在导航守卫中的路由对象) 的 $route.matched 数组。因此，我们需要遍历 \$route.matched 来检查路由记录中的 meta 字段。</p></blockquote><p>直接在路由配置的时候，给每个路由添加一个自定义的 meta 对象，在 meta 对象中可以设置一些状态，来进行一些操作。用它来做登录校验再合适不过了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> path: <span class="string">'/actile'</span>,</span><br><span class="line"> name: <span class="string">'Actile'</span>,</span><br><span class="line"> component: Actile,</span><br><span class="line"> meta: &#123;</span><br><span class="line">   login_require: <span class="literal">false</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"> path: <span class="string">'/goodslist'</span>,</span><br><span class="line"> name: <span class="string">'goodslist'</span>,</span><br><span class="line"> component: Goodslist,</span><br><span class="line"> meta: &#123;</span><br><span class="line">   login_require: <span class="literal">true</span></span><br><span class="line"> &#125;,</span><br><span class="line"> children:[</span><br><span class="line">   &#123;</span><br><span class="line">     path: <span class="string">'online'</span>,</span><br><span class="line">     component: GoodslistOnline</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们只需要判断 item 下面的 meta 对象中的 login_require 是不是 true，就可以做一些限制了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    to.matched.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.meta.login_require;</span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    next(<span class="string">"/login"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>官方文档:<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;路由导航守卫&quot;&gt;&lt;a href=&quot;#路由导航守卫&quot; class=&quot;headerlink&quot; title=&quot;路由导航守卫&quot;&gt;&lt;/a&gt;路由导航守卫&lt;/h2&gt;&lt;h3 id=&quot;为什么会有路由元信息这个东西？&quot;&gt;&lt;a href=&quot;#为什么会有路由元信息这个东西？&quot; class=&quot;headerlink&quot; title=&quot;为什么会有路由元信息这个东西？&quot;&gt;&lt;/a&gt;为什么会有路由元信息这个东西？&lt;/h3&gt;&lt;p&gt;我们在做网站登录验证的时候，可以使用到 beforeEach 钩子函数进行验证操作，如下面代码 ，如果页面 path 为’/goodsList’，那么就让它跳转到登录页面，实现了验证登录。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;router.beforeEach(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;to, &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (to.path === &lt;span class=&quot;string&quot;&gt;&quot;/goodsList&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next(&lt;span class=&quot;string&quot;&gt;&quot;/login&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>some,every,fiflter,map区别</title>
    <link href="http://yoursite.com/2019/02/22/some-every-fiflter-map%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/02/22/some-every-fiflter-map区别/</id>
    <published>2019-02-22T04:57:38.000Z</published>
    <updated>2019-02-22T05:07:46.489Z</updated>
    
    <content type="html"><![CDATA[<ol><li>some():返回一个Boolean，判断是否有元素符合func条件<br>const arr = [1,2,3,4]; arr.some((item)=&gt;{return item&gt;1})</li></ol><p>打印结果： true</p><ol start="2"><li><p>every():返回一个Boolean，判断每个元素是否符合func条件<br>const arr1 = [1,2,3,4]; arr.every((item)=&gt;{return item&gt;3});<br>打印结果：<br>false</p><a id="more"></a></li><li><p>filter():返回一个符合func条件的元素数组</p></li></ol><p>let ages = [33,44,55,66,77]; ages.filter((item)=&gt;{return item&gt;18})<br>打印结果[33, 44, 55, 66, 77]</p><ol start="4"><li>map（）：返回一个新的array，数组元素由每一次调用函数产生结果组成<br>const arr =[1,2,3,4,5,6]; arr.map((item)=&gt;{return item*10})<br>打印结果 [10, 20, 30, 40, 50, 60]</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;some():返回一个Boolean，判断是否有元素符合func条件&lt;br&gt;const arr = [1,2,3,4]; arr.some((item)=&amp;gt;{return item&amp;gt;1})&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打印结果： true&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;every():返回一个Boolean，判断每个元素是否符合func条件&lt;br&gt;const arr1 = [1,2,3,4]; arr.every((item)=&amp;gt;{return item&amp;gt;3});&lt;br&gt;打印结果：&lt;br&gt;false&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue项目中遇到的坑</title>
    <link href="http://yoursite.com/2019/02/16/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/02/16/项目中遇到的坑/</id>
    <published>2019-02-16T00:52:45.000Z</published>
    <updated>2019-03-30T10:32:49.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取首屏数据和操作-dom-元素"><a href="#获取首屏数据和操作-dom-元素" class="headerlink" title="获取首屏数据和操作 dom 元素"></a>获取首屏数据和操作 dom 元素</h2><ol><li>created(){} vm 创建完毕 -&gt;获取首屏的数据 this.getData()</li><li>mounted(){} 挂载完毕-&gt; 操作 dom 元素</li></ol><h2 id="全局过滤器在-element-ui-table-中绑定数据"><a href="#全局过滤器在-element-ui-table-中绑定数据" class="headerlink" title="全局过滤器在 element-ui table 中绑定数据"></a>全局过滤器在 element-ui table 中绑定数据</h2><!-- E:\北京顺义黑马前端与移动开发基础62期\就业班 Vue\08\03-视频 9分 --><ol><li>v-bind:</li><li>{msg | fmtdate}</li><li>前提:单元格的内容不是 prop 的值 create_time 的值-日期 - 给单元格内容外层加 template - 给 template 设置 slot-scope 一般 slot-scope 值设置为 scope - slot-scope 的值 会自动绑定外层数据结构,这里是 el-table 的 data 的值 tableData - 在内容位置写 scope.row 自动取出数组 tableData 中每个对象,其中 row 是固定写法</li><li>参考:<a href="http://element-cn.eleme.io/#/zh-CN/component/table#zi-ding-yi-lie-mo-ban" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/table#zi-ding-yi-lie-mo-ban</a><br>自定义列模板<a id="more"></a></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 Scoped slot 可以获取到 row, column, $index 和 store（table </span></span><br><span class="line"><span class="comment">内部的状态管理）的数据 </span></span><br><span class="line"><span class="comment">&#123;scope.row&#125; =&gt;获取整行的数据 </span></span><br><span class="line"><span class="comment">&#123;scope.$index&#125; =&gt;'行的下标 (备注:实际应该两个大括号 但是hexo解析会报错)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"日期"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-time"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px"</span>&gt;</span>&#123; scope.row.date &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;,]</span><br><span class="line">      &#125;&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局过滤器用法"><a href="#全局过滤器用法" class="headerlink" title="全局过滤器用法"></a>全局过滤器用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>处理前<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>处理后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 让过滤器toUpper去处理msg数据并且把处理结果返回 --&gt;</span></span><br><span class="line">  &#123;&#123;msg | toUpper&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  需求: data中msg的值"abc" 希望"abc"渲染的结果Abc</span></span><br><span class="line"><span class="comment">// 全局</span></span><br><span class="line"><span class="comment">// 1. 定义过滤器Vue.filter(名字,函数(v)&#123;&#125;)</span></span><br><span class="line"><span class="comment">// 2. 写功能</span></span><br><span class="line"><span class="comment">// 3. 使用&#123;&#123;msg |过滤器&#125;&#125;</span></span><br><span class="line">Vue.filter(<span class="string">"toUpper"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// v -&gt; 指的是将来过滤器的调用者 这里是msg</span></span><br><span class="line">  <span class="comment">// 作用</span></span><br><span class="line">  <span class="comment">// "xyz".charAt(0)</span></span><br><span class="line">  <span class="comment">// "xyz".substr(1)</span></span><br><span class="line">  <span class="comment">// Abc</span></span><br><span class="line">  <span class="keyword">return</span> v.charAt(<span class="number">0</span>).toUpperCase() + v.substr(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">"abc"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">处理前</span><br><span class="line">abc</span><br><span class="line">处理后</span><br><span class="line">Abc</span><br></pre></td></tr></table></figure><h2 id="element-输入框焦点问题"><a href="#element-输入框焦点问题" class="headerlink" title="element 输入框焦点问题"></a>element 输入框焦点问题</h2><ol><li>element-ui 自带指令获取焦点 autofocus</li><li>通过自定义全局指令 v-focus 进行绑定</li></ol><blockquote><p>问题:这样使我们在组件中可以自用的调用 v-focus 方法，给他绑定定义布尔变量来控制元素是否获得焦点 但是这里要注意的是组件<el-input>本身在页面中渲染成了一个 div 元素所以我们要在<el-input>被绑定为 v-focus 的同时在自定义指令中获取组件下通过 querySelector()方法获取 input 元素</el-input></el-input></p></blockquote><ol><li>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数 $(selector).focus();但是 JQuery 中也有提供很好地方法将一个 JQuery 对象转化为一个 DOM 对象：$(”#Input”)[0].focus();</li><li>html5 中可以直接使用 autofocus 属性</li><li>纯 js 的环境下，很简单，就用.focus()就可以了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  el.querySelector(<span class="string">"input"</span>).focus();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vue-中-refs-的用法及作用详解"><a href="#vue-中-refs-的用法及作用详解" class="headerlink" title="vue 中\$refs 的用法及作用详解"></a>vue 中\$refs 的用法及作用详解</h2><p>一般来讲，获取 DOM 元素，需 document.querySelector（”.input1”）获取这个 dom 节点，然后在获取 input1 的值。</p><p>但是用 ref 绑定之后，我们就不需要在获取 dom 节点了，直接在上面的 input 上绑定 input1，然后\$refs 里面调用就行。</p><p>然后在 javascript 里面这样调用：this.\$refs.input1 这样就可以减少获取 dom 节点的消耗了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"input1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.input1.value =<span class="string">"test"</span>; <span class="comment">//this.$refs.input1 减少获取dom节点的消耗</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref-操作-dom"><a href="#ref-操作-dom" class="headerlink" title="ref 操作 dom"></a>ref 操作 dom</h2><ol><li>给要操作的元素设置 ref 属性 值随便写</li><li>在 js 中选项 mounted(){通过(this.\$refs.ref 值来获取要操作的 dom 元素}</li></ol><h2 id="vue-下拉框默认选项"><a href="#vue-下拉框默认选项" class="headerlink" title="vue 下拉框默认选项"></a>vue 下拉框默认选项</h2><p>默认选中&lt;请选择&gt;<br>当 select 中的 v-model 绑定的值和 option 中 value 值相等 就会默认选中该项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123; selected &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"..."</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vue-v-for-遍历"><a href="#vue-v-for-遍历" class="headerlink" title="vue v-for 遍历"></a>vue v-for 遍历</h2><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123; item.message &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#example-1"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [&#123; <span class="attr">message</span>: <span class="string">"Foo"</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">"Bar"</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo Bar</span><br></pre></td></tr></table></figure><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><blockquote><p>第一个参数是值 value</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123; value &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#v-for-object"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: <span class="string">"John"</span>,</span><br><span class="line">      lastName: <span class="string">"Doe"</span>,</span><br><span class="line">      age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">John Doe 30</span><br></pre></td></tr></table></figure><blockquote><p>你也可以提供第二个的参数为键名：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"(value, key) in object"</span>&gt;</span><br><span class="line">  &#123;key&#125;: &#123;value&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firstName: John,</span><br><span class="line">lastName: Doe,</span><br><span class="line">age: 30</span><br></pre></td></tr></table></figure><blockquote><p>第三个参数为索引：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">  &#123; index &#125;. &#123; key &#125;: &#123; value &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.firstName: John,</span><br><span class="line">1.lastName: Doe,</span><br><span class="line">2.age: 30</span><br></pre></td></tr></table></figure><h2 id="vue-v-bind-使用场景"><a href="#vue-v-bind-使用场景" class="headerlink" title="vue v-bind 使用场景"></a>vue v-bind 使用场景</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href="url"&gt;...&lt;/a&gt;</span><br><span class="line">在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定。</span><br></pre></td></tr></table></figure><p>加上了冒号是为了动态绑定数据，等号后面可以写变量或者表达式。<br>如果不使用冒号，等号后面就可以写字符串字面量等原始类型数据。这时就无法进行动态绑定数据了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:disable</span>=<span class="string">"true"</span> <span class="attr">:value</span>=<span class="string">"-1"</span> &gt;</span>打开<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：true 或 false    disable 值是变量/Boolean 类型<br>提取 value 的值 数值类型-1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disable</span>=<span class="string">"true"</span> <span class="attr">value</span>=<span class="string">"-1"</span>  &gt;</span>打开<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：true    disable 值是 String 类型 value 的值是 String 类型-1</p><h2 id="axios-请求拦截器"><a href="#axios-请求拦截器" class="headerlink" title="axios 请求拦截器"></a>axios 请求拦截器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">// 所有请求发起之后,进行筛选,请求标识是不是login</span></span><br><span class="line">    <span class="comment">// 如果标识是login,不要头部-&gt;请求继续发起</span></span><br><span class="line">    <span class="comment">// 当请求标识不是login,先设置头部,再发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (config.url !== <span class="string">"login"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">      <span class="comment">// axios.defaults.headers.common["Authorization"] = AUTH_TOKEN;</span></span><br><span class="line">      config.headers[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line">      <span class="comment">// var per = &#123;&#125;;</span></span><br><span class="line">      <span class="comment">// per["Authorization"] = "token";</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.$http.get(url) -&gt; 请求拦截处理 -&gt;发请求</span></span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>config 的 url 虽然我们看到是一个全路径 但是我们在之前设置了 baseurl axios.defaults.baseURL = “<a href="http://localhost:8888/api/private/v1/&quot;" target="_blank" rel="noopener">http://localhost:8888/api/private/v1/&quot;</a> 所以我们在代码中设置 url 时候会自动取出 baseurl 拼接 相对路径</p></blockquote><img src="/keaichong.github.io/2019/02/16/项目中遇到的坑/axios请求拦截器.png"><blockquote><p>config 中有 header 就是请求发起的请求头 所以可以给 header 增加一个 key 名并赋值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给对象添加属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//或者 var obj=new Object();</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"name"</span>;</span><br><span class="line"><span class="keyword">var</span> value = <span class="string">"张三丰"</span>;</span><br><span class="line">obj[key] = value;</span><br><span class="line"></span><br><span class="line">config.headers[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line"><span class="comment">//或者  config.headers.Authorization = AUTH_TOKEN; js对象[]中的值加引号代表属性 不加是变量</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>methods中的方法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>computed中的方法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="string">"abc"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 特点:</span></span><br><span class="line">  <span class="comment">// 如果计算属性fn2没有依赖data数据,此时,会把第一次使用的结果进行缓存,</span></span><br><span class="line">  <span class="comment">// 再次使用计算属性fn2, 会从缓存中取结果 -&gt; 好处,提高性能,减少内存消耗</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    fn2() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"fn2----"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 调用一次 执行一次</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn1() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"fn1----"</span>); <span class="comment">// 耗时操作</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> methods中的方法</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.917Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.918Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.919Z"</span><br><span class="line"></span><br><span class="line">computed中的方法</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.920Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.920Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.920Z"</span><br></pre></td></tr></table></figure><h2 id="watch-基本使用"><a href="#watch-基本使用" class="headerlink" title="watch 基本使用"></a>watch 基本使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">"abc"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// watch选项</span></span><br><span class="line">  <span class="comment">// 作用: 监测data数据变化</span></span><br><span class="line">  <span class="comment">// 特点: 被监测data数据变化时 自动触发函数</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 被监测的数据:function(新值,old值)&#123;&#125;</span></span><br><span class="line">    <span class="comment">// msg:function(newVal,oldVal)&#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    msg(newV, oldV) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(newV, oldV);</span><br><span class="line">      <span class="comment">// 异步操作  比如ajax 定时器等</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中的数组遍历-forEach-与-map-方法分析"><a href="#JavaScript-中的数组遍历-forEach-与-map-方法分析" class="headerlink" title="JavaScript 中的数组遍历 forEach()与 map()方法分析"></a>JavaScript 中的数组遍历 forEach()与 map()方法分析</h2><ol><li>forEach:用来遍历数组中的每一项；这个方法执行是没有返回值的，对原来数组也没有影响；</li><li>数组中有几项，那么传递进去的匿名回调函数就需要执行几次；</li><li>每一次执行匿名函数的时候，还给其传递了三个参数值：数组中的当前项 item,当前项的索引 index,原始数组 input；</li><li>理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是我们可以自己通过数组的索引来修改原来的数组；forEach 方法中的 this 是 ary,匿名回调函数中的 this 默认是 window；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">42</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> res = ary.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, input</span>) </span>&#123;</span><br><span class="line">  input[index] = item * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//--&gt;undefined;</span></span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">//--&gt;会对原来的数组产生改变；</span></span><br></pre></td></tr></table></figure><ol><li>map:和 forEach 非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；</li><li>区别：map 的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</li><li>不管是 forEach 还是 map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的 this 进行修改。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">42</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> res = ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//--&gt;[120,230,240,420,10];</span></span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">//--&gt;[12,23,24,42,1]；</span></span><br></pre></td></tr></table></figure><h2 id="…展开运算符"><a href="#…展开运算符" class="headerlink" title="…展开运算符"></a>…展开运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>]</span><br><span class="line">    <span class="keyword">const</span> colorful = [...color, <span class="string">'green'</span>, <span class="string">'pink'</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(colorful) <span class="comment">//[red, yellow, green, pink]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    <span class="keyword">const</span> alp = &#123; <span class="attr">fist</span>: <span class="string">'a'</span>, <span class="attr">second</span>: <span class="string">'b'</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> alphabets = &#123; ...alp, <span class="attr">third</span>: <span class="string">'c'</span> &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(alphabets) <span class="comment">//&#123; "fist": "a", "second": "b", "third": "c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件-组件和模块的区别"><a href="#组件-组件和模块的区别" class="headerlink" title="组件-组件和模块的区别"></a>组件-组件和模块的区别</h2><ol><li>模块:具有独立功能的.js 文件 -&gt; 封装</li><li>组件:封装 html+css+js</li></ol><blockquote><p>在组件中可以使用不同的模块</p><p>同一个模块(js 功能)可以在不同组件中使用</p><p>目前代码中,newVue 管理的 div#app 根组件</p></blockquote><h2 id="单页应用-SPA-特点"><a href="#单页应用-SPA-特点" class="headerlink" title="单页应用 SPA-特点"></a>单页应用 SPA-特点</h2><blockquote><p>优点</p></blockquote><ol><li>用户体验好</li><li>完全组件化开发</li></ol><blockquote><p>缺点</p></blockquote><ol><li>首屏加载慢-&gt;按需加载</li><li>不利于 SEO-&gt;服务端渲染(node-&gt;自己写路由-&gt;express-art-template+res.render())</li><li>开发难度高(框架)</li></ol><blockquote><p>vue 适合开发 SPA-&gt;什么是 SPA+SPA 特点</p><p>SPA 不利于 SEO-&gt;搜索引擎排名靠前-&gt;搜素引擎机制-&gt;搜索引擎不能去找到局部刷新的网站内容</p></blockquote><h2 id="element-tree-grid（表格树）的使用"><a href="#element-tree-grid（表格树）的使用" class="headerlink" title="element-tree-grid（表格树）的使用"></a>element-tree-grid（表格树）的使用</h2><blockquote><p>表格树，element-tree-grid 需要单独下载并再配合 elementUi 里 el-table 使用。<br><a href="https://www.cnblogs.com/han77/p/10411206.html" target="_blank" rel="noopener">https://www.cnblogs.com/han77/p/10411206.html</a></p></blockquote><h2 id="新名词-鲁棒"><a href="#新名词-鲁棒" class="headerlink" title="新名词 鲁棒"></a>新名词 鲁棒</h2><p>鲁棒是 Robust 的音译 鲁棒性===健壮性</p><h2 id="vue-路由守卫-beforeEach-beforeRouteLeave"><a href="#vue-路由守卫-beforeEach-beforeRouteLeave" class="headerlink" title="vue 路由守卫 beforeEach,beforeRouteLeave"></a>vue 路由守卫 beforeEach,beforeRouteLeave</h2><blockquote><p>先回顾一下钩子函数 beforeEach</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;&#125;)</span><br><span class="line">router,beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;auth = <span class="literal">true</span> &#125; =meta <span class="comment">// meta代表的是to中的meta对象</span></span><br><span class="line"><span class="keyword">var</span> isLogin = <span class="built_in">Boolean</span>(state.state.user.id) <span class="comment">// true 用户已登录，false 用户未登录</span></span><br><span class="line"><span class="keyword">if</span>(auth &amp;&amp; !islogin &amp;&amp; path !==<span class="string">'/login'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> next(&#123;<span class="attr">path</span>:<span class="string">'/login'</span>&#125;) <span class="comment">// 跳转到login页面</span></span><br><span class="line">&#125;</span><br><span class="line">next（） <span class="comment">// 进行下一个钩子函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这个 beforeEach 的钩子函数，它是一个全局的 before 钩子函数， （before each）意思是在 每次每一个路由改变的时候都得执行一遍。组件内的钩子函数 ( beforeRouteEnter 和 beforeRouteLeave 再加一个 watch)</p></blockquote><blockquote><p>在 vue2.x 中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）最先执行的是 beforeEach钩子，所有路由开始的时候最先执行</span><br><span class="line">2）然后就是router的配置中的beforeEnter.</span><br><span class="line">3) 接下来就是 路由beforeARouteEnter -- 然后是组件自身的生命周期 -- 路由beforeRouteLeave</span><br><span class="line">beforeRouteEnter (to, from, next) &#123;&#125; 与 beforeRouteLeave不再是组件中route配置下的对象了，他们和data处于同级别的地位。</span><br></pre></td></tr></table></figure><p>可以看出： 新设计的路由 淡化了组件自身跟着路由生命周期变化而变化，而是依赖组件自身的生命周期，只有两个简单的 路由级别的钩子 beforeRouteEnter beforeRouteLeave<br>那么接下来：<br>　　 ajax 调用时机：相对于组件来说的，而且应该是在路由进入之前开始准备的 所以 beforeRouteEnter 是调用 ajax 的时机。 实际项目中一般我是在 created 钩子函数中，上面说的没试过。<br>watch 这一函数可以监听路由$route变化。beforeRouteLeave在组件的生命周期完成后，且旧路由即将切换走，新路由beforeEach的时机执行。<br>watch的使用时机：<br>当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<br>不过，这也意味着 组件的生命周期钩子不会再被调用。<br>复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：</p><h2 id="webpack-打包优化"><a href="#webpack-打包优化" class="headerlink" title="webpack 打包优化"></a>webpack 打包优化</h2><h4 id="cdn-配置"><a href="#cdn-配置" class="headerlink" title="cdn 配置"></a>cdn 配置</h4><blockquote><p>vendor.js 过大.造成过大的原因是因为在 main.js 导入第三库太多时,webpack 合并 js 时生成了 vendor.js(我们习惯把第三方库放在 vendor 里面)造成的.如下图在 main.js 引用 element-ui 等第三方库。后果就是你的服务器端的 js 文件越大则用户加载页面的时间会越长(因为所需下载 js 的时间越久)<br>webpack.base.conf.js 中 module.exports 添加</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> externals: &#123;</span><br><span class="line">    <span class="comment">// jquery: 'jQuery'</span></span><br><span class="line">    <span class="comment">// key-&gt;js的包名-&gt;package.json</span></span><br><span class="line">    <span class="comment">// value-&gt;该包暴露给全局作用域内的变量名</span></span><br><span class="line">    <span class="comment">//之所以变量名加引号是因为有些变量名有短横线 所以统一加引号</span></span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"Vue"</span>,</span><br><span class="line">    <span class="string">"vue-router"</span>: <span class="string">"VueRouter"</span>,</span><br><span class="line">    <span class="string">"element-ui"</span>: <span class="string">"ELEMENT"</span>,</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"axios"</span>,</span><br><span class="line">    <span class="string">"moment"</span>: <span class="string">"moment"</span>,</span><br><span class="line">    <span class="string">"echarts"</span>: <span class="string">"echarts"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><blockquote><p>页面中显示某个组件-&gt;只加载了对应的.js-&gt;SPA 首屏加载变快</p></blockquote><h4 id="取消-map-文件"><a href="#取消-map-文件" class="headerlink" title="取消.map 文件"></a>取消.map 文件</h4><ol><li>.map 文件作用:用来调试-&gt;用户不需要-&gt;在打包时通过 webpack 配置</li><li>在 webpack.prod.conf.js-&gt;注释掉</li></ol><h4 id="css-在自己组件生效"><a href="#css-在自己组件生效" class="headerlink" title="css 在自己组件生效"></a>css 在自己组件生效</h4><blockquote><p>vue 文件的 style 开始标签位置设置 scoped</p></blockquote><h2 id="遇到的小问题"><a href="#遇到的小问题" class="headerlink" title="遇到的小问题"></a>遇到的小问题</h2><h4 id="在导入模块时候-模块路径和模块名字正确-报错-找不到模块-原因-模块名字结尾不小心增加了一个空格"><a href="#在导入模块时候-模块路径和模块名字正确-报错-找不到模块-原因-模块名字结尾不小心增加了一个空格" class="headerlink" title="在导入模块时候 模块路径和模块名字正确 报错:找不到模块 原因:模块名字结尾不小心增加了一个空格"></a>在导入模块时候 模块路径和模块名字正确 报错:找不到模块 原因:模块名字结尾不小心增加了一个空格</h4><h4 id="编程式导航注意问题"><a href="#编程式导航注意问题" class="headerlink" title="编程式导航注意问题"></a>编程式导航注意问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.\$router.push(&#123;</span><br><span class="line">   <span class="comment">//如果提供了 path 则 name 会被忽略</span></span><br><span class="line">   <span class="comment">// name: "aaa",</span></span><br><span class="line">   path: <span class="string">"/top"</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="vuex-模块开空间"><a href="#vuex-模块开空间" class="headerlink" title="vuex 模块开空间"></a>vuex 模块开空间</h4><p>import { mapActions, mapState } from “vuex”;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块开空间namespaced: true,开空间之后你要告诉组件你要用那个模块里面的title 这样即使多个模块有一样的title属性也不会冲突</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">"a"</span>, [<span class="string">"title"</span>, <span class="string">"subjects"</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="响应路由参数的变化-原来的组件实例会被复用"><a href="#响应路由参数的变化-原来的组件实例会被复用" class="headerlink" title="响应路由参数的变化,原来的组件实例会被复用"></a>响应路由参数的变化,原来的组件实例会被复用</h4><img src="/keaichong.github.io/2019/02/16/项目中遇到的坑/router.png"><h4 id="vuex-辅助函数—对象展开运算符"><a href="#vuex-辅助函数—对象展开运算符" class="headerlink" title="vuex 辅助函数—对象展开运算符"></a>vuex 辅助函数—对象展开运算符</h4><blockquote><p>mapState 是一个函数并且返回的是一个对象，那么就类似于</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: c &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我直接写：必然会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就可以用到三个点…对象展开运算符（现处于 ECMASCript 提案 stage-3 阶段）；<br>将 fn()的返回值进行展开运算，但是…fn(),必须在一个外部对象里面执行<br>如果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">  ...fn()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p>就是把一个对象的 key 和 value 展开混入到另一个对象里面，由此想到对象的 深拷贝<br>如何将一个对象进行深拷贝的问题，又多出了一个答案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  user: <span class="string">"admin"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如何深拷贝a到b里面?</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  ...a,</span><br><span class="line">  info: <span class="string">"拷贝a的内容到b的对象里面"</span>,</span><br><span class="line">  name: <span class="string">"快到碗里来"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ES6-中构造方法写法"><a href="#ES6-中构造方法写法" class="headerlink" title="ES6 中构造方法写法"></a>ES6 中构造方法写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//箭头函数简写</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//ES6 方法简写 (冒号和箭头删掉)</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代替-ajax-的-fetch-API"><a href="#代替-ajax-的-fetch-API" class="headerlink" title="代替 ajax 的 fetch API"></a>代替 ajax 的 fetch API</h2><p><a href="https://zhuanlan.zhihu.com/p/22433312" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22433312</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取首屏数据和操作-dom-元素&quot;&gt;&lt;a href=&quot;#获取首屏数据和操作-dom-元素&quot; class=&quot;headerlink&quot; title=&quot;获取首屏数据和操作 dom 元素&quot;&gt;&lt;/a&gt;获取首屏数据和操作 dom 元素&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;created(){} vm 创建完毕 -&amp;gt;获取首屏的数据 this.getData()&lt;/li&gt;
&lt;li&gt;mounted(){} 挂载完毕-&amp;gt; 操作 dom 元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;全局过滤器在-element-ui-table-中绑定数据&quot;&gt;&lt;a href=&quot;#全局过滤器在-element-ui-table-中绑定数据&quot; class=&quot;headerlink&quot; title=&quot;全局过滤器在 element-ui table 中绑定数据&quot;&gt;&lt;/a&gt;全局过滤器在 element-ui table 中绑定数据&lt;/h2&gt;&lt;!-- E:\北京顺义黑马前端与移动开发基础62期\就业班 Vue\08\03-视频 9分 --&gt;
&lt;ol&gt;
&lt;li&gt;v-bind:&lt;/li&gt;
&lt;li&gt;{msg | fmtdate}&lt;/li&gt;
&lt;li&gt;前提:单元格的内容不是 prop 的值 create_time 的值-日期 - 给单元格内容外层加 template - 给 template 设置 slot-scope 一般 slot-scope 值设置为 scope - slot-scope 的值 会自动绑定外层数据结构,这里是 el-table 的 data 的值 tableData - 在内容位置写 scope.row 自动取出数组 tableData 中每个对象,其中 row 是固定写法&lt;/li&gt;
&lt;li&gt;参考:&lt;a href=&quot;http://element-cn.eleme.io/#/zh-CN/component/table#zi-ding-yi-lie-mo-ban&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://element-cn.eleme.io/#/zh-CN/component/table#zi-ding-yi-lie-mo-ban&lt;/a&gt;&lt;br&gt;自定义列模板
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Git进阶使用</title>
    <link href="http://yoursite.com/2019/02/14/Git%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/14/Git进阶使用/</id>
    <published>2019-02-14T10:19:40.000Z</published>
    <updated>2019-02-14T10:27:55.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-进阶操作"><a href="#Git-进阶操作" class="headerlink" title="Git 进阶操作"></a>Git 进阶操作</h1><h2 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h2><p>在多次提交之后，本地仓库中就有了多个版本，如何查看历史版本呢？在 Git bash 中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>结果如下图：<br><img src="/keaichong.github.io/2019/02/14/Git进阶使用/3C2240A2-B575-4674-A941-B575BFD96F08.png"></p><p>说明：</p><p>每次提交都会有一个 SHA-1 <strong>校验和(唯一标识)</strong>、<strong>作者的名字</strong>和<strong>电子邮件地址</strong>、<strong>提交时间</strong>，最后缩进一个段落显示<strong>提交说明</strong>。</p><blockquote><p>提示：如果提交次数太多，一屏显示不了，最后一行会显示: 表示未显示全，按键盘上的<strong>Q 键</strong>，可以显示下一页</p></blockquote><p>可以通过<code>git log</code>的参数设置历史提交的展示方式，当历史提交数过多的时候可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>有了 Git，你就可以吃后悔药了，代码出问题，你可以恢复到之前的某个版本继续开发。任何时候，你都有可以撤消刚才所做的某些操作。</p><h3 id="回退到某个版本"><a href="#回退到某个版本" class="headerlink" title="回退到某个版本"></a>回退到某个版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id(校验和)</span><br></pre></td></tr></table></figure><p>commit_id(校验和)不用写全，只写<strong>前几位</strong>即可，有了此命令就可以在历史记录里穿梭。HEAD 是指向当前版本的一个指针，使用<code>git reset</code>其实是改变 HEAD 指针，指向指定的版本。</p><blockquote><p>注意：使用此命令可以还原到指定的版本，当前项目中未提交的内容就无法还原。</p></blockquote><h3 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h3><p>假设有 5 个版本，你回退到第 4 个版本后，第 5 个版本就不存在了(使用<code>git log</code>查看)，此时想要回到第 5 个版本就需要知道第 5 个版本的 commit_id，如何找到这个 commit_id 呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>git reflog</code>可以查看所有的所有操作记录。</p></blockquote><h3 id="检出指定文件"><a href="#检出指定文件" class="headerlink" title="检出指定文件"></a>检出指定文件</h3><p>当某个文件修改出现问题，可以通过<code>git checkout</code>还原到最后一次提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- file.js</span><br></pre></td></tr></table></figure><p>通过上面的命令可以把 file.js 撤销到最后一次提交(最近提交的版本)</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><table><thead><tr><th>序号</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>01</td><td><strong>git log</strong></td><td>查看历史版本</td></tr><tr><td>02</td><td><strong>git log –pretty=oneline</strong></td><td>以更方便的方式查看历史</td></tr><tr><td>03</td><td><strong>git reset –hard commit_id</strong></td><td>回退到指定版本</td></tr><tr><td>04</td><td><strong>git reflog</strong></td><td>查看所有的操作记录</td></tr><tr><td>05</td><td><strong>git checkout – file.js</strong></td><td>检出指定文件</td></tr></tbody></table><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>当我们使用 Git 第一次提交的时候其实就已经有了一个默认的分支 master。</p><h3 id="什么时候需要使用分支？"><a href="#什么时候需要使用分支？" class="headerlink" title="什么时候需要使用分支？"></a>什么时候需要使用分支？</h3><ul><li>开发新特性(feature 分支)</li><li>正在开发的过程中继续修改一个 bug(bugfix 分支)</li><li>为了保证 master 分支的稳定性，创建 dev 分支</li></ul><h3 id="常用分支命令"><a href="#常用分支命令" class="headerlink" title="常用分支命令"></a>常用分支命令</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a><strong>查看分支</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a><strong>新建分支</strong></h4><p>新建分支会基于当前分支当前版本，新建一个分支(内容和当前分支一样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-01.png"><p>当有多个分支的时候，Git 如何知道我们当前在哪个分支工作呢？Git 保存着一个名为<strong>HEAD 的指针</strong>，该指针指向<strong>当前工作的分支</strong>。如下图：</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-02.png"><p>使用`git branch’命令可以看到当前所有的分支，和当前工作的分支(前面加*号的分支)，如下图：</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/image-201803182313451.png"><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>假设 testing 是开发分支，我们如何切换到开发分支呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure><p>此时切换到 testing 分支，可以开心的在当前分支工作了。</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-03.png"><p>新建和合并分支可以简化为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b testing</span><br></pre></td></tr></table></figure><p>相当于下面两个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure><h4 id="testing-分支提交"><a href="#testing-分支提交" class="headerlink" title="testing 分支提交"></a>testing 分支提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改某个文件</span></span><br><span class="line">$ git commit -m <span class="string">'修改内容'</span></span><br></pre></td></tr></table></figure><p>每次提交后 HEAD 随着分支一起向前移动</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-04.png"><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>当在 testing 分支某个功能开发完毕后，需要把内容合并到 master 分支，此时需要两步：</p><ol><li><p>切换到 master 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></li><li><p>把 testing 的修改合并到 master 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge testing</span><br></pre></td></tr></table></figure><p>当合并完毕，master 和 testing 分支同时指向 c2b9e 这次提交</p></li></ol><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-05.png"><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><table><thead><tr><th>序号</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>01</td><td><strong>git branch</strong></td><td>查看分支</td></tr><tr><td>02</td><td><strong>git branch testing</strong></td><td>新建分支</td></tr><tr><td>03</td><td><strong>git checkout testing</strong></td><td>切换分支</td></tr><tr><td>04</td><td><strong>git checkout -b testing</strong></td><td>新建和合并分支</td></tr><tr><td>05</td><td><strong>git merge testing</strong></td><td>合并分支</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-进阶操作&quot;&gt;&lt;a href=&quot;#Git-进阶操作&quot; class=&quot;headerlink&quot; title=&quot;Git 进阶操作&quot;&gt;&lt;/a&gt;Git 进阶操作&lt;/h1&gt;&lt;h2 id=&quot;查看历史&quot;&gt;&lt;a href=&quot;#查看历史&quot; class=&quot;headerlink&quot; title=&quot;查看历史&quot;&gt;&lt;/a&gt;查看历史&lt;/h2&gt;&lt;p&gt;在多次提交之后，本地仓库中就有了多个版本，如何查看历史版本呢？在 Git bash 中输入如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下图：&lt;br&gt;&lt;img src=&quot;/keaichong.github.io/2019/02/14/Git进阶使用/3C2240A2-B575-4674-A941-B575BFD96F08.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;每次提交都会有一个 SHA-1 &lt;strong&gt;校验和(唯一标识)&lt;/strong&gt;、&lt;strong&gt;作者的名字&lt;/strong&gt;和&lt;strong&gt;电子邮件地址&lt;/strong&gt;、&lt;strong&gt;提交时间&lt;/strong&gt;，最后缩进一个段落显示&lt;strong&gt;提交说明&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：如果提交次数太多，一屏显示不了，最后一行会显示: 表示未显示全，按键盘上的&lt;strong&gt;Q 键&lt;/strong&gt;，可以显示下一页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以通过&lt;code&gt;git log&lt;/code&gt;的参数设置历史提交的展示方式，当历史提交数过多的时候可以使用如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; --pretty=oneline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>localStoragr和cookie区别用法</title>
    <link href="http://yoursite.com/2019/02/14/localStoragr%E5%92%8Ccookie%E5%8C%BA%E5%88%AB%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/14/localStoragr和cookie区别用法/</id>
    <published>2019-02-14T09:43:23.000Z</published>
    <updated>2019-02-14T10:05:26.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote><p>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。</p></blockquote><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><blockquote><p>sessionStorage 仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持。</p></blockquote><ul><li>localStorage 和 sessionStorage 使用时使用相同的 API：</li><li>写入和读取都有三种写法<a id="more"></a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage;</span><br><span class="line"><span class="comment">//写入a字段</span></span><br><span class="line">storage[<span class="string">"a"</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//写入b字段</span></span><br><span class="line">storage.a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//写入c字段</span></span><br><span class="line">storage.setItem(<span class="string">"c"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/14/localStoragr和cookie区别用法/localStorage.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官方推荐写法</span></span><br><span class="line"> localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);<span class="comment">//以“key”为名称存储一个值“value”</span></span><br><span class="line"></span><br><span class="line">localStorage.getItem(<span class="string">"key"</span>);<span class="comment">//获取名称为“key”的值</span></span><br><span class="line"></span><br><span class="line">localStorage.removeItem(<span class="string">"key"</span>);<span class="comment">//删除名称为“key”的信息。</span></span><br><span class="line"></span><br><span class="line">localStorage.clear();​<span class="comment">//清空localStorage中所有信息</span></span><br></pre></td></tr></table></figure><p>京东官网顶部的广告关闭，效果为第一次进入官网会出现广告，然后点击关闭，刷新网页不会再显示广告，但是当清除 localStorage 存入的数据，刷新网页会再显示广告。<br>苏宁官网顶部广告数据保存在 cookie 中,当清除 cookie 中的数据时候,刷新网页也会再次显示广告</p><p>京东广告相关 js 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//localStorage方法</span></span><br><span class="line">&lt;script src=<span class="string">"../js/jquery.min.js"</span> /&gt;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">haxi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断localStorage里有没有isClose</span></span><br><span class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">"isClose"</span>)) &#123;</span><br><span class="line">    $(<span class="string">".header"</span>).hide();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">".header"</span>).show();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//点击关闭隐藏图片存取数据</span></span><br><span class="line">  $(<span class="string">".close"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".header"</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    localStorage.setItem(<span class="string">"isClose"</span>, <span class="string">"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">haxi();</span><br></pre></td></tr></table></figure><h3 id="作用域不同"><a href="#作用域不同" class="headerlink" title="作用域不同"></a>作用域不同</h3><p>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>生命期为只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为 4K 左右 。有个数限制（各浏览器不同），一般不能超过 20 个。与服务器端通信：每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题。但 Cookie 需要程序员自己封装，源生的 Cookie 接口不友好</p><h3 id="cookie-的优点：具有极高的扩展性和可用性"><a href="#cookie-的优点：具有极高的扩展性和可用性" class="headerlink" title="cookie 的优点：具有极高的扩展性和可用性"></a>cookie 的优点：具有极高的扩展性和可用性</h3><p>1.通过良好的编程，控制保存在 cookie 中的 session 对象的大小。<br>2.通过加密和安全传输技术，减少 cookie 被破解的可能性。<br>3.只有在 cookie 中存放不敏感的数据，即使被盗取也不会有很大的损失。<br>4.控制 cookie 的生命期，使之不会永远有效。这样的话偷盗者很可能拿到的就 是一个过期的 cookie。</p><h3 id="cookie-的缺点："><a href="#cookie-的缺点：" class="headerlink" title="cookie 的缺点："></a>cookie 的缺点：</h3><p>1.cookie 的长度和数量的限制。每个 domain 最多只有 20 条 cookie，每个 cookie 长度不能超过 4KB。则会被截掉。<br>2.安全性问题。如果 cookie 被人拦掉了，那个人就可获取到所有 session 信息。加密的话也不起什么作用。<br>3.有些状态不可能保存在客户端。例如，为了防止重复提表单，我们需要在服务端保存一个计数器。若吧计数器保在客户端，则起不到什么作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;localStorage&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;sessionStorage&quot;&gt;&lt;a href=&quot;#sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;sessionStorage&quot;&gt;&lt;/a&gt;sessionStorage&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;sessionStorage 仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;localStorage 和 sessionStorage 使用时使用相同的 API：&lt;/li&gt;
&lt;li&gt;写入和读取都有三种写法
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>exportdefault和export的使用方式</title>
    <link href="http://yoursite.com/2019/02/12/exportdefault%E5%92%8Cexport%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/12/exportdefault和export的使用方式/</id>
    <published>2019-02-12T15:21:26.000Z</published>
    <updated>2019-02-12T15:32:27.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node-和-ES6-中导入模块区别"><a href="#node-和-ES6-中导入模块区别" class="headerlink" title="node 和 ES6 中导入模块区别"></a>node 和 ES6 中导入模块区别</h2><p>node 中导入模块：var 名称 = require(‘模块标识符’)</p><p>node 中向外暴露成员的形式：module.exports = {}</p><p>在 ES6 中，也通过规范的形式，规定了 ES6 中如何导入和导出模块</p><p>ES6 中导入模块，使用 import 模块名称 from ‘模块标识符’    import ‘表示路径’</p><p>import <strong>_ from _</strong> 是 ES6 中导入模块的方式</p><a id="more"></a><h2 id="在-ES6-中，使用-export-default-和-export-向外暴露成员"><a href="#在-ES6-中，使用-export-default-和-export-向外暴露成员" class="headerlink" title="在 ES6 中，使用 export default 和 export 向外暴露成员"></a>在 ES6 中，使用 export default 和 export 向外暴露成员</h2><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'zs'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br></pre></td></tr></table></figure><p>或是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"zs"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> info;</span><br></pre></td></tr></table></figure><p>在 main.js 中接收，test.js 使用 export default 向外暴露的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> person <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/12/exportdefault和export的使用方式/20180826175027288.png"><p>注意：</p><p>1、export default 向外暴露的成员，可以使用任意变量来接收</p><p>2、在一个模块中，export default 只允许向外暴露一次</p><p>3、在一个模块中，可以同时使用 export default 和 export 向外暴露成员</p><p>4、使用 export 向外暴露的成员，只能使用{  }的形式来接收，这种形式，叫做【按需导出】</p><p>5、export 可以向外暴露多个成员，同时，如果某些成员，在 import 导入时，不需要，可以不在{ }中定义</p><p>6、使用 export 导出的成员，必须严格按照导出时候的名称，来使用{ }按需接收</p><p>7、使用 export 导出的成员，如果想换个变量名称接收，可以使用 as 来起别名</p><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"zs"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> title = <span class="string">"小星星"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> content = <span class="string">"哈哈哈"</span>;</span><br></pre></td></tr></table></figure><p>在 main.js 中接收，test.js 使用 export default 和 export 向外暴露的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> person, &#123; title, content <span class="keyword">as</span> content1 &#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(title + <span class="string">"======="</span> + content1);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/12/exportdefault和export的使用方式/20180826175958870.png">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;node-和-ES6-中导入模块区别&quot;&gt;&lt;a href=&quot;#node-和-ES6-中导入模块区别&quot; class=&quot;headerlink&quot; title=&quot;node 和 ES6 中导入模块区别&quot;&gt;&lt;/a&gt;node 和 ES6 中导入模块区别&lt;/h2&gt;&lt;p&gt;node 中导入模块：var 名称 = require(‘模块标识符’)&lt;/p&gt;
&lt;p&gt;node 中向外暴露成员的形式：module.exports = {}&lt;/p&gt;
&lt;p&gt;在 ES6 中，也通过规范的形式，规定了 ES6 中如何导入和导出模块&lt;/p&gt;
&lt;p&gt;ES6 中导入模块，使用 import 模块名称 from ‘模块标识符’    import ‘表示路径’&lt;/p&gt;
&lt;p&gt;import &lt;strong&gt;_ from _&lt;/strong&gt; 是 ES6 中导入模块的方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
