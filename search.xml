<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react基础</title>
      <link href="/keaichong.github.io/2019/03/07/react%E5%9F%BA%E7%A1%80/"/>
      <url>/keaichong.github.io/2019/03/07/react%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="react-基础-笔记"><a href="#react-基础-笔记" class="headerlink" title="react-基础-笔记"></a>react-基础-笔记</h1><ul><li><a href="https://reactjs.org/" target="_blank" rel="noopener">英文</a>-<a href="https://doc.react-china.org/" target="_blank" rel="noopener">中文</a></li><li><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="noopener">sublime 语法提示</a></li><li><a href="https://github.com/babel/babel-sublime" target="_blank" rel="noopener">sublime 语法高亮</a></li></ul><h2 id="前端的职责范畴"><a href="#前端的职责范畴" class="headerlink" title="前端的职责范畴"></a>前端的职责范畴</h2><ul><li>做网站前端（PCWeb 和移动 Web）- jquery</li><li>做后台开发（Node.js-java-php-python…）</li><li>做 APP（混合开发-react native）</li><li>做桌面程序（Electron）</li><li>javascript 有可能在未来一统江湖</li></ul><h2 id="React-概述"><a href="#React-概述" class="headerlink" title="React 概述"></a>React 概述</h2><ul><li><p>网站开发模式演变过程</p><blockquote><p>静态网站-&gt;动态网站（后端渲染）-&gt;Ajax-&gt;前后端渲染结合-&gt;前端渲染（前后端分离）SPA</p></blockquote></li><li><p>静态资源（网页 HTML 本身、js、css、font、视频、音频…）</p></li><li>静态网站缺陷：<ul><li>可维护性比较低</li><li>无法进行交互</li></ul></li><li>动态网站<ul><li>可维护性明显增强</li><li>并且可以处理参数，所以方便与客户端进行交互</li></ul></li><li>ajax 的诞生解决了阻塞问题<ul><li>ajax 请求是异步的，页面不需要阻塞</li><li>ajax 一般请求的是数据（json）,浏览器通过 ajax 获取到数据之后，在浏览器中进行渲染（前端渲染）</li><li>一般这种渲染方式处理的都是页面的局部（局部刷新）</li></ul></li><li><p>所以有了 ajax 之后，一般都是前端渲染与后端渲染结合使用</p><ul><li>基于 ajax 进行前端渲染之后，导致前端的业务量明显增加，那么对代码的风格带来了挑战，EXTJS（MVC）、backbone 等这些 mvc 框架解决了代码风格的一些问题，但是并不能从根本上解决（还是需要程序员去操作 DOM）,所以为了从根本上解决前端代码的风格或者开发体验，后来就诞生了更加先进的前端框架：Angular、React、Vue（SPA）—声明式编程（基本上不再需要显示的操作 DOM），解决浏览器历史回退的问题（前端路由）</li></ul></li><li><p>React 特性</p><ul><li>声明式视图<ul><li>对于声明式组件，当数据变更的时候，React 低层负责高效更新。这种方式代码更加可预见并且更容易调试。</li></ul></li><li>组件化<ul><li>封装管理数据的组件，通过组合的方式实现复杂的 UI，组件的逻辑采用 js 实现而不是模板，这样可以保持数据在 DOM 之外。</li></ul></li><li>一次学习，随处编写<ul><li>React 可以进行服务端渲染，也可以用于移动 APP 开发（React Native）</li></ul></li></ul></li></ul><h2 id="vue-和-react-对比"><a href="#vue-和-react-对比" class="headerlink" title="vue 和 react 对比"></a>vue 和 react 对比</h2><p><code>vue和react对比</code> <a href="http://index.baidu.com/?from=pinzhuan#/" target="_blank" rel="noopener">百度指数</a> <a href="https://github.com/HankBass/front-end-frameworks-comparison" target="_blank" rel="noopener">链接 1</a> <a href="https://www.zcfy.cc/article/react-or-vue-which-javascript-ui-library-should-you-be-using-2159.html" target="_blank" rel="noopener">链接 2</a></p><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><ol><li>babel</li><li>插件<ul><li>Simple React Snippets</li><li>JS JSX Snippets</li><li>jsx-beautify</li><li>Live Server</li></ul></li></ol><h2 id="React-之-HelloWorld"><a href="#React-之-HelloWorld" class="headerlink" title="React 之 HelloWorld"></a>React 之 HelloWorld</h2><ul><li><a href="https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html" target="_blank" rel="noopener">引入相关的库</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>javascript<span class="string">" src="</span>./lib/react.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">" src="</span>./lib/react-dom.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">" src="</span>./lib/babel.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>root<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/babel<span class="string">" src="</span>src/HelloWorld.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HelloWorld</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;<span class="comment">/*必须有根元素*/</span>&#125;</span><br><span class="line">    &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;div&gt;测试数据&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>基本步骤<ul><li>引入 react 库文件 react 和 react-dom</li><li>引入 babel 运行时</li><li>基于 React 语法进行开发</li></ul></li><li>细节分析<ul><li>运行环境</li><li>案例语法</li></ul></li></ul><h2 id="JSX-基础语法"><a href="#JSX-基础语法" class="headerlink" title="JSX 基础语法"></a>JSX 基础语法</h2><ul><li>什么是 JSX 元素<ul><li>区分于元素 DOM 元素，React 元素本质上是普通对象，是组件的基本组成单元</li></ul></li><li>JSX 特性<ul><li>元素可以嵌套，但是必须有跟元素，也就是最外层必须有一个元素包裹</li><li>标签必须闭合，标签中没有内容也需要闭合，比如<img></li></ul></li><li>JSX 嵌入表达式<ul><li>JSX 本质上也是表达式</li></ul></li><li>JSX 属性<ul><li>JSX 可以添加自定义属性，并且属性名采用驼峰式</li><li>属性添加可以使用延展运算符</li></ul></li></ul><h2 id="JSX-的本质"><a href="#JSX-的本质" class="headerlink" title="JSX 的本质"></a>JSX 的本质</h2><ul><li>React.createElement(type, props, …children)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactElement createElement(</span><br><span class="line">  string/ReactClass type,</span><br><span class="line">  [object props],</span><br><span class="line">  [children ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数一为字符串或者为类</li><li>参数二为元素的属性列表</li><li>第三个参数表示子节点，可以把子节点单独传递，也可以组合为一个数组来传递<ul><li>var root = React.createElement(‘ul’, { className: ‘my-list’ }, child1, child2, child3);</li><li>var root = React.createElement(‘ul’, { className: ‘my-list’ }, [child1, child2, child3]);</li></ul></li><li>分析元素的渲染方式</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>组件化思想分析<ul><li>web components</li><li>单一职责</li></ul></li><li>创建组件语法<ul><li>函数方式</li><li>类方式</li></ul></li><li>组件的状态 state</li><li>父组件向子组件传值 props<ul><li>单向数据流</li><li>子组件不可以修改 props 数据</li></ul></li></ul><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><ul><li>componentWillMount 组件挂载之前调用，render()之前调用</li><li>componentDidMount DOM 渲染完成后调用，可以用于加载后台数据</li><li>componentDidUpdate 组件更新时触发该方法，初始渲染不调用</li><li>componentWillUnmount 组件被销毁之前一般用于清理工作（定时器 timer、网络请求、订阅事件）</li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li>函数名采用驼峰式</li><li>函数值采用{函数名称}</li><li>阻止默认行为不可以使用 return false</li><li>事件函数中的 this 绑定<ul><li>构造函数中使用 bind(this)</li><li>声明函数时使用箭头函数</li></ul></li><li>函数传参</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件向父组件传值</li></ul><h2 id="条件渲染与循环渲染"><a href="#条件渲染与循环渲染" class="headerlink" title="条件渲染与循环渲染"></a>条件渲染与循环渲染</h2><ul><li>条件渲染<ul><li>js 形式条件渲染</li><li>元素变量</li><li>行内条件渲染</li><li>阻止组件渲染</li></ul></li><li>循环渲染<ul><li>渲染多个元素</li><li>key 只在数组上下文中有含义</li><li>key 在兄弟节点之间必须唯一</li><li>JSX 中可以嵌入 map 结构</li></ul></li></ul><h2 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h2><blockquote><p>表单元素本身就与别的元素不同，因为天生就包含一些初始状态</p></blockquote><ul><li>受控组件与非受控组件<ul><li>受控组件的数据由 React 组件控制</li><li>非受控组件的数据由 DOM 控制</li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>图书管理</li></ul><h2 id="直接操作-DOM"><a href="#直接操作-DOM" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h2><ul><li>什么情况需要直接操作 DOM<ul><li>管理焦点，文本选择或者媒体重放</li><li>触发命令式动画</li><li>集成第三方 DOM 库</li></ul></li><li>ref 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">this.textInput = React.createRef();</span><br><span class="line">// 标签中</span><br><span class="line">&lt;input type=&quot;text&quot; ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">// 使用</span><br><span class="line">this.textInput.current.focus();</span><br></pre></td></tr></table></figure><h2 id="JSX-进阶特性"><a href="#JSX-进阶特性" class="headerlink" title="JSX 进阶特性"></a>JSX 进阶特性</h2><ul><li>点标记的组件用法&lt;MyComponents.DatePicker color=”blue”/&gt;</li><li>动态组件名称</li><li>props 值操作</li><li>组件 children</li></ul><h2 id="React-实现原理分析"><a href="#React-实现原理分析" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程</li></ul><h2 id="表单操作-1"><a href="#表单操作-1" class="headerlink" title="表单操作"></a>表单操作</h2><blockquote><p>表单元素本身就与别的元素不同，因为天生就包含一些初始状态</p></blockquote><ul><li>受控组件与非受控组件<ul><li>受控组件的数据由 React 组件控制</li><li>非受控组件的数据由 DOM 控制</li></ul></li><li>checkbox 与 radio 组件</li></ul><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><ul><li>图书管理</li></ul><h2 id="直接操作-DOM-1"><a href="#直接操作-DOM-1" class="headerlink" title="直接操作 DOM"></a>直接操作 DOM</h2><ul><li>什么情况需要直接操作 DOM<ul><li>管理焦点，文本选择或者媒体重放</li><li>触发命令式动画</li><li>集成第三方 DOM 库</li></ul></li><li>ref 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数</span><br><span class="line">this.textInput = React.createRef();</span><br><span class="line">// 标签中</span><br><span class="line">&lt;input type=&quot;text&quot; ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">// 使用</span><br><span class="line">this.textInput.current.focus();</span><br></pre></td></tr></table></figure><ul><li>文件上传</li></ul><h2 id="React-实现原理分析-1"><a href="#React-实现原理分析-1" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程</li><li>mvc/mvvm–&gt;mv*</li></ul><h2 id="React-实现原理分析-2"><a href="#React-实现原理分析-2" class="headerlink" title="React 实现原理分析"></a>React 实现原理分析</h2><ul><li>虚拟 DOM 原理</li><li>响应式编程(数据驱动的开发模式)</li></ul><h2 id="JSX-进阶特性-1"><a href="#JSX-进阶特性-1" class="headerlink" title="JSX 进阶特性"></a>JSX 进阶特性</h2><ul><li>点标记的组件用法&lt;MyComponents.DatePicker color=”blue”/&gt;</li><li>组件 children</li><li>props 值操作</li><li>动态组件名称</li></ul><h2 id="后台数据处理"><a href="#后台数据处理" class="headerlink" title="后台数据处理"></a>后台数据处理</h2><ul><li><a href="https://github.com/github/fetch#readme" target="_blank" rel="noopener">fetch-pollyfill</a></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, options).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle HTTP response</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle network error</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>注意：fetch api 返回的是一个 promise 对象</li><li>参数：options<ul><li>method(String): HTTP 请求方法，默认为 GET</li><li>body(String): HTTP 的请求参数</li><li>headers(Object): HTTP 的请求头，默认为{}</li><li>credentials(String): 默认为 omit,忽略的意思，也就是不带 cookie;还有两个参数，same-origin，意思就是同源请求带 cookie；include,表示无论跨域还是同源请求都会带 cookie</li></ul></li><li>第一个 then 函数里面处理的是 response 的格式</li><li>响应<ul><li>text(): 将返回体处理成字符串类型</li><li>json()： 返回结果和 JSON.parse(responseText)一样</li><li>blob()： 返回一个 Blob，Blob 对象是一个不可更改的类文件的二进制数据</li><li>arrayBuffer()</li><li>formData()</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/abc"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">ret</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意这里得到的才是最终的数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>cookie 传递<ul><li>必须在 header 参数里面加上 credientials: ‘include’，才会如 xhr 一样将当前 cookies 带到请求中</li></ul></li><li>错误处理<ul><li>fetch 在服务器返回 4xx、5xx 时是不会抛出错误的，这里需要手动通过，通过 response 中的 ok 字段和 status 字段来判断</li></ul></li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>：基于 http 客户端的 Promise，用于浏览器和 Node.js。</p></blockquote><ul><li>axios 特性<ul><li>从浏览器发送 ajax 请求</li><li>从 Node.js 发送 http 请求</li><li>支持 Promise API</li><li>请求和相应拦截器</li><li>转换请求和响应数据</li><li>取消请求</li><li>JSON 数据自动转换</li><li>客户端支持防止 XSRF</li></ul></li></ul><h2 id="案例重构"><a href="#案例重构" class="headerlink" title="案例重构"></a>案例重构</h2><ul><li>图书管理基于接口</li></ul><h2 id="webpack-搭建-React-环境"><a href="#webpack-搭建-React-环境" class="headerlink" title="webpack 搭建 React 环境"></a>webpack 搭建 React 环境</h2><h2 id="官方脚手架"><a href="#官方脚手架" class="headerlink" title="官方脚手架"></a>官方脚手架</h2><ol><li>npm start<ul><li>在<a href="http://localhost:3000下监视文件，文件修改将自动更新，你可以在控制台中看到检测错误" target="_blank" rel="noopener">http://localhost:3000下监视文件，文件修改将自动更新，你可以在控制台中看到检测错误</a></li></ul></li><li>npm test<ul><li>在交互监视模式下启动测试运行程序。</li></ul></li><li>npm run build<ul><li>在生产环境中编译代码，并放在 build 目录中</li></ul></li><li>npm run eject<ul><li>抽取出项目配置文件，这是一个单向操作，一旦你使用 eject，那么就不能恢复了</li><li>使用说明：如果你对 create-react-app 这个构建工具和配置项不满意，你可以在任何时候 eject，从而导出可配置的模板</li></ul></li></ol><h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><ul><li><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a></li><li><a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">doc</a></li></ul><h2 id="前端路由概念分析"><a href="#前端路由概念分析" class="headerlink" title="前端路由概念分析"></a>前端路由概念分析</h2><ul><li>前端路由与后端路由的区别<ul><li>后端路由</li><li>前端路由</li></ul></li></ul><h2 id="React-router-之-HelloWorld"><a href="#React-router-之-HelloWorld" class="headerlink" title="React-router 之 HelloWorld"></a>React-router 之 HelloWorld</h2><blockquote><p>声明式路由</p></blockquote><ul><li>路由使用的基本步骤<ul><li>配置路由的容器 BrowserRouter</li><li>配置路由连接 Link</li><li>配置路由填充位置以及路径和组件的映射关系</li></ul></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ul><li>嵌套路由使用步骤<ul><li>在父路由的组件中配置子路由</li><li>子路由同样需要配置 Link 和 Route</li></ul></li></ul><h2 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h2><ul><li>路由传参指的是在路由的路径中通过【:参数名称】的方式进行传参，该参数在路由匹配的组件中通过【match.params.参数名称】的方式获取</li></ul><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><ul><li>路由的重定向通过 <redirect to="目标"></redirect></li></ul><h2 id="自定义路由链接"><a href="#自定义路由链接" class="headerlink" title="自定义路由链接"></a>自定义路由链接</h2><h2 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>基本用法</li><li>嵌套路由</li><li>路由重定向</li><li>路由参数</li><li>编程式路由</li><li>自定义路由连接</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise用法</title>
      <link href="/keaichong.github.io/2019/02/28/Promise%E7%94%A8%E6%B3%95/"/>
      <url>/keaichong.github.io/2019/02/28/Promise%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="promise-用法"><a href="#promise-用法" class="headerlink" title="promise 用法"></a>promise 用法</h2><p>参考:</p><ol><li>E:\北京顺义黑马前端与移动开发基础 62 期\就业班 品优购前台\day02\03-加密视频 07 20 分钟详细说明了 promise</li><li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/05/async.html</a>   阮一峰微博 <blockquote><p>Promise 的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数,在异步操作成功时调用，并将异步操作的结果作为参数传递出去<br>我们用 Promise 的时候一般是包在一个函数中，在需要的时候去运行这个函数，</p></blockquote></li></ol><ul><li>用法:在一个函数内部 return 一个 promise 对象,再调用这个函数的时候就得到了 promise 对象,就可以用 promise 的.then 方法,then 方法可以接受两个回调函数作为参数,一个回调函数的参数是 promise resolve 的结果,第二个回调函数可选,参数是 reject 的结果</li></ul><h2 id="链式操作的用法"><a href="#链式操作的用法" class="headerlink" title="链式操作的用法"></a>链式操作的用法</h2><p>从表面上看，Promise 只是能够简化层层回调的写法，而实质上，Promise 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 callback 函数要简单、灵活的多。所以使用 Promise 的正确场景是这样的：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务1执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据1"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务2执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据2"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"异步任务3执行完成"</span>);</span><br><span class="line">      resolve(<span class="string">"随便什么数据3"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runAsync1()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync3();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">异步任务3执行完成</span><br><span class="line">随便什么数据3</span><br></pre></td></tr></table></figure><p>在 then 方法中，你也可以直接 return 数据而不是 Promise 对象，在后面的 then 中就可以接收到数据了，比如我们把上面的代码修改成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'直接返回数据'</span>;  <span class="comment">//这里直接返回数据</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">异步任务1执行完成</span><br><span class="line">随便什么数据1</span><br><span class="line">异步任务2执行完成</span><br><span class="line">随便什么数据2</span><br><span class="line">直接返回数据</span><br></pre></td></tr></table></figure><h2 id="catch-的用法"><a href="#catch-的用法" class="headerlink" title="catch 的用法"></a>catch 的用法</h2><p>Promise 对象除了 then 方法，还有一个 catch 方法,它和 then 的第二个参数一样，用来指定 reject 的回调，用法是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br></pre></td></tr></table></figure><p>效果和写在 then 的第二个参数里面一样。不过它还有另外一个作用：在执行 resolve 的回调（也就是上面 then 中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死 js，而是会进到这个 catch 方法中。并把错误的原因传入 reason 参数中,请看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getNumber()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(somedata); <span class="comment">//此处的somedata未定义</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>用 Promise.all 来执行，all 接收一个数组参数，里面的值最终都算返回 Promise 对象,会等待最慢的一个异步任务执行完成之后返回结果,等到它们都执行完后才会进到 then 里面, 返回结果按照传入的顺序存在一个数组之中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([runAsync1(), runAsync2(), runAsync3()]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/28/Promise用法/promise.png"><p>有了 all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据，是不是很酷？有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash 以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> somethingThatReturnsAPromise();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> somethingThatReturnsAPromise().catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>注意:promise 的 then()和 catch(err=&gt;err)的回调结果都会走 return 之后的下一个 promise 的点 then 方法里面,如果需要把第一个 promise 里面的错误抛出给下一个 promise 的 catch 接收,第一个 promise 的 catch 要写这样 .catch(err =&gt; Promise.reject(err))<br>使用静态 Promise.reject()方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">"Testing static reject"</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未被调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// "Testing static reject"</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结论:</p><ol><li>虽然await会阻塞async异步函数，但是并没有阻塞主线程。</li><li>虽然await阻塞异步函数向后执行，看起来像是同步的，但是它本质还是异步的，我们同样可以并行执行。而同步函数不能并行执行。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么时候用module.export?什么时候用exports？</title>
      <link href="/keaichong.github.io/2019/02/26/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8module-export-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8exports%EF%BC%9F/"/>
      <url>/keaichong.github.io/2019/02/26/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8module-export-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8exports%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="创建-引用-module"><a href="#创建-引用-module" class="headerlink" title="创建/引用 module"></a>创建/引用 module</h2><p>假设这是 rocker.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在另一个文件中引用 rocker.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rocker = <span class="built_in">require</span>(<span class="string">"./rocker.js"</span>);</span><br><span class="line">rocker.name(); <span class="comment">// my name is cp</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>先来看一个例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 1 &#125;</span></span><br><span class="line"></span><br><span class="line">b.name = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">name</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#123; name: 3 &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><ol><li>一开始,a 是一个对象，b 是对 a 的引用,即 a 和 b 指向同一块内存，所以前两个输出一样。</li><li>然后对 b 做修改,即 a 和 b 指向同一块内存地址的内容发生了改变,所以 a 和 b 的输出是一样的。</li><li>接着 b 被重新赋值时，这时候 b 指向了一块新的内存,a 还是指向原来的内存，所以最后两个输出不一样。</li></ol><h2 id="module-exports-和-exports-到底是什么？"><a href="#module-exports-和-exports-到底是什么？" class="headerlink" title="module.exports 和 exports 到底是什么？"></a>module.exports 和 exports 到底是什么？</h2><blockquote><p>每一个 node.js 执行文件，都自动创建一个 module 对象和 exports 对象，同时，module 对象会创建一个叫 exports 的属性，初始化的值是 {}。实际上， exports 和 module.exports 指向同一块内存，可以理解为 exports 只是 module.exports 的引用，即：exports = module.exports = {};<br>其实，Module.exports 才是真正的接口，exports 只不过是它的一个辅助工具。最终返回给调用的是 Module.exports 而不是 exports。所以不要直接给 exports 赋值,可以在赋值后使用 module.exports = exports 重新将 exports 和 module.exports 关联起来。也可以直接给 module.exports 赋值。<br>所有的 exports 收集到的属性和方法，都赋值给了 Module.exports。当然，这有个前提，就是 Module.exports 本身不具备任何属性和方法。如果，Module.exports 已经具备一些属性和方法，那么 exports 收集来的信息将被忽略。原因是 require 引入的对象本质上是 module.exports。这就产生了一个问题，当 module.exports 和 exports 指向的不是同一块内存时，exports 的内容就会失效。</p></blockquote><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫叔叔'</span>&#125;；</span><br><span class="line">exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫老阿姨'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时 module.exports 指向了一块新的内存（该内存的内容为{name: ‘萤火虫叔叔’}），exports 指向了另一块新的内存（该内存的内容为{name: ‘萤火虫老阿姨’}）。require 得到的是{name: ‘萤火虫叔叔’}。</p></blockquote><h2 id="什么时候用-exports？什么时候用-module-exports？"><a href="#什么时候用-exports？什么时候用-module-exports？" class="headerlink" title="什么时候用 exports？什么时候用 module.exports？"></a>什么时候用 exports？什么时候用 module.exports？</h2><ul><li>如果你想你的模块是一个特定的类型就用 Module.exports。</li><li>如果你想的模块是一个典型的“实例化对象”就用 exports。<br>给 module.exports 添加属性类似于给 exports 添加属性，例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样，exports 是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"my name is cp"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 exports 导出，除非你打算从原来的“实例化对象”改变成一个类型。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>exports 是指向的 module.exports 的引用</p></li><li><p>module.exports 初始值为一个空对象 {}，所以 exports 初始值也是 {}</p></li><li><p>require()返回的是 module.exports 而不是 exports</p></li><li><p>module.exports导出的是函数,require引入的也是函数,导出对象,require引入也是对象</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex的基本入门</title>
      <link href="/keaichong.github.io/2019/02/26/Vuex%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/"/>
      <url>/keaichong.github.io/2019/02/26/Vuex%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex-流程"><a href="#vuex-流程" class="headerlink" title="vuex 流程"></a>vuex 流程</h2><blockquote><p>vuex就像一个无形的仓库，公共的状态我们会抽离出来放进里面</p></blockquote><ol><li>state-&gt;声明数据(组件可以用,响应式)</li><li>actions-&gt;和后台交互(ajax 请求)-&gt;返回新结果</li><li>mutations-&gt;修改 state,接收 actions 传递的结果</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">state:声明数据(响应式数据)-&gt;组件的computed</span><br><span class="line"></span><br><span class="line">getters:声明复杂数据将state中的某个状态进行过滤然后获取新的状态-&gt;组件的computed</span><br><span class="line"></span><br><span class="line">mutations:修改state的方法(同步方法)-&gt;组件的methods   </span><br><span class="line"></span><br><span class="line">actions:异步操作获取新数据(和后台交互-&gt;ajax) -&gt;通过commit的方法把新数据交给mutations-&gt;组件的methods</span><br><span class="line"></span><br><span class="line">modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://segmentfault.com/a/1190000015782272" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015782272</a></p></blockquote><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actions:方法-&gt;异步</span></span><br><span class="line">actions: &#123;</span><br><span class="line">  fnac1(context) &#123;</span><br><span class="line">    <span class="comment">// context就是仓库</span></span><br><span class="line">    <span class="comment">// 异步代码</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> numNew = <span class="number">200</span></span><br><span class="line">      <span class="comment">// 在异步有结果的位置,把结果提交给mutations的方法</span></span><br><span class="line">      context.commit(<span class="string">'setNum'</span>, numNew)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>app.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">    fn2()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">"fnac1"</span>)</span><br><span class="line">        ...mapActions([<span class="string">"fnac2"</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>品优购前台项目</title>
      <link href="/keaichong.github.io/2019/02/25/%E5%93%81%E4%BC%98%E8%B4%AD%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE/"/>
      <url>/keaichong.github.io/2019/02/25/%E5%93%81%E4%BC%98%E8%B4%AD%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-mvc-思想构建项目"><a href="#使用-mvc-思想构建项目" class="headerlink" title="使用 mvc 思想构建项目"></a>使用 mvc 思想构建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">models 数据模型   获取接口服务器数据</span><br><span class="line">views  视图层     渲染页面 使用模版引擎</span><br><span class="line">controllers 控制器   组织请求对应的去进行业务处理</span><br><span class="line">public 静态资源</span><br><span class="line">utils 工具类</span><br></pre></td></tr></table></figure><h2 id="开发用插件"><a href="#开发用插件" class="headerlink" title="开发用插件"></a>开发用插件</h2><ol><li>express-favicon 统一处理小图标路径插件</li><li>youch 包 ,具体的错误信息输出到页面, 美化错误信息 ,准确的定位错误的位置</li><li>http-errors 创建 HTTP 错误插件,会让 http 请求产生的 err 更具体</li><li>cross-env 能跨平台地设置及使用环境变量(开发模式/生产模式)<a id="more"></a></li></ol><h2 id="启动环境配置"><a href="#启动环境配置" class="headerlink" title="启动环境配置"></a>启动环境配置</h2><blockquote><p>在 package.json 中的 scripts 对象 自定义指令</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "cross-env NODE_ENV=development nodemon app.js","start": "start":"cross-env NODE_ENV=production node app.js"</span><br></pre></td></tr></table></figure><blockquote><p>获取变量环境</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = req.app.get(<span class="string">"env"</span>);</span><br></pre></td></tr></table></figure><h2 id="模板引擎-express-art-template"><a href="#模板引擎-express-art-template" class="headerlink" title="模板引擎 express-art-template"></a>模板引擎 express-art-template</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> artTemplate = <span class="built_in">require</span>(<span class="string">"express-art-template"</span>);</span><br><span class="line">app.engine(<span class="string">"art"</span>, artTemplate);</span><br><span class="line"><span class="comment">// app.engine('art', require('express-art-template'));</span></span><br><span class="line"><span class="comment">//app.engine告诉express,art后缀模板交给expressTPL去处理  app.set是去view文件夹下面找要渲染的art文件</span></span><br><span class="line"><span class="comment">//因为默认页面被缓存了 而且被压缩了  模版引擎默认的是生产环境的配置 所以下面debug进行判断</span></span><br><span class="line"><span class="comment">//debug 使用的布尔值  false 生产环境(压缩缓存页面)  true开发环境实时更新页面 不进行压缩方便开发者调试</span></span><br><span class="line">app.set(<span class="string">"view options"</span>, &#123;</span><br><span class="line">  debug: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="\$.get()"></a>\$.get()</h2><p>这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax</p><h2 id="报错和-undefined"><a href="#报错和-undefined" class="headerlink" title="报错和 undefined"></a>报错和 undefined</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a.a); <span class="comment">//Cannot read property 'a' of undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//报错 a is not undefined</span></span><br></pre></td></tr></table></figure><p>如果访问一个对象的属性时候,属性如果没有声明赋值,那么就是 undefined,如果访问一个变量,没有声明,就会报错,访问 undefined 的属性也会报错,undefined 上找不到任何属性</p><h2 id="input-type-number-购物车增加减少"><a href="#input-type-number-购物车增加减少" class="headerlink" title="input type=number 购物车增加减少"></a>input type=number 购物车增加减少</h2><p><input type="number" autofocus name="num" min="1" value="1"><br>最小值是 1  自动获取焦点 出现增加减少按钮</p><h2 id="express-art-template-渲染变量-res-locals"><a href="#express-art-template-渲染变量-res-locals" class="headerlink" title="express-art-template 渲染变量 res.locals"></a>express-art-template 渲染变量 res.locals</h2><blockquote><p>在调用 res.render 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：res.render 传入的对象&gt; res.locals 对象 &gt; app.locals 对象，所以 app.locals 和 res.locals 几乎没有区别，都用来渲染模板，使用上的区别在于：app.locals 上通常挂载常量信息（如博客名、描述、作者信息），res.locals 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，res.locals.user = req.session.user）。<br>修改 index.js，在 routes(app); 上一行添加如下代码：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模板全局常量</span></span><br><span class="line">app.locals.blog = &#123;</span><br><span class="line">  title: pkg.name,</span><br><span class="line">  description: pkg.description</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加模板必需的三个变量</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.locals.user = req.session.user;</span><br><span class="line">  res.locals.success = req.flash(<span class="string">"success"</span>).toString();</span><br><span class="line">  res.locals.error = req.flash(<span class="string">"error"</span>).toString();</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.locals 属性值将在应用程序的整个生命周期中保持不变，而 res.locals 属性仅在请求的生命周期内有效。</p><p>这样在调用 res.render 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量</p><h2 id="jquery-parent-和-parents-的区别"><a href="#jquery-parent-和-parents-的区别" class="headerlink" title="jquery parent 和 parents 的区别"></a>jquery parent 和 parents 的区别</h2><p>从字面上不难看出 parent 是指取得一个包含着所有匹配元素的唯一父元素的元素集合。parents 则是取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选可以看出 parent 的取值很明确，就是当前元素的父元素；parents 则是当前元素的祖先元素。下面列出例子说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div4"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br>　　$(‘p’).parent()取到的是div2,div3,div4　　<br>　　$(‘p’).parent(‘.a’)取到的是 div3<br>　　$(‘p’).parent().parent()取到的是div1，这点比较奇特；不过Jquery对象本身的特点决定了这是可行的。<br>　　$(‘p’).parents()取到的是 div1,div2,div3,div4<br>　　\$(‘p’).parents(‘.a’)取到的是 div3</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组件之间传值</title>
      <link href="/keaichong.github.io/2019/02/23/%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
      <url>/keaichong.github.io/2019/02/23/%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><blockquote><p>v-on 指令用于监听 DOM 事件 形式如：v-on:click 缩写为 @click<br>v-model 在表单控件或者组件上创建双向绑定<br>v-bind 缩写 :）动态地绑定一个或多个特性、或一个组件 prop 到表达式<br>触发事件 this.$emit(“事件名”,要传的数据shican)   绑定事件this.$on(“事件名”,要传的数据 xincan)<br>注意，在 Vue 实例中data属性其实不一定使用data() { return {} }的（方法），可以直接用data: { }（对象）。因为在组件中，如果data声明为一个方法，就可以使组件中的数据独立，避免相互影响。<br>子组件的命名无法识别驼峰命名法，当组件作为标签时，需要使用-和小写字母。</p></blockquote><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><ol><li>声明属性 props:[“属性 a”]</li><li>赋值 使用组件时 <data-st :msg="父组件data的数据"></data-st></li><li>使用 子组件 template </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好吗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data-st</span> <span class="attr">:msg</span>=<span class="string">"str"</span> <span class="attr">class</span>=<span class="string">"xx"</span>&gt;</span><span class="tag">&lt;/<span class="name">data-st</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><img src="/keaichong.github.io/2019/02/23/组件之间传值/ps.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"DataChild"</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">100</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h3 &gt;你好啊---&#123;&#123;msg&#125;&#125;   &lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">  props: [<span class="string">"msg"</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    str: <span class="string">"我是父组件data的数据"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 选项props</span></span><br><span class="line"><span class="comment">// 1. props是组件的选项</span></span><br><span class="line"><span class="comment">// 2. props的值可以是字符串数组</span></span><br><span class="line"><span class="comment">// 3. props数组里面的元素称之为prop(属性) 属性=?值</span></span><br><span class="line"><span class="comment">// 4. prop的值来源于外部的(组件的外部)</span></span><br><span class="line"><span class="comment">// 5. prop(我们这里是msg)是组件的属性-&gt;自定义标签的属性</span></span><br><span class="line"><span class="comment">// 6. prop的赋值位置(在使用组件时,通过标签属性去赋值)</span></span><br><span class="line"><span class="comment">// 7. prop的用法和data中的数据用法一样-&gt;&#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="comment">// 补充 : 组件的数据的值来源于自己(内容),此时这个数据的声明写在data中</span></span><br><span class="line"><span class="comment">// 推论-&gt; data的数据的值只能来源于自己-&gt;</span></span><br><span class="line"><span class="comment">// 2个组件-&gt; newVue的视图当成整个网页的根组件</span></span><br><span class="line"><span class="comment">// 此时 根组件就是newVue的视图div#app  子组件就是DataChild</span></span><br></pre></td></tr></table></figure><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><ol><li>子组件创建自定义事件，事件的处理函数是父组件的函数，子组件再通过this.$emit触发自定义事件</li><li>重点: 主要是通过\$emit 方法来实现传参的方式，第一个参数是自定义事件名称，第二个则是要传的数据</li><li>触发事件 this.\$emit(“事件名”,要传的数据)</li><li>在使用组件时绑定自定义事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data-child</span> <span class="attr">class</span>=<span class="string">"xx"</span> @<span class="attr">transfer</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">data-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/23/组件之间传值/sp.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"DataChild"</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      str: <span class="string">"我从子组件data传过来"</span>,</span><br><span class="line">      str1: <span class="string">"我是子组件data里面的数据"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;右边插值表达式展示子组件data数据---&gt;&#123;&#123;str1&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click="son" &gt;点我传值给父组件&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    son() &#123;</span><br><span class="line">      <span class="comment">//触发事件</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"transfer"</span>, <span class="keyword">this</span>.str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    parent(str) &#123;</span><br><span class="line">      alert(str + <span class="string">"---"</span> + <span class="keyword">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h2><blockquote><p>b 组件传值给 c 组件<br>方法: eventBus.js(中央事件总线):给其他文件提供了共享/公用的对象(newVue())</p></blockquote><ol><li>B 中 触发事件 vm.\$emit(“event”,值 num)</li><li>C 中 绑定事件 vm.\$on(“event”,(argv)=&gt;{argv 就是值 num})</li></ol><blockquote><p>注意:先绑定事件,再触发事件 代码写在 created 是为了让事件自动绑定触发</p></blockquote><img src="/keaichong.github.io/2019/02/23/组件之间传值/BC.png"><p>argv 就是 B 组件传过来的值 100</p><blockquote><p>下面是 eventBus.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js代码+实例化vm-&gt;具有独立功能的js代码-&gt;js模块</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vm;</span><br></pre></td></tr></table></figure><h2 id="Vue-中如何在组件内部实现一个双向数据绑定？"><a href="#Vue-中如何在组件内部实现一个双向数据绑定？" class="headerlink" title="Vue 中如何在组件内部实现一个双向数据绑定？"></a>Vue 中如何在组件内部实现一个双向数据绑定？</h2><blockquote><p>具体思路：父组件通过props传值给子组件，子组件通过 $emit 来通知父组件修改相应的props值，具体实现如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-one</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"value=arguments[0]"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-one</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getdata();</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [<span class="string">"value"</span>],</span><br><span class="line">  template: <span class="string">`&lt;div &gt;   </span></span><br><span class="line"><span class="string"> &lt;input type ="text" @input="handleInput" :value="value"&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleInput(e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"input"</span>, e.target.value);</span><br><span class="line">    &#125;,</span><br><span class="line">    getdata() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CompOne: component</span><br><span class="line">  &#125;,</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="number">123</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由元信息</title>
      <link href="/keaichong.github.io/2019/02/22/%E8%B7%AF%E7%94%B1%E5%85%83%E4%BF%A1%E6%81%AF/"/>
      <url>/keaichong.github.io/2019/02/22/%E8%B7%AF%E7%94%B1%E5%85%83%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h2><h3 id="为什么会有路由元信息这个东西？"><a href="#为什么会有路由元信息这个东西？" class="headerlink" title="为什么会有路由元信息这个东西？"></a>为什么会有路由元信息这个东西？</h3><p>我们在做网站登录验证的时候，可以使用到 beforeEach 钩子函数进行验证操作，如下面代码 ，如果页面 path 为’/goodsList’，那么就让它跳转到登录页面，实现了验证登录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">"/goodsList"</span>) &#123;</span><br><span class="line">    next(<span class="string">"/login"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果需要登录验证的网页多了怎么办？</p><p>1.这里是对比 path。如果需要验证的网页很多，那么在 if 条件里得写下所有的路由地址，将会是非常麻烦的一件事情。</p><p>2.因为路由是可以嵌套的。有’/goodsList’，那么可能会有’/goodsList/online’，再或者还有’/goodsList/offline’、’/goodsList/audit’、’/goodsList/online/edit’等等。</p><p>如果像刚才例子中这样对比（to.path === ‘/goodsList’），就非常单一，其他的路径压根不会限制（验证）到，照样能正常登陆！因为每个 to.path 根本不一样。</p><p>我们所理想的就是把’/goodsList’限制了，其他所有的以’/goodsList’开头的那些页面都给限制到！</p><p>to Route: 即将要进入的目标 路由对象<br>我们打印一下 to</p><p>它有很多属性，有</p><ul><li>fullPath</li><li>hash</li><li>matched</li><li>meta</li><li>name</li><li>params</li><li>path</li><li>query</li></ul><p>其中有个属性，matched，就是匹配了的路由，我们打印出来，这个是个数组。它的第一项就是{path: “/goodslist”}，一直到最为具体的当前 path （例如：{path: “/goodslist/online/edit”}）</p><p>这里可以循环 matched 这个数组，看每一项的 path 有没有等于’/goodsList’,只要其中一个有，那么就让它跳转到登录状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    to.matched.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.path == <span class="string">"/goodslist"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    next(<span class="string">"/login"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么这里只是对 goodsList 进行验证判断，且限制的还是 path，如果页面中还有会员列表、资讯列表、广告列表都需要进行验证的时候，用 path 来做限制似乎有点不好用。轮到主角登场了</p><h2 id="路由元信息-meta-字段（元数据）"><a href="#路由元信息-meta-字段（元数据）" class="headerlink" title="路由元信息 meta 字段（元数据）"></a>路由元信息 meta 字段（元数据）</h2><p>定义路由的时候可以配置 meta 字段：</p><blockquote><p>因为一个路由匹配到的所有路由记录会暴露为 $route 对象 (还有在导航守卫中的路由对象) 的 $route.matched 数组。因此，我们需要遍历 \$route.matched 来检查路由记录中的 meta 字段。</p></blockquote><p>直接在路由配置的时候，给每个路由添加一个自定义的 meta 对象，在 meta 对象中可以设置一些状态，来进行一些操作。用它来做登录校验再合适不过了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> path: <span class="string">'/actile'</span>,</span><br><span class="line"> name: <span class="string">'Actile'</span>,</span><br><span class="line"> component: Actile,</span><br><span class="line"> meta: &#123;</span><br><span class="line">   login_require: <span class="literal">false</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"> path: <span class="string">'/goodslist'</span>,</span><br><span class="line"> name: <span class="string">'goodslist'</span>,</span><br><span class="line"> component: Goodslist,</span><br><span class="line"> meta: &#123;</span><br><span class="line">   login_require: <span class="literal">true</span></span><br><span class="line"> &#125;,</span><br><span class="line"> children:[</span><br><span class="line">   &#123;</span><br><span class="line">     path: <span class="string">'online'</span>,</span><br><span class="line">     component: GoodslistOnline</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们只需要判断 item 下面的 meta 对象中的 login_require 是不是 true，就可以做一些限制了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    to.matched.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.meta.login_require;</span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    next(<span class="string">"/login"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>官方文档:<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>some,every,fiflter,map区别</title>
      <link href="/keaichong.github.io/2019/02/22/some-every-fiflter-map%E5%8C%BA%E5%88%AB/"/>
      <url>/keaichong.github.io/2019/02/22/some-every-fiflter-map%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ol><li>some():返回一个Boolean，判断是否有元素符合func条件<br>const arr = [1,2,3,4]; arr.some((item)=&gt;{return item&gt;1})</li></ol><p>打印结果： true</p><ol start="2"><li><p>every():返回一个Boolean，判断每个元素是否符合func条件<br>const arr1 = [1,2,3,4]; arr.every((item)=&gt;{return item&gt;3});<br>打印结果：<br>false</p><a id="more"></a></li><li><p>filter():返回一个符合func条件的元素数组</p></li></ol><p>let ages = [33,44,55,66,77]; ages.filter((item)=&gt;{return item&gt;18})<br>打印结果[33, 44, 55, 66, 77]</p><ol start="4"><li>map（）：返回一个新的array，数组元素由每一次调用函数产生结果组成<br>const arr =[1,2,3,4,5,6]; arr.map((item)=&gt;{return item*10})<br>打印结果 [10, 20, 30, 40, 50, 60]</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中遇到的坑</title>
      <link href="/keaichong.github.io/2019/02/16/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/keaichong.github.io/2019/02/16/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="获取首屏数据和操作-dom-元素"><a href="#获取首屏数据和操作-dom-元素" class="headerlink" title="获取首屏数据和操作 dom 元素"></a>获取首屏数据和操作 dom 元素</h2><ol><li>created(){} vm 创建完毕 -&gt;获取首屏的数据 this.getData()</li><li>mounted(){} 挂载完毕-&gt; 操作 dom 元素</li></ol><h2 id="全局过滤器在-element-ui-table-中绑定数据"><a href="#全局过滤器在-element-ui-table-中绑定数据" class="headerlink" title="全局过滤器在 element-ui table 中绑定数据"></a>全局过滤器在 element-ui table 中绑定数据</h2><ol><li>v-bind:</li><li>{msg | fmtdate}</li><li>前提:单元格的内容不是 prop 的值 create_time 的值-日期 - 给单元格内容外层加 template - 给 template 设置 slot-scope 一般 slot-scope 值设置为 scope - slot-scope 的值 会自动绑定外层数据结构,这里是 el-table 的 data 的值 tableData - 在内容位置写 scope.row 自动取出数组 tableData 中每个对象,其中 row 是固定写法</li><li>参考:<a href="http://element-cn.eleme.io/#/zh-CN/component/table#zi-ding-yi-lie-mo-ban" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/table#zi-ding-yi-lie-mo-ban</a><br>自定义列模板<a id="more"></a></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 Scoped slot 可以获取到 row, column, $index 和 store（table </span></span><br><span class="line"><span class="comment">内部的状态管理）的数据 </span></span><br><span class="line"><span class="comment">&#123;scope.row&#125; =&gt;获取整行的数据 </span></span><br><span class="line"><span class="comment">&#123;scope.$index&#125; =&gt;'行的下标 (备注:实际应该两个大括号 但是hexo解析会报错)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"日期"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-time"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px"</span>&gt;</span>&#123; scope.row.date &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局过滤器用法"><a href="#全局过滤器用法" class="headerlink" title="全局过滤器用法"></a>全局过滤器用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>处理前<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>处理后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 让过滤器toUpper去处理msg数据并且把处理结果返回 --&gt;</span></span><br><span class="line">  &#123;&#123;msg | toUpper&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  需求: data中msg的值"abc" 希望"abc"渲染的结果Abc</span></span><br><span class="line"><span class="comment">// 全局</span></span><br><span class="line"><span class="comment">// 1. 定义过滤器Vue.filter(名字,函数(v)&#123;&#125;)</span></span><br><span class="line"><span class="comment">// 2. 写功能</span></span><br><span class="line"><span class="comment">// 3. 使用&#123;&#123;msg |过滤器&#125;&#125;</span></span><br><span class="line">Vue.filter(<span class="string">"toUpper"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// v -&gt; 指的是将来过滤器的调用者 这里是msg</span></span><br><span class="line">  <span class="comment">// 作用</span></span><br><span class="line">  <span class="comment">// "xyz".charAt(0)</span></span><br><span class="line">  <span class="comment">// "xyz".substr(1)</span></span><br><span class="line">  <span class="comment">// Abc</span></span><br><span class="line">  <span class="keyword">return</span> v.charAt(<span class="number">0</span>).toUpperCase() + v.substr(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">"abc"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">处理前</span><br><span class="line">abc</span><br><span class="line">处理后</span><br><span class="line">Abc</span><br></pre></td></tr></table></figure><h2 id="element-输入框焦点问题"><a href="#element-输入框焦点问题" class="headerlink" title="element 输入框焦点问题"></a>element 输入框焦点问题</h2><ol><li>element-ui 自带指令获取焦点 autofocus</li><li>通过自定义全局指令 v-focus 进行绑定</li></ol><blockquote><p>问题:这样使我们在组件中可以自用的调用 v-focus 方法，给他绑定定义布尔变量来控制元素是否获得焦点 但是这里要注意的是组件<el-input>本身在页面中渲染成了一个 div 元素所以我们要在<el-input>被绑定为 v-focus 的同时在自定义指令中获取组件下通过 querySelector()方法获取 input 元素</el-input></el-input></p></blockquote><ol><li>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数 $(selector).focus();但是 JQuery 中也有提供很好地方法将一个 JQuery 对象转化为一个 DOM 对象：$(”#Input”)[0].focus();</li><li>html5 中可以直接使用 autofocus 属性</li><li>纯 js 的环境下，很简单，就用.focus()就可以了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  el.querySelector(<span class="string">"input"</span>).focus();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vue-中-refs-的用法及作用详解"><a href="#vue-中-refs-的用法及作用详解" class="headerlink" title="vue 中\$refs 的用法及作用详解"></a>vue 中\$refs 的用法及作用详解</h2><p>一般来讲，获取 DOM 元素，需 document.querySelector（”.input1”）获取这个 dom 节点，然后在获取 input1 的值。</p><p>但是用 ref 绑定之后，我们就不需要在获取 dom 节点了，直接在上面的 input 上绑定 input1，然后\$refs 里面调用就行。</p><p>然后在 javascript 里面这样调用：this.\$refs.input1 这样就可以减少获取 dom 节点的消耗了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"input1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.input1.value =<span class="string">"test"</span>; <span class="comment">//this.$refs.input1 减少获取dom节点的消耗</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref-操作-dom"><a href="#ref-操作-dom" class="headerlink" title="ref 操作 dom"></a>ref 操作 dom</h2><ol><li>给要操作的元素设置 ref 属性 值随便写</li><li>在 js 中选项 mounted(){通过(this.\$refs.ref 值来获取要操作的 dom 元素}</li></ol><h2 id="vue-下拉框默认选项"><a href="#vue-下拉框默认选项" class="headerlink" title="vue 下拉框默认选项"></a>vue 下拉框默认选项</h2><p>默认选中&lt;请选择&gt;<br>当 select 中的 v-model 绑定的值和 option 中 value 值相等 就会默认选中该项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123; selected &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"..."</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vue-v-for-遍历"><a href="#vue-v-for-遍历" class="headerlink" title="vue v-for 遍历"></a>vue v-for 遍历</h2><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123; item.message &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#example-1"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [&#123; <span class="attr">message</span>: <span class="string">"Foo"</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">"Bar"</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo Bar</span><br></pre></td></tr></table></figure><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><blockquote><p>第一个参数是值 value</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123; value &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#v-for-object"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: <span class="string">"John"</span>,</span><br><span class="line">      lastName: <span class="string">"Doe"</span>,</span><br><span class="line">      age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">John Doe 30</span><br></pre></td></tr></table></figure><blockquote><p>你也可以提供第二个的参数为键名：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"(value, key) in object"</span>&gt;</span><br><span class="line">  &#123;key&#125;: &#123;value&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firstName: John,</span><br><span class="line">lastName: Doe,</span><br><span class="line">age: 30</span><br></pre></td></tr></table></figure><blockquote><p>第三个参数为索引：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">  &#123; index &#125;. &#123; key &#125;: &#123; value &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.firstName: John,</span><br><span class="line">1.lastName: Doe,</span><br><span class="line">2.age: 30</span><br></pre></td></tr></table></figure><h2 id="vue-v-bind-使用场景"><a href="#vue-v-bind-使用场景" class="headerlink" title="vue v-bind 使用场景"></a>vue v-bind 使用场景</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href="url"&gt;...&lt;/a&gt;</span><br><span class="line">在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定。</span><br></pre></td></tr></table></figure><p>加上了冒号是为了动态绑定数据，等号后面可以写变量或者表达式。<br>如果不使用冒号，等号后面就可以写字符串字面量等原始类型数据。这时就无法进行动态绑定数据了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:disable</span>=<span class="string">"true"</span> <span class="attr">:value</span>=<span class="string">"-1"</span> &gt;</span>打开<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：true 或 false    disable 值是变量/Boolean 类型<br>提取 value 的值 数值类型-1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disable</span>=<span class="string">"true"</span> <span class="attr">value</span>=<span class="string">"-1"</span>  &gt;</span>打开<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：true    disable 值是 String 类型 value 的值是 String 类型-1</p><h2 id="axios-请求拦截器"><a href="#axios-请求拦截器" class="headerlink" title="axios 请求拦截器"></a>axios 请求拦截器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">// 所有请求发起之后,进行筛选,请求标识是不是login</span></span><br><span class="line">    <span class="comment">// 如果标识是login,不要头部-&gt;请求继续发起</span></span><br><span class="line">    <span class="comment">// 当请求标识不是login,先设置头部,再发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (config.url !== <span class="string">"login"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">      <span class="comment">// axios.defaults.headers.common["Authorization"] = AUTH_TOKEN;</span></span><br><span class="line">      config.headers[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line">      <span class="comment">// var per = &#123;&#125;;</span></span><br><span class="line">      <span class="comment">// per["Authorization"] = "token";</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.$http.get(url) -&gt; 请求拦截处理 -&gt;发请求</span></span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>config 的 url 虽然我们看到是一个全路径 但是我们在之前设置了 baseurl axios.defaults.baseURL = “<a href="http://localhost:8888/api/private/v1/&quot;" target="_blank" rel="noopener">http://localhost:8888/api/private/v1/&quot;</a> 所以我们在代码中设置 url 时候会自动取出 baseurl 拼接 相对路径</p></blockquote><img src="/keaichong.github.io/2019/02/16/项目中遇到的坑/axios请求拦截器.png"><blockquote><p>config 中有 header 就是请求发起的请求头 所以可以给 header 增加一个 key 名并赋值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给对象添加属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//或者 var obj=new Object();</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"name"</span>;</span><br><span class="line"><span class="keyword">var</span> value = <span class="string">"张三丰"</span>;</span><br><span class="line">obj[key] = value;</span><br><span class="line"></span><br><span class="line">config.headers[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line"><span class="comment">//或者  config.headers.Authorization = AUTH_TOKEN; js对象[]中的值加引号代表属性 不加是变量</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>methods中的方法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>computed中的方法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="string">"abc"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 特点:</span></span><br><span class="line">  <span class="comment">// 如果计算属性fn2没有依赖data数据,此时,会把第一次使用的结果进行缓存,</span></span><br><span class="line">  <span class="comment">// 再次使用计算属性fn2, 会从缓存中取结果 -&gt; 好处,提高性能,减少内存消耗</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    fn2() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"fn2----"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 调用一次 执行一次</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn1() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"fn1----"</span>); <span class="comment">// 耗时操作</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> methods中的方法</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.917Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.918Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.919Z"</span><br><span class="line"></span><br><span class="line">computed中的方法</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.920Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.920Z"</span><br><span class="line"></span><br><span class="line">"2019-02-17T15:46:21.920Z"</span><br></pre></td></tr></table></figure><h2 id="watch-基本使用"><a href="#watch-基本使用" class="headerlink" title="watch 基本使用"></a>watch 基本使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">"abc"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// watch选项</span></span><br><span class="line">  <span class="comment">// 作用: 监测data数据变化</span></span><br><span class="line">  <span class="comment">// 特点: 被监测data数据变化时 自动触发函数</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 被监测的数据:function(新值,old值)&#123;&#125;</span></span><br><span class="line">    <span class="comment">// msg:function(newVal,oldVal)&#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    msg(newV, oldV) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(newV, oldV);</span><br><span class="line">      <span class="comment">// 异步操作  比如ajax 定时器等</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中的数组遍历-forEach-与-map-方法分析"><a href="#JavaScript-中的数组遍历-forEach-与-map-方法分析" class="headerlink" title="JavaScript 中的数组遍历 forEach()与 map()方法分析"></a>JavaScript 中的数组遍历 forEach()与 map()方法分析</h2><ol><li>forEach:用来遍历数组中的每一项；这个方法执行是没有返回值的，对原来数组也没有影响；</li><li>数组中有几项，那么传递进去的匿名回调函数就需要执行几次；</li><li>每一次执行匿名函数的时候，还给其传递了三个参数值：数组中的当前项 item,当前项的索引 index,原始数组 input；</li><li>理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是我们可以自己通过数组的索引来修改原来的数组；forEach 方法中的 this 是 ary,匿名回调函数中的 this 默认是 window；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">42</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> res = ary.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, input</span>) </span>&#123;</span><br><span class="line">  input[index] = item * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//--&gt;undefined;</span></span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">//--&gt;会对原来的数组产生改变；</span></span><br></pre></td></tr></table></figure><ol><li>map:和 forEach 非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；</li><li>区别：map 的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</li><li>不管是 forEach 还是 map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的 this 进行修改。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">42</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> res = ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//--&gt;[120,230,240,420,10];</span></span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">//--&gt;[12,23,24,42,1]；</span></span><br></pre></td></tr></table></figure><h2 id="…展开运算符"><a href="#…展开运算符" class="headerlink" title="…展开运算符"></a>…展开运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>]</span><br><span class="line">    <span class="keyword">const</span> colorful = [...color, <span class="string">'green'</span>, <span class="string">'pink'</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(colorful) <span class="comment">//[red, yellow, green, pink]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    <span class="keyword">const</span> alp = &#123; <span class="attr">fist</span>: <span class="string">'a'</span>, <span class="attr">second</span>: <span class="string">'b'</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> alphabets = &#123; ...alp, <span class="attr">third</span>: <span class="string">'c'</span> &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(alphabets) <span class="comment">//&#123; "fist": "a", "second": "b", "third": "c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件-组件和模块的区别"><a href="#组件-组件和模块的区别" class="headerlink" title="组件-组件和模块的区别"></a>组件-组件和模块的区别</h2><ol><li>模块:具有独立功能的.js 文件 -&gt; 封装</li><li>组件:封装 html+css+js</li></ol><blockquote><p>在组件中可以使用不同的模块</p><p>同一个模块(js 功能)可以在不同组件中使用</p><p>目前代码中,newVue 管理的 div#app 根组件</p></blockquote><h2 id="单页应用-SPA-特点"><a href="#单页应用-SPA-特点" class="headerlink" title="单页应用 SPA-特点"></a>单页应用 SPA-特点</h2><blockquote><p>优点</p></blockquote><ol><li>用户体验好</li><li>完全组件化开发</li></ol><blockquote><p>缺点</p></blockquote><ol><li>首屏加载慢-&gt;按需加载</li><li>不利于 SEO-&gt;服务端渲染(node-&gt;自己写路由-&gt;express-art-template+res.render())</li><li>开发难度高(框架)</li></ol><blockquote><p>vue 适合开发 SPA-&gt;什么是 SPA+SPA 特点</p><p>SPA 不利于 SEO-&gt;搜索引擎排名靠前-&gt;搜素引擎机制-&gt;搜索引擎不能去找到局部刷新的网站内容</p></blockquote><h2 id="element-tree-grid（表格树）的使用"><a href="#element-tree-grid（表格树）的使用" class="headerlink" title="element-tree-grid（表格树）的使用"></a>element-tree-grid（表格树）的使用</h2><blockquote><p>表格树，element-tree-grid 需要单独下载并再配合 elementUi 里 el-table 使用。<br><a href="https://www.cnblogs.com/han77/p/10411206.html" target="_blank" rel="noopener">https://www.cnblogs.com/han77/p/10411206.html</a></p></blockquote><h2 id="新名词-鲁棒"><a href="#新名词-鲁棒" class="headerlink" title="新名词 鲁棒"></a>新名词 鲁棒</h2><p>鲁棒是 Robust 的音译 鲁棒性===健壮性</p><h2 id="vue-路由守卫-beforeEach-beforeRouteLeave"><a href="#vue-路由守卫-beforeEach-beforeRouteLeave" class="headerlink" title="vue 路由守卫 beforeEach,beforeRouteLeave"></a>vue 路由守卫 beforeEach,beforeRouteLeave</h2><blockquote><p>先回顾一下钩子函数 beforeEach</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;&#125;)</span><br><span class="line">router,beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;auth = <span class="literal">true</span> &#125; =meta <span class="comment">// meta代表的是to中的meta对象</span></span><br><span class="line"><span class="keyword">var</span> isLogin = <span class="built_in">Boolean</span>(state.state.user.id) <span class="comment">// true 用户已登录，false 用户未登录</span></span><br><span class="line"><span class="keyword">if</span>(auth &amp;&amp; !islogin &amp;&amp; path !==<span class="string">'/login'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> next(&#123;<span class="attr">path</span>:<span class="string">'/login'</span>&#125;) <span class="comment">// 跳转到login页面</span></span><br><span class="line">&#125;</span><br><span class="line">next（） <span class="comment">// 进行下一个钩子函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这个 beforeEach 的钩子函数，它是一个全局的 before 钩子函数， （before each）意思是在 每次每一个路由改变的时候都得执行一遍。组件内的钩子函数 ( beforeRouteEnter 和 beforeRouteLeave 再加一个 watch)</p></blockquote><blockquote><p>在 vue2.x 中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）最先执行的是 beforeEach钩子，所有路由开始的时候最先执行</span><br><span class="line">2）然后就是router的配置中的beforeEnter.</span><br><span class="line">3) 接下来就是 路由beforeARouteEnter -- 然后是组件自身的生命周期 -- 路由beforeRouteLeave</span><br><span class="line">beforeRouteEnter (to, from, next) &#123;&#125; 与 beforeRouteLeave不再是组件中route配置下的对象了，他们和data处于同级别的地位。</span><br></pre></td></tr></table></figure><p>可以看出： 新设计的路由 淡化了组件自身跟着路由生命周期变化而变化，而是依赖组件自身的生命周期，只有两个简单的 路由级别的钩子 beforeRouteEnter beforeRouteLeave<br>那么接下来：<br>　　 ajax 调用时机：相对于组件来说的，而且应该是在路由进入之前开始准备的 所以 beforeRouteEnter 是调用 ajax 的时机。 实际项目中一般我是在 created 钩子函数中，上面说的没试过。<br>watch 这一函数可以监听路由$route变化。beforeRouteLeave在组件的生命周期完成后，且旧路由即将切换走，新路由beforeEach的时机执行。<br>watch的使用时机：<br>当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<br>不过，这也意味着 组件的生命周期钩子不会再被调用。<br>复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：</p><h2 id="webpack-打包优化"><a href="#webpack-打包优化" class="headerlink" title="webpack 打包优化"></a>webpack 打包优化</h2><h4 id="cdn-配置"><a href="#cdn-配置" class="headerlink" title="cdn 配置"></a>cdn 配置</h4><blockquote><p>vendor.js 过大.造成过大的原因是因为在 main.js 导入第三库太多时,webpack 合并 js 时生成了 vendor.js(我们习惯把第三方库放在 vendor 里面)造成的.如下图在 main.js 引用 element-ui 等第三方库。后果就是你的服务器端的 js 文件越大则用户加载页面的时间会越长(因为所需下载 js 的时间越久)<br>webpack.base.conf.js 中 module.exports 添加</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> externals: &#123;</span><br><span class="line">    <span class="comment">// jquery: 'jQuery'</span></span><br><span class="line">    <span class="comment">// key-&gt;js的包名-&gt;package.json</span></span><br><span class="line">    <span class="comment">// value-&gt;该包暴露给全局作用域内的变量名</span></span><br><span class="line">    <span class="comment">//之所以变量名加引号是因为有些变量名有短横线 所以统一加引号</span></span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"Vue"</span>,</span><br><span class="line">    <span class="string">"vue-router"</span>: <span class="string">"VueRouter"</span>,</span><br><span class="line">    <span class="string">"element-ui"</span>: <span class="string">"ELEMENT"</span>,</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"axios"</span>,</span><br><span class="line">    <span class="string">"moment"</span>: <span class="string">"moment"</span>,</span><br><span class="line">    <span class="string">"echarts"</span>: <span class="string">"echarts"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><blockquote><p>页面中显示某个组件-&gt;只加载了对应的.js-&gt;SPA 首屏加载变快</p></blockquote><h4 id="取消-map-文件"><a href="#取消-map-文件" class="headerlink" title="取消.map 文件"></a>取消.map 文件</h4><ol><li>.map 文件作用:用来调试-&gt;用户不需要-&gt;在打包时通过 webpack 配置</li><li>在 webpack.prod.conf.js-&gt;注释掉</li></ol><h4 id="css-在自己组件生效"><a href="#css-在自己组件生效" class="headerlink" title="css 在自己组件生效"></a>css 在自己组件生效</h4><blockquote><p>vue 文件的 style 开始标签位置设置 scoped</p></blockquote><h2 id="遇到的小问题"><a href="#遇到的小问题" class="headerlink" title="遇到的小问题"></a>遇到的小问题</h2><h4 id="在导入模块时候-模块路径和模块名字正确-报错-找不到模块-原因-模块名字结尾不小心增加了一个空格"><a href="#在导入模块时候-模块路径和模块名字正确-报错-找不到模块-原因-模块名字结尾不小心增加了一个空格" class="headerlink" title="在导入模块时候 模块路径和模块名字正确 报错:找不到模块 原因:模块名字结尾不小心增加了一个空格"></a>在导入模块时候 模块路径和模块名字正确 报错:找不到模块 原因:模块名字结尾不小心增加了一个空格</h4><h4 id="编程式导航注意问题"><a href="#编程式导航注意问题" class="headerlink" title="编程式导航注意问题"></a>编程式导航注意问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.\$router.push(&#123;</span><br><span class="line">   <span class="comment">//如果提供了 path 则 name 会被忽略</span></span><br><span class="line">   <span class="comment">// name: "aaa",</span></span><br><span class="line">   path: <span class="string">"/top"</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="vuex-模块开空间"><a href="#vuex-模块开空间" class="headerlink" title="vuex 模块开空间"></a>vuex 模块开空间</h4><p>import { mapActions, mapState } from “vuex”;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块开空间namespaced: true,开空间之后你要告诉组件你要用那个模块里面的title 这样即使多个模块有一样的title属性也不会冲突</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">"a"</span>, [<span class="string">"title"</span>, <span class="string">"subjects"</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="响应路由参数的变化-原来的组件实例会被复用"><a href="#响应路由参数的变化-原来的组件实例会被复用" class="headerlink" title="响应路由参数的变化,原来的组件实例会被复用"></a>响应路由参数的变化,原来的组件实例会被复用</h4><img src="/keaichong.github.io/2019/02/16/项目中遇到的坑/router.png"><h4 id="vuex-辅助函数—对象展开运算符"><a href="#vuex-辅助函数—对象展开运算符" class="headerlink" title="vuex 辅助函数—对象展开运算符"></a>vuex 辅助函数—对象展开运算符</h4><blockquote><p>mapState 是一个函数并且返回的是一个对象，那么就类似于</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: c &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我直接写：必然会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就可以用到三个点…对象展开运算符（现处于 ECMASCript 提案 stage-3 阶段）；<br>将 fn()的返回值进行展开运算，但是…fn(),必须在一个外部对象里面执行<br>如果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">  ...fn()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p>就是把一个对象的 key 和 value 展开混入到另一个对象里面，由此想到对象的 深拷贝<br>如何将一个对象进行深拷贝的问题，又多出了一个答案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  user: <span class="string">"admin"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如何深拷贝a到b里面?</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  ...a,</span><br><span class="line">  info: <span class="string">"拷贝a的内容到b的对象里面"</span>,</span><br><span class="line">  name: <span class="string">"快到碗里来"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ES6-中构造方法写法"><a href="#ES6-中构造方法写法" class="headerlink" title="ES6 中构造方法写法"></a>ES6 中构造方法写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//箭头函数简写</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//ES6 方法简写 (冒号和箭头删掉)</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代替ajax的fetch-API"><a href="#代替ajax的fetch-API" class="headerlink" title="代替ajax的fetch API"></a>代替ajax的fetch API</h2><p><a href="https://zhuanlan.zhihu.com/p/22433312" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22433312</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git进阶使用</title>
      <link href="/keaichong.github.io/2019/02/14/Git%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/keaichong.github.io/2019/02/14/Git%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-进阶操作"><a href="#Git-进阶操作" class="headerlink" title="Git 进阶操作"></a>Git 进阶操作</h1><h2 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h2><p>在多次提交之后，本地仓库中就有了多个版本，如何查看历史版本呢？在 Git bash 中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>结果如下图：<br><img src="/keaichong.github.io/2019/02/14/Git进阶使用/3C2240A2-B575-4674-A941-B575BFD96F08.png"></p><p>说明：</p><p>每次提交都会有一个 SHA-1 <strong>校验和(唯一标识)</strong>、<strong>作者的名字</strong>和<strong>电子邮件地址</strong>、<strong>提交时间</strong>，最后缩进一个段落显示<strong>提交说明</strong>。</p><blockquote><p>提示：如果提交次数太多，一屏显示不了，最后一行会显示: 表示未显示全，按键盘上的<strong>Q 键</strong>，可以显示下一页</p></blockquote><p>可以通过<code>git log</code>的参数设置历史提交的展示方式，当历史提交数过多的时候可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>有了 Git，你就可以吃后悔药了，代码出问题，你可以恢复到之前的某个版本继续开发。任何时候，你都有可以撤消刚才所做的某些操作。</p><h3 id="回退到某个版本"><a href="#回退到某个版本" class="headerlink" title="回退到某个版本"></a>回退到某个版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id(校验和)</span><br></pre></td></tr></table></figure><p>commit_id(校验和)不用写全，只写<strong>前几位</strong>即可，有了此命令就可以在历史记录里穿梭。HEAD 是指向当前版本的一个指针，使用<code>git reset</code>其实是改变 HEAD 指针，指向指定的版本。</p><blockquote><p>注意：使用此命令可以还原到指定的版本，当前项目中未提交的内容就无法还原。</p></blockquote><h3 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h3><p>假设有 5 个版本，你回退到第 4 个版本后，第 5 个版本就不存在了(使用<code>git log</code>查看)，此时想要回到第 5 个版本就需要知道第 5 个版本的 commit_id，如何找到这个 commit_id 呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>git reflog</code>可以查看所有的所有操作记录。</p></blockquote><h3 id="检出指定文件"><a href="#检出指定文件" class="headerlink" title="检出指定文件"></a>检出指定文件</h3><p>当某个文件修改出现问题，可以通过<code>git checkout</code>还原到最后一次提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- file.js</span><br></pre></td></tr></table></figure><p>通过上面的命令可以把 file.js 撤销到最后一次提交(最近提交的版本)</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><table><thead><tr><th>序号</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>01</td><td><strong>git log</strong></td><td>查看历史版本</td></tr><tr><td>02</td><td><strong>git log –pretty=oneline</strong></td><td>以更方便的方式查看历史</td></tr><tr><td>03</td><td><strong>git reset –hard commit_id</strong></td><td>回退到指定版本</td></tr><tr><td>04</td><td><strong>git reflog</strong></td><td>查看所有的操作记录</td></tr><tr><td>05</td><td><strong>git checkout – file.js</strong></td><td>检出指定文件</td></tr></tbody></table><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>当我们使用 Git 第一次提交的时候其实就已经有了一个默认的分支 master。</p><h3 id="什么时候需要使用分支？"><a href="#什么时候需要使用分支？" class="headerlink" title="什么时候需要使用分支？"></a>什么时候需要使用分支？</h3><ul><li>开发新特性(feature 分支)</li><li>正在开发的过程中继续修改一个 bug(bugfix 分支)</li><li>为了保证 master 分支的稳定性，创建 dev 分支</li></ul><h3 id="常用分支命令"><a href="#常用分支命令" class="headerlink" title="常用分支命令"></a>常用分支命令</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a><strong>查看分支</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a><strong>新建分支</strong></h4><p>新建分支会基于当前分支当前版本，新建一个分支(内容和当前分支一样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-01.png"><p>当有多个分支的时候，Git 如何知道我们当前在哪个分支工作呢？Git 保存着一个名为<strong>HEAD 的指针</strong>，该指针指向<strong>当前工作的分支</strong>。如下图：</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-02.png"><p>使用`git branch’命令可以看到当前所有的分支，和当前工作的分支(前面加*号的分支)，如下图：</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/image-201803182313451.png"><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>假设 testing 是开发分支，我们如何切换到开发分支呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure><p>此时切换到 testing 分支，可以开心的在当前分支工作了。</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-03.png"><p>新建和合并分支可以简化为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b testing</span><br></pre></td></tr></table></figure><p>相当于下面两个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure><h4 id="testing-分支提交"><a href="#testing-分支提交" class="headerlink" title="testing 分支提交"></a>testing 分支提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改某个文件</span></span><br><span class="line">$ git commit -m <span class="string">'修改内容'</span></span><br></pre></td></tr></table></figure><p>每次提交后 HEAD 随着分支一起向前移动</p><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-04.png"><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>当在 testing 分支某个功能开发完毕后，需要把内容合并到 master 分支，此时需要两步：</p><ol><li><p>切换到 master 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></li><li><p>把 testing 的修改合并到 master 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge testing</span><br></pre></td></tr></table></figure><p>当合并完毕，master 和 testing 分支同时指向 c2b9e 这次提交</p></li></ol><img src="/keaichong.github.io/2019/02/14/Git进阶使用/branch-05.png"><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><table><thead><tr><th>序号</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>01</td><td><strong>git branch</strong></td><td>查看分支</td></tr><tr><td>02</td><td><strong>git branch testing</strong></td><td>新建分支</td></tr><tr><td>03</td><td><strong>git checkout testing</strong></td><td>切换分支</td></tr><tr><td>04</td><td><strong>git checkout -b testing</strong></td><td>新建和合并分支</td></tr><tr><td>05</td><td><strong>git merge testing</strong></td><td>合并分支</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>localStoragr和cookie区别用法</title>
      <link href="/keaichong.github.io/2019/02/14/localStoragr%E5%92%8Ccookie%E5%8C%BA%E5%88%AB%E7%94%A8%E6%B3%95/"/>
      <url>/keaichong.github.io/2019/02/14/localStoragr%E5%92%8Ccookie%E5%8C%BA%E5%88%AB%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote><p>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。</p></blockquote><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><blockquote><p>sessionStorage 仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持。</p></blockquote><ul><li>localStorage 和 sessionStorage 使用时使用相同的 API：</li><li>写入和读取都有三种写法<a id="more"></a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage;</span><br><span class="line"><span class="comment">//写入a字段</span></span><br><span class="line">storage[<span class="string">"a"</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//写入b字段</span></span><br><span class="line">storage.a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//写入c字段</span></span><br><span class="line">storage.setItem(<span class="string">"c"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/14/localStoragr和cookie区别用法/localStorage.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官方推荐写法</span></span><br><span class="line"> localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);<span class="comment">//以“key”为名称存储一个值“value”</span></span><br><span class="line"></span><br><span class="line">localStorage.getItem(<span class="string">"key"</span>);<span class="comment">//获取名称为“key”的值</span></span><br><span class="line"></span><br><span class="line">localStorage.removeItem(<span class="string">"key"</span>);<span class="comment">//删除名称为“key”的信息。</span></span><br><span class="line"></span><br><span class="line">localStorage.clear();​<span class="comment">//清空localStorage中所有信息</span></span><br></pre></td></tr></table></figure><p>京东官网顶部的广告关闭，效果为第一次进入官网会出现广告，然后点击关闭，刷新网页不会再显示广告，但是当清除 localStorage 存入的数据，刷新网页会再显示广告。<br>苏宁官网顶部广告数据保存在 cookie 中,当清除 cookie 中的数据时候,刷新网页也会再次显示广告</p><p>京东广告相关 js 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//localStorage方法</span></span><br><span class="line">&lt;script src=<span class="string">"../js/jquery.min.js"</span> /&gt;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">haxi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断localStorage里有没有isClose</span></span><br><span class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">"isClose"</span>)) &#123;</span><br><span class="line">    $(<span class="string">".header"</span>).hide();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">".header"</span>).show();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//点击关闭隐藏图片存取数据</span></span><br><span class="line">  $(<span class="string">".close"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".header"</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    localStorage.setItem(<span class="string">"isClose"</span>, <span class="string">"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">haxi();</span><br></pre></td></tr></table></figure><h3 id="作用域不同"><a href="#作用域不同" class="headerlink" title="作用域不同"></a>作用域不同</h3><p>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>生命期为只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为 4K 左右 。有个数限制（各浏览器不同），一般不能超过 20 个。与服务器端通信：每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题。但 Cookie 需要程序员自己封装，源生的 Cookie 接口不友好</p><h3 id="cookie-的优点：具有极高的扩展性和可用性"><a href="#cookie-的优点：具有极高的扩展性和可用性" class="headerlink" title="cookie 的优点：具有极高的扩展性和可用性"></a>cookie 的优点：具有极高的扩展性和可用性</h3><p>1.通过良好的编程，控制保存在 cookie 中的 session 对象的大小。<br>2.通过加密和安全传输技术，减少 cookie 被破解的可能性。<br>3.只有在 cookie 中存放不敏感的数据，即使被盗取也不会有很大的损失。<br>4.控制 cookie 的生命期，使之不会永远有效。这样的话偷盗者很可能拿到的就 是一个过期的 cookie。</p><h3 id="cookie-的缺点："><a href="#cookie-的缺点：" class="headerlink" title="cookie 的缺点："></a>cookie 的缺点：</h3><p>1.cookie 的长度和数量的限制。每个 domain 最多只有 20 条 cookie，每个 cookie 长度不能超过 4KB。则会被截掉。<br>2.安全性问题。如果 cookie 被人拦掉了，那个人就可获取到所有 session 信息。加密的话也不起什么作用。<br>3.有些状态不可能保存在客户端。例如，为了防止重复提表单，我们需要在服务端保存一个计数器。若吧计数器保在客户端，则起不到什么作用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>exportdefault和export的使用方式</title>
      <link href="/keaichong.github.io/2019/02/12/exportdefault%E5%92%8Cexport%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/keaichong.github.io/2019/02/12/exportdefault%E5%92%8Cexport%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="node-和-ES6-中导入模块区别"><a href="#node-和-ES6-中导入模块区别" class="headerlink" title="node 和 ES6 中导入模块区别"></a>node 和 ES6 中导入模块区别</h2><p>node 中导入模块：var 名称 = require(‘模块标识符’)</p><p>node 中向外暴露成员的形式：module.exports = {}</p><p>在 ES6 中，也通过规范的形式，规定了 ES6 中如何导入和导出模块</p><p>ES6 中导入模块，使用 import 模块名称 from ‘模块标识符’    import ‘表示路径’</p><p>import <strong>_ from _</strong> 是 ES6 中导入模块的方式</p><a id="more"></a><h2 id="在-ES6-中，使用-export-default-和-export-向外暴露成员"><a href="#在-ES6-中，使用-export-default-和-export-向外暴露成员" class="headerlink" title="在 ES6 中，使用 export default 和 export 向外暴露成员"></a>在 ES6 中，使用 export default 和 export 向外暴露成员</h2><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'zs'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br></pre></td></tr></table></figure><p>或是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"zs"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> info;</span><br></pre></td></tr></table></figure><p>在 main.js 中接收，test.js 使用 export default 向外暴露的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> person <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/12/exportdefault和export的使用方式/20180826175027288.png"><p>注意：</p><p>1、export default 向外暴露的成员，可以使用任意变量来接收</p><p>2、在一个模块中，export default 只允许向外暴露一次</p><p>3、在一个模块中，可以同时使用 export default 和 export 向外暴露成员</p><p>4、使用 export 向外暴露的成员，只能使用{  }的形式来接收，这种形式，叫做【按需导出】</p><p>5、export 可以向外暴露多个成员，同时，如果某些成员，在 import 导入时，不需要，可以不在{ }中定义</p><p>6、使用 export 导出的成员，必须严格按照导出时候的名称，来使用{ }按需接收</p><p>7、使用 export 导出的成员，如果想换个变量名称接收，可以使用 as 来起别名</p><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"zs"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> title = <span class="string">"小星星"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> content = <span class="string">"哈哈哈"</span>;</span><br></pre></td></tr></table></figure><p>在 main.js 中接收，test.js 使用 export default 和 export 向外暴露的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> person, &#123; title, content <span class="keyword">as</span> content1 &#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(title + <span class="string">"======="</span> + content1);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/12/exportdefault和export的使用方式/20180826175958870.png">]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>require和import的区别</title>
      <link href="/keaichong.github.io/2019/02/10/require%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/keaichong.github.io/2019/02/10/require%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。</p></blockquote><h2 id="遵循规范"><a href="#遵循规范" class="headerlink" title="遵循规范"></a>遵循规范</h2><ol><li>require 是 AMD规范引入方式</li><li><p>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p><h2 id="调用时间"><a href="#调用时间" class="headerlink" title="调用时间"></a>调用时间</h2></li><li><p>require是运行时调用，所以require理论上可以运用在代码的任何地方</p></li><li><p>import是编译时调用，所以必须放在文件开头</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2></li><li><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</p></li><li>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require<a id="more"></a><h2 id="require-exports-："><a href="#require-exports-：" class="headerlink" title="require / exports ："></a>require / exports ：</h2></li><li>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。用法只有以下三种简单的写法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">exports.fs = fs</span><br><span class="line"><span class="built_in">module</span>.exports = fs</span><br></pre></td></tr></table></figure></li></ol><h2 id="import-export："><a href="#import-export：" class="headerlink" title="import / export："></a>import / export：</h2><ol><li>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。</li><li><p>写法就比较多种多样：(导入的时候有没有大括号的区别是什么)<br> 1.当用export default people导出时，就用 import people 导入（不带大括号）</p><p> 2.一个文件里，有且只能有一个export default。但可以有多个export。</p><p> 3.当用export name 时，就用import { name }导入（记得带上大括号）</p><p> 4.当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </p><p> 5.当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> fs&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile <span class="keyword">as</span> read&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> fs, &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFile</span></span></span><br><span class="line"><span class="function"><span class="title">export</span> </span>&#123;readFile, read&#125;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'fs'</span></span><br></pre></td></tr></table></figure></li></ol><p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mvc和mvvm</title>
      <link href="/keaichong.github.io/2019/02/04/mvc%E5%92%8Cmvvm/"/>
      <url>/keaichong.github.io/2019/02/04/mvc%E5%92%8Cmvvm/</url>
      
        <content type="html"><![CDATA[<img src="/keaichong.github.io/2019/02/04/mvc和mvvm/01.MVC和MVVM的关系图解.png" title="MVC和MVVM的关系图解"><a id="more"></a><img src="/keaichong.github.io/2019/02/04/mvc和mvvm/vue.png" title="vue图解"><h2 id="Vue-项目-重点"><a href="#Vue-项目-重点" class="headerlink" title="Vue-项目-重点"></a>Vue-项目-重点</h2><h3 id="day07-项目-重点"><a href="#day07-项目-重点" class="headerlink" title="day07-项目-重点"></a>day07-项目-重点</h3><h4 id="01-项目-准备-vue-cli-创建项目结构"><a href="#01-项目-准备-vue-cli-创建项目结构" class="headerlink" title="01-项目-准备-vue-cli 创建项目结构"></a>01-项目-准备-vue-cli 创建项目结构</h4><ol><li><p>来到项目所希望的目录-&gt;打开 cmd</p></li><li><p>vue init webpack 项目名</p><ol><li>是否安装 vue-router -&gt; Y</li><li>是否 use ESLint -&gt; Y</li><li>编译方式 -&gt; for most users</li><li>unit tests-&gt;N</li><li>e2e -&gt; N</li><li>npm/yarn -&gt; npm</li></ol></li><li><p>cd 项目目录</p></li><li><p>npm run dev 启动开发模式</p><blockquote><p>注意: 默认不会打开浏览器</p></blockquote></li></ol><h4 id="02-项目-准备-项目目录说明"><a href="#02-项目-准备-项目目录说明" class="headerlink" title="02-项目-准备-项目目录说明"></a>02-项目-准备-项目目录说明</h4><ol><li>.eslintignore -&gt; ESLint 检查 js 代码排除忽略文件</li><li>eslintrc-&gt; ESLint 配置文件</li><li>.gitignore -&gt; git 排除忽略文件</li><li>build/ -&gt; webpack 打包(src)的产物</li><li>conf/ -&gt; 配置服务器 index.js autoOpenBrowser: true, -&gt; npm run dev</li><li>src/main.js 和之前不一样 之前是 render-&gt; 现在是 template 和 components</li></ol><h4 id="03-项目-准备-代码规范-自定义指令-lintfix"><a href="#03-项目-准备-代码规范-自定义指令-lintfix" class="headerlink" title="03-项目-准备-代码规范-自定义指令-lintfix"></a>03-项目-准备-代码规范-自定义指令-lintfix</h4><blockquote><p>ESlint 自动检查 js 代码规范</p><p>一键调整代码规范</p></blockquote><ol><li><p>package.json-&gt;scripts-&gt;自定义指令</p><blockquote><p>“lintfix”: “eslint –ext .js,.vue src –fix”,</p></blockquote></li><li><p>npm run dev 让配置文件生效</p></li><li><p>npm run lintfix (对于未使用的变量 不能修复)</p></li><li><p>npm run dev</p></li></ol><blockquote><p>建议: 先感受 ESLint , 项目第三天 教如何禁用 eslint</p></blockquote><h4 id="04-项目-准备-element-ui-文档分析"><a href="#04-项目-准备-element-ui-文档分析" class="headerlink" title="04-项目-准备-element-ui-文档分析"></a>04-项目-准备-element-ui-文档分析</h4><blockquote><p>vue 使用第三方 UI 库 饿了么 element-ui</p><p>vuePC 项目:element-ui / iView</p><p>vue 移动端项目: mint-ui</p></blockquote><h4 id="05-项目-准备-element-ui-安装-引入"><a href="#05-项目-准备-element-ui-安装-引入" class="headerlink" title="05-项目-准备-element-ui-安装-引入"></a>05-项目-准备-element-ui-安装-引入</h4><blockquote><p>npm i element-ui</p></blockquote><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">"element-ui"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"element-ui/lib/theme-chalk/index.css"</span>;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure><blockquote><p>在所有的.vue 文件 template 中就可以使用组件了!</p></blockquote><h4 id="06-项目-准备-项目模板简化-调整"><a href="#06-项目-准备-项目模板简化-调整" class="headerlink" title="06-项目-准备-项目模板简化-调整"></a>06-项目-准备-项目模板简化-调整</h4><blockquote><p>简化代码</p></blockquote><h4 id="07-项目-准备-git-版本控制"><a href="#07-项目-准备-git-版本控制" class="headerlink" title="07-项目-准备-git-版本控制"></a>07-项目-准备-git-版本控制</h4><blockquote><p>git 管理项目代码</p><p>gitbash-&gt; git 指令可以任何 cmd 中执行-&gt;git 报错-&gt;git 是无效指令-&gt;</p><ol><li>找到 git 软件安装路径 bin</li><li>找到计算机管理/属性//环境变量 path -&gt; 修改编辑 path -&gt; 把上一步路径放在 path 里面</li><li>可以在任意 cmd 中 git 指令</li><li>重启电脑</li></ol><p><a href="https://blog.csdn.net/shanshan_blog/article/details/53645358" target="_blank" rel="noopener">网址</a></p><p>继续 gitbash 软件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m "注释"</span><br><span class="line">// github新建仓库</span><br><span class="line">// 关联仓库</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>后续再 git</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "完成了功能1-登录"</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="08-项目-准备-git-分支管理"><a href="#08-项目-准备-git-分支管理" class="headerlink" title="08-项目-准备-git-分支管理"></a>08-项目-准备-git-分支管理</h4><blockquote><p>前提 git 管理代码/协同开发</p></blockquote><blockquote><p>项目 2 个人</p><p>A 人-&gt;新建子分支 login-&gt;编写代码 -&gt;git add. commit-&gt;把代码 A 合并到主分支 master</p><p>B 人-&gt;新建子分支 home-&gt;编写代码 -&gt;git add. commit-&gt;把代码 B 合并到主分支 master</p><p>在 master 主分支-&gt;git push</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看分支</span><br><span class="line">git branch</span><br><span class="line">// 新建分支并且切换到分支</span><br><span class="line">git checkout -b 分支dev-login</span><br><span class="line">// git branch</span><br><span class="line">// 结果: 接下来所有的操作(代码编写/add/commit)在当前的dev-login进行操作的-&gt;开发login功能</span><br></pre></td></tr></table></figure><h4 id="09-项目-登录-新建分支-login-组件-配置路由"><a href="#09-项目-登录-新建分支-login-组件-配置路由" class="headerlink" title="09-项目-登录-新建分支-login 组件-配置路由"></a>09-项目-登录-新建分支-login 组件-配置路由</h4><blockquote><p>当前开发 login 登录 当前分支 dev-login</p></blockquote><ol><li>新建 login.vue 组件</li><li>配置路由 router.js</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 在子分支完成小功能后,在子分支上</span><br><span class="line">git add .</span><br><span class="line">git commit -m "注释"</span><br><span class="line">// 功能完成</span><br><span class="line">// 切换到master</span><br><span class="line">git checkout master</span><br><span class="line">// 把dev-login分支写的代码合并到master</span><br><span class="line">// git branch</span><br><span class="line">git merge dev-login</span><br><span class="line">// 在master主分支推送</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="10-项目-登录-引入表单组件"><a href="#10-项目-登录-引入表单组件" class="headerlink" title="10-项目-登录-引入表单组件"></a>10-项目-登录-引入表单组件</h4><blockquote><p>切换回 dev-login</p></blockquote><ol><li>引入 el-form</li><li>添加类名</li><li>提供组件要用的数据</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m "引入登录组件"</span><br></pre></td></tr></table></figure><blockquote><p>合并代码 不需要每次都做,可以完成一大功能 最后一起合并和推送</p></blockquote><h4 id="11-项目-登录-样式调整"><a href="#11-项目-登录-样式调整" class="headerlink" title="11-项目-登录-样式调整"></a>11-项目-登录-样式调整</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login-wrap</span> &#123;</span><br><span class="line">  <span class="comment">/* 注意: 百分比布局 父元素height */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#324152</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="comment">/* 开发 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>百分比布局<ol><li>base.css html,body{height:100%}</li><li>App.vue #app{height:100%}</li></ol></li><li>vue 项目重点不是 css 只要能写出来就可以</li></ol></blockquote><h4 id="12-项目-登录-axios-插件"><a href="#12-项目-登录-axios-插件" class="headerlink" title="12-项目-登录-axios 插件"></a>12-项目-登录-axios 插件</h4><ol><li>npm i axios</li><li>main.js 挂载原型 axios</li><li>配置 baseUrl</li><li>this.\$http 发送请求了</li></ol><h4 id="13-项目-登录-发送登录请求"><a href="#13-项目-登录-发送登录请求" class="headerlink" title="13-项目-登录-发送登录请求"></a>13-项目-登录-发送登录请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http</span><br><span class="line">  .post(<span class="string">`login`</span>, <span class="keyword">this</span>.formdata)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>服务器 cmd 卡死-&gt; 回车-&gt;激活它</p></blockquote><h4 id="14-项目-登录-引入提示框组件"><a href="#14-项目-登录-引入提示框组件" class="headerlink" title="14-项目-登录-引入提示框组件"></a>14-项目-登录-引入提示框组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.post(<span class="string">`login`</span>, <span class="keyword">this</span>.formdata).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      data,</span><br><span class="line">      meta: &#123; msg, status &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; = res;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"success----"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 提示框 -&gt; UI</span></span><br><span class="line">    <span class="keyword">this</span>.$message.error(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>提示: 对象解构赋值</p></blockquote><h4 id="15-项目-登录-登录成功-进入-home-组件"><a href="#15-项目-登录-登录成功-进入-home-组件" class="headerlink" title="15-项目-登录-登录成功-进入 home 组件"></a>15-项目-登录-登录成功-进入 home 组件</h4><blockquote><p>登录成功-&gt;渲染 home.vue</p></blockquote><h4 id="16-项目-登录-简化登录请求代码-async-和-await"><a href="#16-项目-登录-简化登录请求代码-async-和-await" class="headerlink" title="16-项目-登录-简化登录请求代码-async 和 await"></a>16-项目-登录-简化登录请求代码-async 和 await</h4><blockquote><p>目的:让异步代码看起来像同步,好处没有函数嵌套</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">`login`</span>, <span class="keyword">this</span>.formdata);</span><br></pre></td></tr></table></figure><ol><li>找异步代码</li><li>在异步代码前面加 await 同时接受异步的结果</li><li>在异步代码外层最近的函数前面加 async</li></ol><h4 id="17-项目-登录-保存-token-值"><a href="#17-项目-登录-保存-token-值" class="headerlink" title="17-项目-登录-保存 token 值"></a>17-项目-登录-保存 token 值</h4><blockquote><p>将来在其他组件中使用用户的数据信息中 token 数据-&gt;保存 token-&gt;</p><p>login.vue 有了 token -&gt; xxoo.vue 使用 token-&gt;</p><p>A 页面有数据 a -&gt; B 页面使用 a-&gt;</p><p>要把 token 数据永久存储-&gt; cookie/session/sessionStorage/localStorage 等-&gt;</p><p>使用 Html5 新特性 localStorage 保存 token</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把正确的用户的token保存起来</span></span><br><span class="line"><span class="comment">// 存值</span></span><br><span class="line">localStorage.setItem(<span class="string">"token"</span>, token);</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="comment">// const aa = localStorage.getItem("token");</span></span><br><span class="line"><span class="comment">// console.log(aa);</span></span><br></pre></td></tr></table></figure><blockquote><p>浏览器调试-&gt;application-&gt;cookie/localStorage 保存的数据</p></blockquote><h4 id="18-项目-首页-布局容器-使用-样式调整"><a href="#18-项目-首页-布局容器-使用-样式调整" class="headerlink" title="18-项目-首页-布局容器-使用-样式调整"></a>18-项目-首页-布局容器-使用-样式调整</h4><blockquote><p>引入布局容器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">class</span>=<span class="string">"aside"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>调整样式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="19-项目-首页-头部-样式调整"><a href="#19-项目-首页-头部-样式调整" class="headerlink" title="19-项目-首页-头部-样式调整"></a>19-项目-首页-头部-样式调整</h4><blockquote><p>引入 layout 布局(24 份)</p><p>el-row 一行</p><p>el-col 一列</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"@/assets/logo.png"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"19"</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>电商后台管理系统<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"logout"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="20-项目-合并代码-登录"><a href="#20-项目-合并代码-登录" class="headerlink" title="20-项目-合并代码-登录"></a>20-项目-合并代码-登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 子分支</span><br><span class="line">git add .</span><br><span class="line">git commit -m ""</span><br><span class="line">// 切到主分支</span><br><span class="line">git checkout master</span><br><span class="line">// 合并代码</span><br><span class="line">git merge dev-login</span><br><span class="line">// 在master写代码</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m "test"</span><br><span class="line">// 推送</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>仓库地址链接</p><ol><li>下载</li><li>使用 git 指令克隆项目仓库 git clone 项目网址<a href="https://github.com/LL-1214/shopmanager64.git" target="_blank" rel="noopener">https://github.com/LL-1214/shopmanager64.git</a></li></ol></blockquote><h3 id="day08-项目-重点"><a href="#day08-项目-重点" class="headerlink" title="day08-项目-重点"></a>day08-项目-重点</h3><h4 id="01-项目-首页-侧边栏-导航组件-文档"><a href="#01-项目-首页-侧边栏-导航组件-文档" class="headerlink" title="01-项目-首页-侧边栏-导航组件-文档"></a>01-项目-首页-侧边栏-导航组件-文档</h4><blockquote><p>el-menu</p></blockquote><ol><li>router : 点击时 path 的值 index 值</li><li>unique-opened 控制是否只有一个子菜单打开<blockquote><p>el-submenu 子菜单</p></blockquote></li></ol><h4 id="02-项目-首页-侧边栏-引入导航组件-调整"><a href="#02-项目-首页-侧边栏-引入导航组件-调整" class="headerlink" title="02-项目-首页-侧边栏-引入导航组件-调整"></a>02-项目-首页-侧边栏-引入导航组件-调整</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:unique-opened</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:router</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">default-active</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"el-menu-vertical-demo"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="03-项目-首页-进入首页的权限验证"><a href="#03-项目-首页-进入首页的权限验证" class="headerlink" title="03-项目-首页-进入首页的权限验证"></a>03-项目-首页-进入首页的权限验证</h4><blockquote><p>必须先登录,才显示 home.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeMount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!localStorage.getItem(<span class="string">"token"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">        name: <span class="string">"login"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.$message.warning(<span class="string">"请先登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="04-项目-首页-头部-退出功能"><a href="#04-项目-首页-头部-退出功能" class="headerlink" title="04-项目-首页-头部-退出功能"></a>04-项目-首页-头部-退出功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出</span></span><br><span class="line">    handleLoginout() &#123;</span><br><span class="line">      <span class="comment">// 1. 清除token</span></span><br><span class="line">      localStorage.clear();</span><br><span class="line">      <span class="comment">// 2. 来到登录</span></span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">        name: <span class="string">"login"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 3. 提示</span></span><br><span class="line">      <span class="keyword">this</span>.$message.warning(<span class="string">"退出成功"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="05-项目-首页-合并分支-新建用户分支"><a href="#05-项目-首页-合并分支-新建用户分支" class="headerlink" title="05-项目-首页-合并分支-新建用户分支"></a>05-项目-首页-合并分支-新建用户分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev-users</span><br><span class="line">git checkout master</span><br><span class="line">// 复习</span><br><span class="line">// 合并分支</span><br><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><h4 id="06-项目-用户管理-用户列表-新建组件-路由配置"><a href="#06-项目-用户管理-用户列表-新建组件-路由配置" class="headerlink" title="06-项目-用户管理-用户列表-新建组件-路由配置"></a>06-项目-用户管理-用户列表-新建组件-路由配置</h4><blockquote><p>嵌套路由<br>提供单独的 router-view<br>users.vue 是在 home.vue 里面显示的</p></blockquote><h4 id="07-项目-用户管理-用户列表-面包屑和搜索框"><a href="#07-项目-用户管理-用户列表-面包屑和搜索框" class="headerlink" title="07-项目-用户管理-用户列表-面包屑和搜索框"></a>07-项目-用户管理-用户列表-面包屑和搜索框</h4><blockquote><p>面包屑</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator-class</span>=<span class="string">"el-icon-arrow-right"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">:to</span>=<span class="string">"&#123; path: '/' &#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 首页/用户管理/用户列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>el-card 带默认样式 div<br>el-row 行&gt;el-col 列</p></blockquote><h4 id="08-项目-用户管理-用户列表-引入表格组件"><a href="#08-项目-用户管理-用户列表-引入表格组件" class="headerlink" title="08-项目-用户管理-用户列表-引入表格组件"></a>08-项目-用户管理-用户列表-引入表格组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"date"</span> <span class="attr">label</span>=<span class="string">"日期"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"address"</span> <span class="attr">label</span>=<span class="string">"地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>el-table 表格 data 绑定数据[]<br>el-table-column 控制的是列</p></blockquote><ol><li>label 控制的是当前列的表头</li><li>prop 控制的是当前列单元格的数据,prop 的值来源于外层 data 绑定的数据 tableData 数组中对象的 key 名</li></ol><h4 id="09-项目-用户管理-用户列表-表头处理"><a href="#09-项目-用户管理-用户列表-表头处理" class="headerlink" title="09-项目-用户管理-用户列表-表头处理"></a>09-项目-用户管理-用户列表-表头处理</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"list"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"#"</span> <span class="attr">width</span>=<span class="string">"80"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"邮箱"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"电话"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"创建日期"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"用户状态"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-项目-用户管理-用户列表-请求数据"><a href="#10-项目-用户管理-用户列表-请求数据" class="headerlink" title="10-项目-用户管理-用户列表-请求数据"></a>10-项目-用户管理-用户列表-请求数据</h4><blockquote><p>获取表格的数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> getTableData() &#123;</span><br><span class="line">     <span class="comment">// 除了登录请求.其他所有请求都需要授权-&gt;</span></span><br><span class="line">     <span class="comment">// 在发送请求之前,先设置请求头&#123;Authorization:token值&#125;</span></span><br><span class="line">     <span class="comment">// 设置请求头headers -&gt; 发送请求用的是axios-&gt;找axiosAPI有没有可以设置请求头-&gt;看文档</span></span><br><span class="line">     <span class="comment">// &#123;</span></span><br><span class="line">     <span class="comment">//   ContentType:text/html,</span></span><br><span class="line">     <span class="comment">//   Authorization:?</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">     <span class="keyword">this</span>.$http.defaults.headers.common[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(</span><br><span class="line">       <span class="string">`users?query=<span class="subst">$&#123;<span class="keyword">this</span>.query&#125;</span>&amp;pagenum=<span class="subst">$&#123;<span class="keyword">this</span>.pagenum&#125;</span>&amp;pagesize=<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">         <span class="keyword">this</span>.pagesize</span></span></span><br><span class="line"><span class="string"><span class="subst">       &#125;</span>`</span></span><br><span class="line">     );</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口说明,需要授权 API-&gt;除了登录接口,其他所有接口都需要授权,也就是设置头部</p></blockquote><h4 id="11-项目-用户管理-用户列表-渲染数据-一般数据"><a href="#11-项目-用户管理-用户列表-渲染数据-一般数据" class="headerlink" title="11-项目-用户管理-用户列表-渲染数据-一般数据"></a>11-项目-用户管理-用户列表-渲染数据-一般数据</h4><blockquote><p>单元格的数据有 2 个不同情况</p></blockquote><ol><li>直接就是 prop 属性值的值 比如 prop=”id”</li><li>单元格内容不是 prop 的值?</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"id"</span> <span class="attr">label</span>=<span class="string">"#"</span> <span class="attr">width</span>=<span class="string">"80"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"username"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"120"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"email"</span> <span class="attr">label</span>=<span class="string">"邮箱"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"mobile"</span> <span class="attr">label</span>=<span class="string">"电话"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prop</span>=<span class="string">"create_time"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"创建日期"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"140"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-项目-用户管理-用户列表-渲染数据-日期格式处理"><a href="#12-项目-用户管理-用户列表-渲染数据-日期格式处理" class="headerlink" title="12-项目-用户管理-用户列表-渲染数据-日期格式处理"></a>12-项目-用户管理-用户列表-渲染数据-日期格式处理</h4><ol><li>全局过滤器</li><li>使用过滤器</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"创建日期"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>&#123;scope.row.create_time | fmtdate&#125;<span class="tag">&lt;/<span class="name">template</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>前提:当单元格内容不是 prop 控制的</p></blockquote><ol><li>给单元格内容外层加 template</li><li>设置 template 的属性 slot-scope=”scope”</li><li>在单元格内部通过 scope.row.属性 取值<blockquote><p>注意: 固定写法, row 固定, “scope”可以随便写</p></blockquote></li></ol><h4 id="13-项目-用户管理-用户列表-渲染数据-用户状态开关"><a href="#13-项目-用户管理-用户列表-渲染数据-用户状态开关" class="headerlink" title="13-项目-用户管理-用户列表-渲染数据-用户状态开关"></a>13-项目-用户管理-用户列表-渲染数据-用户状态开关</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"用户状态"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"scope.row.mg_state"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-color</span>=<span class="string">"#13ce66"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inactive-color</span>=<span class="string">"#ff4949"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>和创建日期的处理是一样的情况</p></blockquote><ol><li>加 template</li><li>slot-scope</li><li>使用 scope.row.属性</li></ol><h4 id="14-项目-用户管理-用户列表-渲染数据-操作"><a href="#14-项目-用户管理-用户列表-渲染数据-操作" class="headerlink" title="14-项目-用户管理-用户列表-渲染数据-操作"></a>14-项目-用户管理-用户列表-渲染数据-操作</h4><blockquote><p>单元格内容不是 prop 的值的值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tempalte</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"el-icon-edit"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">circle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"danger"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"el-icon-delete"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">circle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"success"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"el-icon-check"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">circle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tempalte</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="15-项目-用户管理-用户列表-分页组件-文档-引入"><a href="#15-项目-用户管理-用户列表-分页组件-文档-引入" class="headerlink" title="15-项目-用户管理-用户列表-分页组件-文档-引入"></a>15-项目-用户管理-用户列表-分页组件-文档-引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页</span></span><br><span class="line"><span class="comment">    @size-change 每页条数改变时</span></span><br><span class="line"><span class="comment">    @current-change 页码改变时 (当前1页 点击2页 )</span></span><br><span class="line"><span class="comment">    current-page 当前显示第几页 页码</span></span><br><span class="line"><span class="comment">    page-sizes 每页条数的不同情况的数组</span></span><br><span class="line"><span class="comment">    layout 附加功能</span></span><br><span class="line"><span class="comment">    total 一共数据的条数</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">size-change</span>=<span class="string">"handleSizeChange"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">current-change</span>=<span class="string">"handleCurrentChange"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:current-page</span>=<span class="string">"currentPage4"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-sizes</span>=<span class="string">"[100, 200, 300, 400]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-size</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layout</span>=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:total</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="16-项目-用户管理-用户列表-分页组件-配置数据"><a href="#16-项目-用户管理-用户列表-分页组件-配置数据" class="headerlink" title="16-项目-用户管理-用户列表-分页组件-配置数据"></a>16-项目-用户管理-用户列表-分页组件-配置数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"page"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">size-change</span>=<span class="string">"handleSizeChange"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">current-change</span>=<span class="string">"handleCurrentChange"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:current-page</span>=<span class="string">"pagenum"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-sizes</span>=<span class="string">"[2, 4,6,8]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-size</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layout</span>=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:total</span>=<span class="string">"total"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>total 后台已经返回</p></blockquote><h4 id="17-项目-用户管理-用户列表-分页组件-分页请求"><a href="#17-项目-用户管理-用户列表-分页组件-分页请求" class="headerlink" title="17-项目-用户管理-用户列表-分页组件-分页请求"></a>17-项目-用户管理-用户列表-分页组件-分页请求</h4><ol><li>点击页码-&gt; 按照新页码发送请求</li><li>点击每页条数 -&gt; 按照新的 pagesize 发送请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">handleSizeChange(val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 按照新pagesize发送请求</span></span><br><span class="line">      <span class="keyword">this</span>.pagenum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.pagesize = val;</span><br><span class="line">      <span class="keyword">this</span>.getTableData();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前2页 -&gt; 点击3 -&gt;触发下面的方法 -&gt;val = 3</span></span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">      <span class="comment">// 按照新页码发送请求</span></span><br><span class="line">      <span class="keyword">this</span>.pagenum = val;</span><br><span class="line">      <span class="comment">// this.pagemnum = 1 this.pagesize=2 发送请求</span></span><br><span class="line">      <span class="comment">// this.pagenum=3 this.pagesize=2 发送请求</span></span><br><span class="line">      <span class="keyword">this</span>.getTableData();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>测试,this.pagenum=1</p></blockquote><h4 id="18-项目-用户管理-用户列表-搜索用户"><a href="#18-项目-用户管理-用户列表-搜索用户" class="headerlink" title="18-项目-用户管理-用户列表-搜索用户"></a>18-项目-用户管理-用户列表-搜索用户</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 搜索-清空时获取所有用户</span></span><br><span class="line">   getAllUsers() &#123;</span><br><span class="line">     <span class="keyword">this</span>.getTableData();</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 搜索用户</span></span><br><span class="line">   searchUser() &#123;</span><br><span class="line">     <span class="keyword">this</span>.pagenum = <span class="number">1</span>;</span><br><span class="line">     <span class="comment">// 按照query关键字搜索</span></span><br><span class="line">     <span class="comment">// query="admin"</span></span><br><span class="line">     <span class="keyword">this</span>.getTableData();</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>不要忘记重置 this.pagenum=1</p></blockquote><h4 id="19-项目-用户管理-用户列表-添加用户-显示对话框"><a href="#19-项目-用户管理-用户列表-添加用户-显示对话框" class="headerlink" title="19-项目-用户管理-用户列表-添加用户-显示对话框"></a>19-项目-用户管理-用户列表-添加用户-显示对话框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">"添加用户"</span> <span class="attr">:visible.sync</span>=<span class="string">"dialogFormVisibleAdd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-position</span>=<span class="string">"left"</span> <span class="attr">label-width</span>=<span class="string">"80px"</span> <span class="attr">:model</span>=<span class="string">"formdata"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"邮箱"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.email"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"电话"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogFormVisibleAdd = false"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"dialogFormVisibleAdd = false"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>点击按钮-&gt;改 bool</li><li>引入对话框</li><li>配置数据(对话框和 form 数据)<blockquote><p>表单数据依据发送 post 请求体</p></blockquote></li></ol><h2 id="Vue-项目-重点-1"><a href="#Vue-项目-重点-1" class="headerlink" title="Vue-项目-重点"></a>Vue-项目-重点</h2><h3 id="day07-项目-重点-1"><a href="#day07-项目-重点-1" class="headerlink" title="day07-项目-重点"></a>day07-项目-重点</h3><h4 id="01-项目-准备-vue-cli-创建项目结构-1"><a href="#01-项目-准备-vue-cli-创建项目结构-1" class="headerlink" title="01-项目-准备-vue-cli 创建项目结构"></a>01-项目-准备-vue-cli 创建项目结构</h4><ol><li>来到项目期望的目录-&gt;打开 cmd</li><li>vue init webpack 项目名<ol><li>是否使用路由 -&gt; Y</li><li>是否使用 ESLint(检查代码规范) -&gt; Y</li><li>for most users</li></ol></li><li>cd 项目名</li><li>npm run dev(默认不会打开浏览器)</li></ol><h4 id="02-项目-准备-项目目录说明-1"><a href="#02-项目-准备-项目目录说明-1" class="headerlink" title="02-项目-准备-项目目录说明"></a>02-项目-准备-项目目录说明</h4><ol><li>build/ webpack 打包的产物/结果</li><li>config/ 配置服务器 -&gt;<ol><li>index.js -&gt; autoOpenBrowser: true, -&gt; npm run dev</li></ol></li><li>.eslintrc:配置 ESLint</li><li>.eslintignore: ESLint 忽略文件</li><li>index.html -&gt; 注意: 不需要引入 build.js</li></ol><h4 id="03-项目-准备-代码规范-自定义指令-lintfix-1"><a href="#03-项目-准备-代码规范-自定义指令-lintfix-1" class="headerlink" title="03-项目-准备-代码规范-自定义指令-lintfix"></a>03-项目-准备-代码规范-自定义指令-lintfix</h4><blockquote><p>ESLint 自动检测 js 代码的规范</p><ol><li>结尾没有;</li><li>必须===</li><li>单引号</li><li>不能有未使用变量</li><li>缩进</li><li>不能有多余空行</li><li>等</li></ol></blockquote><ol><li>package.json-&gt;scripts-&gt;自定义指令</li><li>​ “lintfix”: “eslint –ext .js,.vue src –fix”,</li><li>npm run lintfix(未使用)</li><li>npm run dev(启动开发模式)</li></ol><h4 id="04-项目-准备-element-ui-文档分析-1"><a href="#04-项目-准备-element-ui-文档分析-1" class="headerlink" title="04-项目-准备-element-ui-文档分析"></a>04-项目-准备-element-ui-文档分析</h4><blockquote><p>饿了么 web 开发团队 vue UI 库 Element</p><p>ElementUI 适用于 vue2+项目并且 PC 端项目</p></blockquote><blockquote><p>扩展: vue 移动端 web -&gt; Mint-ui</p><p>PC 端 UI 库: iView</p></blockquote><h4 id="05-项目-准备-element-ui-安装-引入-1"><a href="#05-项目-准备-element-ui-安装-引入-1" class="headerlink" title="05-项目-准备-element-ui-安装-引入"></a>05-项目-准备-element-ui-安装-引入</h4><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">"element-ui"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"element-ui/lib/theme-chalk/index.css"</span>;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure><blockquote><p>可以在任何一个.vue 文件的 template 通过组件名使用组件</p></blockquote><h4 id="06-项目-准备-项目模板简化-调整-1"><a href="#06-项目-准备-项目模板简化-调整-1" class="headerlink" title="06-项目-准备-项目模板简化-调整"></a>06-项目-准备-项目模板简化-调整</h4><blockquote><p>简化模板</p></blockquote><h4 id="07-项目-准备-git-版本控制-1"><a href="#07-项目-准备-git-版本控制-1" class="headerlink" title="07-项目-准备-git-版本控制"></a>07-项目-准备-git-版本控制</h4><blockquote><p>第一次使用 git</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//</span><br><span class="line">git init</span><br><span class="line">//</span><br><span class="line">git add .</span><br><span class="line">//</span><br><span class="line">git commit -m "初始化项目"</span><br><span class="line">// 新建远程仓库-&gt;关联仓库</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>完成一个小功能,提交/推送代码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "注释"</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>gitbash -&gt; git 指令操作-&gt; 任何 cmd 执行 git 指令-&gt;git 是无效指令-&gt; 配置 windows 系统的环境变量</p><ol><li>找到 git 安装位置 2.修改计算技属性-&gt;path 全局变量</li></ol><p>注意: 如果不想改全局 path , 可以在 gitbash 中使用 git</p></blockquote><blockquote><p>每完成一个小功能 提交 commit 一次</p><p>每完成大功能 push 一次</p></blockquote><h4 id="08-项目-准备-git-分支管理-1"><a href="#08-项目-准备-git-分支管理-1" class="headerlink" title="08-项目-准备-git-分支管理"></a>08-项目-准备-git-分支管理</h4><blockquote><p>管理代码-&gt; 合并代码</p></blockquote><blockquote><p>项目 3 个人-&gt; 区分代码是谁写的?-&gt;新建分支</p></blockquote><blockquote><p>每个分支管理自己的代码 有默认分支-&gt;git branch</p></blockquote><blockquote><p>主分支 master:git push</p><p>新建子分支 A-&gt;编写代码-&gt;编码完成-&gt;add/commit -&gt; 提交 A-&gt;</p><p>切换到 master 分支-&gt;合并代码 git merge</p><p>新建子分支 B-&gt;编写代码-&gt;编码完成-&gt;add/commit -&gt; 提交 B-&gt;</p><p>切换到 master 分支-&gt;合并代码 git merge</p></blockquote><blockquote><p>结论: master/ dev-login /dev-users</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 检查分支</span><br><span class="line">git branch</span><br><span class="line">// 新建分支并且切换到该分支</span><br><span class="line">// dev-login用来实现项目登录功能</span><br><span class="line">git checkout -b 分支名(dev-login)</span><br><span class="line">// 接下来所有代码操作都是在dev-login分支上</span><br></pre></td></tr></table></figure><h4 id="09-项目-登录-新建分支-login-组件-配置路由-1"><a href="#09-项目-登录-新建分支-login-组件-配置路由-1" class="headerlink" title="09-项目-登录-新建分支-login 组件-配置路由"></a>09-项目-登录-新建分支-login 组件-配置路由</h4><blockquote><p>在 dev-login 分支上</p></blockquote><ol><li>新建 login.vue 组件</li><li>配置路由</li><li>新建 home.vue 组件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;登录-配置路由&quot;</span><br><span class="line">// 切换master到分支</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure><blockquote><p>在 master 主分支操作(git push)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 合并代码: 把dev-login的代码合并到master分支上</span><br><span class="line">git merge dev-login</span><br><span class="line">// 检查状态</span><br><span class="line">git status</span><br><span class="line">// 如果status有问题</span><br><span class="line">git add .</span><br><span class="line">git coimmit -m ""</span><br><span class="line">// 如果status没问题</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p>推送完, 切换回 dev-login 分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev-login</span><br></pre></td></tr></table></figure><h4 id="10-项目-登录-引入表单组件-1"><a href="#10-项目-登录-引入表单组件-1" class="headerlink" title="10-项目-登录-引入表单组件"></a>10-项目-登录-引入表单组件</h4><p><code>login.vue</code></p><ol><li>找表单组件</li><li>复制代码-&gt;提供数据 formdata:{}</li><li>提供了类名-&gt;测试</li><li>git branch / git status / git add ./ git commit -m “balabala</li></ol><h4 id="11-项目-登录-样式调整-1"><a href="#11-项目-登录-样式调整-1" class="headerlink" title="11-项目-登录-样式调整"></a>11-项目-登录-样式调整</h4><ol><li>assets/css/base.css</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>App.vue</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>login.vue</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#324152</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意: css 样式不是重点!</p><p>扩展: 企业开发, 设计图 psd 会有尺寸/字号/色号…</p></blockquote><h4 id="12-项目-登录-axios-插件-1"><a href="#12-项目-登录-axios-插件-1" class="headerlink" title="12-项目-登录-axios 插件"></a>12-项目-登录-axios 插件</h4><ol><li>npm i axios</li><li>main.js 导入 axios+配置 baseURL</li><li>login.vue-&gt;发送请求</li></ol><h4 id="13-项目-登录-发送登录请求-1"><a href="#13-项目-登录-发送登录请求-1" class="headerlink" title="13-项目-登录-发送登录请求"></a>13-项目-登录-发送登录请求</h4><p><code>login.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">handlelogin() &#123;</span><br><span class="line">     <span class="keyword">this</span>.$http</span><br><span class="line">       .post(<span class="string">`login`</span>, <span class="keyword">this</span>.formdata)</span><br><span class="line">       .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(res);</span><br><span class="line">         <span class="keyword">const</span> &#123;</span><br><span class="line">           data: &#123;</span><br><span class="line">             data,</span><br><span class="line">             meta: &#123; msg, status &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125; = res;</span><br><span class="line">         <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"login---success----"</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"error----"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// eg</span></span><br><span class="line">         <span class="comment">// const &#123;per&#125; = &#123;per:"abc"&#125;</span></span><br><span class="line">         <span class="comment">// console.log(per)</span></span><br><span class="line">         <span class="comment">// const &#123;name:newname&#125; = &#123;name:'abc'&#125;</span></span><br><span class="line">         <span class="comment">// console.log(newname);</span></span><br><span class="line">       &#125;)</span><br><span class="line">       .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(err);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "注释"</span><br></pre></td></tr></table></figure><h4 id="14-项目-登录-引入提示框组件-1"><a href="#14-项目-登录-引入提示框组件-1" class="headerlink" title="14-项目-登录-引入提示框组件"></a>14-项目-登录-引入提示框组件</h4><blockquote><p>username 或者 password 错误 -&gt; 提示框</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$message.error(msg);</span><br></pre></td></tr></table></figure><h4 id="15-项目-登录-登录成功-进入-home-组件-1"><a href="#15-项目-登录-登录成功-进入-home-组件-1" class="headerlink" title="15-项目-登录-登录成功-进入 home 组件"></a>15-项目-登录-登录成功-进入 home 组件</h4><p><code>login.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">  name: <span class="string">"home"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>补充: ES6 对象解构赋值</p><p>数组</p><p>对象(const {per:{name} = {per:{name:’abc’}) -&gt; log(name)</p></blockquote><h4 id="16-项目-登录-简化登录请求代码-async-和-await-1"><a href="#16-项目-登录-简化登录请求代码-async-和-await-1" class="headerlink" title="16-项目-登录-简化登录请求代码-async 和 await"></a>16-项目-登录-简化登录请求代码-async 和 await</h4><blockquote><p>async+await 简化代码:把异步代码变得像同步</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> handlelogin() &#123;</span><br><span class="line">    <span class="comment">// 目前代码: 异步的结果res在一个函数里面获取的</span></span><br><span class="line">    <span class="comment">// 目的: res的获取是同步</span></span><br><span class="line">    <span class="comment">// const res = axios请求返回的结果</span></span><br><span class="line">    <span class="comment">// console.log(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">`login`</span>, <span class="keyword">this</span>.formdata)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>步骤</p></blockquote><ol><li>找到异步代码 前面加 await 接收异步结果 const res</li><li>找到异步代码最近的外层函数 , 前面加 async</li></ol><blockquote><p>目的: 简化代码</p></blockquote><h4 id="17-项目-登录-保存-token-值-1"><a href="#17-项目-登录-保存-token-值-1" class="headerlink" title="17-项目-登录-保存 token 值"></a>17-项目-登录-保存 token 值</h4><blockquote><p>将来要使用用户 token 数据,把正确用户 token 存储-&gt;cookie/session/sessionStorage/localStorage(存储体积大的数据)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"token"</span>, token);</span><br></pre></td></tr></table></figure><blockquote><p>浏览器控制台 application-&gt;storage</p></blockquote><h4 id="18-项目-首页-布局容器-样式调整"><a href="#18-项目-首页-布局容器-样式调整" class="headerlink" title="18-项目-首页-布局容器-样式调整"></a>18-项目-首页-布局容器-样式调整</h4><blockquote><p>引入 UI 库布局容器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">class</span>=<span class="string">"aside"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="19-项目-首页-头部-样式调整-1"><a href="#19-项目-首页-头部-样式调整-1" class="headerlink" title="19-项目-首页-头部-样式调整"></a>19-项目-首页-头部-样式调整</h4><blockquote><p>el-row(行)&gt;el-col(列) 24 份</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b3c0d1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.loginout</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ol><li>找组件</li><li>提供数据</li><li>布局</li><li>样式</li></ol><h3 id="day08-项目-重点-1"><a href="#day08-项目-重点-1" class="headerlink" title="day08-项目-重点"></a>day08-项目-重点</h3><h4 id="01-项目-首页-侧边栏-导航组件-文档-1"><a href="#01-项目-首页-侧边栏-导航组件-文档-1" class="headerlink" title="01-项目-首页-侧边栏-导航组件-文档"></a>01-项目-首页-侧边栏-导航组件-文档</h4><blockquote><p>el-menu router 属性</p><p>el-submenu index 属性</p></blockquote><h4 id="02-项目-首页-侧边栏-引入导航组件-调整-1"><a href="#02-项目-首页-侧边栏-引入导航组件-调整-1" class="headerlink" title="02-项目-首页-侧边栏-引入导航组件-调整"></a>02-项目-首页-侧边栏-引入导航组件-调整</h4><p><code>home.vue侧边栏</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-location"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    用户列表</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="03-项目-首页-进入首页的权限验证-1"><a href="#03-项目-首页-进入首页的权限验证-1" class="headerlink" title="03-项目-首页-进入首页的权限验证"></a>03-项目-首页-进入首页的权限验证</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beforeMount----"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!localStorage.getItem(<span class="string">"token"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">        name: <span class="string">"login"</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果登录了-&gt;渲染 home.vue</p><p>如果没登录-&gt;来到 login.vue-&gt;登录</p></blockquote><h4 id="04-项目-首页-头部-退出功能-1"><a href="#04-项目-首页-头部-退出功能-1" class="headerlink" title="04-项目-首页-头部-退出功能"></a>04-项目-首页-头部-退出功能</h4><blockquote><p>点击头部的退出按钮</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">handleLoginout() &#123;</span><br><span class="line">     <span class="comment">// 1. 清除token</span></span><br><span class="line">     localStorage.clear();</span><br><span class="line">     <span class="comment">// 2. 跳转到login</span></span><br><span class="line">     <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">       name: <span class="string">"login"</span></span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="comment">// 提示</span></span><br><span class="line">     <span class="keyword">this</span>.$message.warning(<span class="string">"退出成功"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="05-项目-首页-合并分支-新建用户分支-1"><a href="#05-项目-首页-合并分支-新建用户分支-1" class="headerlink" title="05-项目-首页-合并分支-新建用户分支"></a>05-项目-首页-合并分支-新建用户分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m ""</span><br><span class="line">// 新功能 新建分支</span><br><span class="line">git checkout -b dev-users</span><br><span class="line">// 接下来 开发新功能</span><br></pre></td></tr></table></figure><h4 id="06-项目-用户管理-用户列表-新建组件-路由配置-1"><a href="#06-项目-用户管理-用户列表-新建组件-路由配置-1" class="headerlink" title="06-项目-用户管理-用户列表-新建组件-路由配置"></a>06-项目-用户管理-用户列表-新建组件-路由配置</h4><ol><li>改标识 index=’users’</li><li>提供容器 router-view(在 home.vue 的 main 位置)</li><li>新建 users.vue</li><li>配置路由(嵌套路由-&gt;在 home 匹配成功之上)</li><li>测试</li></ol><h4 id="07-项目-用户管理-用户列表-面包屑和搜索框-1"><a href="#07-项目-用户管理-用户列表-面包屑和搜索框-1" class="headerlink" title="07-项目-用户管理-用户列表-面包屑和搜索框"></a>07-项目-用户管理-用户列表-面包屑和搜索框</h4><ol><li>el-card 小容器</li><li>面包屑</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator-class</span>=<span class="string">"el-icon-arrow-right"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">:to</span>=<span class="string">"&#123; path: '/' &#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>搜索框</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"searchBox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">class</span>=<span class="string">"searchInput"</span> <span class="attr">placeholder</span>=<span class="string">"请输入内容"</span> <span class="attr">v-model</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">"append"</span> <span class="attr">icon</span>=<span class="string">"el-icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="08-项目-用户管理-用户列表-引入表格组件-1"><a href="#08-项目-用户管理-用户列表-引入表格组件-1" class="headerlink" title="08-项目-用户管理-用户列表-引入表格组件"></a>08-项目-用户管理-用户列表-引入表格组件</h4><blockquote><p>el-table</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"名字222"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"address"</span> <span class="attr">label</span>=<span class="string">"地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>el-table data 属性-&gt;控制的该表格的数据</li><li>el-table-column 控制的是列<br>2.1 label 控制的是表头<br>2.2 prop 控制的单元格的内容</li></ol><h4 id="09-项目-用户管理-用户列表-表头处理-1"><a href="#09-项目-用户管理-用户列表-表头处理-1" class="headerlink" title="09-项目-用户管理-用户列表-表头处理"></a>09-项目-用户管理-用户列表-表头处理</h4><blockquote><p>调整表头 label 7 列</p></blockquote><h4 id="10-项目-用户管理-用户列表-请求数据-1"><a href="#10-项目-用户管理-用户列表-请求数据-1" class="headerlink" title="10-项目-用户管理-用户列表-请求数据"></a>10-项目-用户管理-用户列表-请求数据</h4><blockquote><p>接口文档-&gt;除了登录之外的所有 API 请求-&gt;都需要授权-&gt;设置请求头</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getTableData() &#123;</span><br><span class="line">      <span class="comment">// query查询参数可以为空</span></span><br><span class="line">      <span class="comment">// pagenum当前页码不能为空</span></span><br><span class="line">      <span class="comment">// pagesize每页显示条数不能为空</span></span><br><span class="line">      <span class="comment">// 设置发送请求时的请求头-&gt; axios库 -&gt;找axios中有没有可以设置headers头部的API-&gt;看axios文档</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">      <span class="comment">// console.log(AUTH_TOKEN);</span></span><br><span class="line">      <span class="keyword">this</span>.$http.defaults.headers.common[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(</span><br><span class="line">        <span class="string">`users?query=<span class="subst">$&#123;<span class="keyword">this</span>.query&#125;</span>&amp;pagenum=<span class="subst">$&#123;<span class="keyword">this</span>.pagenum&#125;</span>&amp;pagesize=<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          <span class="keyword">this</span>.pagesize</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="11-项目-用户管理-用户列表-渲染数据-一般数据-1"><a href="#11-项目-用户管理-用户列表-渲染数据-一般数据-1" class="headerlink" title="11-项目-用户管理-用户列表-渲染数据-一般数据"></a>11-项目-用户管理-用户列表-渲染数据-一般数据</h4><blockquote><p>单元格中的数据两类</p></blockquote><ol><li>一般数据 prop 的属性值</li><li>特殊数据 不是 prop 的属性值 而是一些组件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"id"</span> <span class="attr">label</span>=<span class="string">"#"</span> <span class="attr">width</span>=<span class="string">"80"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"username"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"email"</span> <span class="attr">label</span>=<span class="string">"邮箱"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"mobile"</span> <span class="attr">label</span>=<span class="string">"电话"</span> <span class="attr">width</span>=<span class="string">"140"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prop</span>=<span class="string">"create_time"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"创建日期"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-项目-用户管理-用户列表-渲染数据-日期格式处理-1"><a href="#12-项目-用户管理-用户列表-渲染数据-日期格式处理-1" class="headerlink" title="12-项目-用户管理-用户列表-渲染数据-日期格式处理"></a>12-项目-用户管理-用户列表-渲染数据-日期格式处理</h4><blockquote><p>日期需要处理 -&gt; 过滤器 -&gt; 两类(全局 Vue.filter 和局部)三步-&gt;1. v-bind 后面 2{msg | 名字}<br>前提:如果单元格数据不是 prop 的值,此时</p></blockquote><ol><li>给内容外层加 template</li><li>设置 template 的 slot-scope=”scope”</li><li>内部通过 scope.row.属性名访问数据<blockquote><p>注意: “scope”可以随便命名,自动找外层数据 list</p></blockquote></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"创建日期"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内层 list.row 表示的是list的每个对象--&gt;</span></span><br><span class="line">    &#123;scope.row.create_time|fmtdate&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13-项目-用户管理-用户列表-渲染数据-用户状态开关-1"><a href="#13-项目-用户管理-用户列表-渲染数据-用户状态开关-1" class="headerlink" title="13-项目-用户管理-用户列表-渲染数据-用户状态开关"></a>13-项目-用户管理-用户列表-渲染数据-用户状态开关</h4><blockquote><p>el-swtich 开关组件 表单元素 v-model=””</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"用户状态"</span> <span class="attr">width</span>=<span class="string">"120"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前提: 单元格内容是一个组件, 不是porp的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"scope.row.mg_state"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-color</span>=<span class="string">"#13ce66"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inactive-color</span>=<span class="string">"#ff4949"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当通过页面操作 点击开关-&gt;会让 mg_state 的值变化</p></blockquote><h4 id="14-项目-用户管理-用户列表-渲染数据-操作-1"><a href="#14-项目-用户管理-用户列表-渲染数据-操作-1" class="headerlink" title="14-项目-用户管理-用户列表-渲染数据-操作"></a>14-项目-用户管理-用户列表-渲染数据-操作</h4><blockquote><p>如果单元格内容不是 porp, 加 tempalte 设置 slot-scope</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"el-icon-edit"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">circle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"danger"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"el-icon-delete"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">circle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"success"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">"el-icon-check"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">circle</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="15-项目-用户管理-用户列表-分页组件-文档-引入-1"><a href="#15-项目-用户管理-用户列表-分页组件-文档-引入-1" class="headerlink" title="15-项目-用户管理-用户列表-分页组件-文档-引入"></a>15-项目-用户管理-用户列表-分页组件-文档-引入</h4><blockquote><p>分页组件 - 文档</p></blockquote><ol><li>@size-change 每页条数改变时</li><li>@current-change 原来是第一页,点击 2 页</li><li>current-page 当前页码</li><li>total 总条数</li></ol><h4 id="16-项目-用户管理-用户列表-分页组件-配置数据-1"><a href="#16-项目-用户管理-用户列表-分页组件-配置数据-1" class="headerlink" title="16-项目-用户管理-用户列表-分页组件-配置数据"></a>16-项目-用户管理-用户列表-分页组件-配置数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">size-change</span>=<span class="string">"handleSizeChange"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">current-change</span>=<span class="string">"handleCurrentChange"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:current-page</span>=<span class="string">"pagenum"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-sizes</span>=<span class="string">"[2, 4, 6, 8]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-size</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layout</span>=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:total</span>=<span class="string">"total"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>res 中有 total this.total=data.total</p></blockquote><h4 id="17-项目-用户管理-用户列表-分页组件-分页请求-1"><a href="#17-项目-用户管理-用户列表-分页组件-分页请求-1" class="headerlink" title="17-项目-用户管理-用户列表-分页组件-分页请求"></a>17-项目-用户管理-用户列表-分页组件-分页请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">handleSizeChange(val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="line">      <span class="keyword">this</span>.pagenum = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">this</span>.pagesize = val;</span><br><span class="line">      <span class="keyword">this</span>.getTableData();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前1页 -&gt; 点击2页 -&gt; 获取第二页数据</span></span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">      <span class="comment">// 根据新页码发送请求</span></span><br><span class="line">      <span class="keyword">this</span>.pagenum = val;</span><br><span class="line">      <span class="keyword">this</span>.getTableData();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>pagenum1 pagesize2 -&gt; 获取数据库中前两条数据<br>pagenum=3 pagesize=3 -&gt; 获取数据库中第 7/8/9 条数据</p></blockquote><h4 id="18-项目-用户管理-用户列表-搜索用户-1"><a href="#18-项目-用户管理-用户列表-搜索用户-1" class="headerlink" title="18-项目-用户管理-用户列表-搜索用户"></a>18-项目-用户管理-用户列表-搜索用户</h4><ol><li>搜索用户</li><li>清空<blockquote><p>不要忘记 this.pagenum=1</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 清空时获取所有用户</span></span><br><span class="line">    getAllUsers() &#123;</span><br><span class="line">      <span class="comment">// 此时 query查询参数已经是''</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.getTableData();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 搜索用户</span></span><br><span class="line">    searchUser() &#123;</span><br><span class="line">      <span class="comment">// 输入框组件-&gt;在组件文本清空时-&gt;做一些事儿</span></span><br><span class="line">      <span class="comment">// query数据默认 ''</span></span><br><span class="line">      <span class="keyword">this</span>.pagenum = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">this</span>.getTableData();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="19-项目-用户管理-用户列表-添加用户-显示对话框-1"><a href="#19-项目-用户管理-用户列表-添加用户-显示对话框-1" class="headerlink" title="19-项目-用户管理-用户列表-添加用户-显示对话框"></a>19-项目-用户管理-用户列表-添加用户-显示对话框</h4><blockquote><p>点击按钮-&gt;打开对话框</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">"收货地址"</span> <span class="attr">:visible.sync</span>=<span class="string">"dialogFormVisibleAdd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-position</span>=<span class="string">"left"</span> <span class="attr">label-width</span>=<span class="string">"80px"</span> <span class="attr">:model</span>=<span class="string">"formdata"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"邮箱"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.email"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"电话"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formdata.mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogFormVisibleAdd = false"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"dialogFormVisibleAdd = false"</span></span></span><br><span class="line"><span class="tag">      &gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>复制代码 2. 提供/配置属性或者方法 3. 使用</li></ol></blockquote><h3 id="day09-项目-重点"><a href="#day09-项目-重点" class="headerlink" title="day09-项目-重点"></a>day09-项目-重点</h3><h4 id="01-项目-用户管理-用户列表-添加用户-发送请求"><a href="#01-项目-用户管理-用户列表-添加用户-发送请求" class="headerlink" title="01-项目-用户管理-用户列表-添加用户-发送请求"></a>01-项目-用户管理-用户列表-添加用户-发送请求</h4><blockquote><p>点击确定-&gt;发送请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> addUser() &#123;</span><br><span class="line">     <span class="comment">// 发送请求</span></span><br><span class="line">     <span class="comment">// this.formdata?</span></span><br><span class="line">     <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">`users`</span>, <span class="keyword">this</span>.formdata);</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">     <span class="keyword">const</span> &#123;</span><br><span class="line">       meta: &#123; msg, status &#125;</span><br><span class="line">     &#125; = res.data;</span><br><span class="line">     <span class="keyword">if</span> (status === <span class="number">201</span>) &#123;</span><br><span class="line">       <span class="comment">// 关闭对话框</span></span><br><span class="line">       <span class="keyword">this</span>.dialogFormVisibleAdd = <span class="literal">false</span>;</span><br><span class="line">       <span class="comment">// 更新表格</span></span><br><span class="line">       <span class="keyword">this</span>.getTableData();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>不要忘记清空,打开对话框,this.formdata={}</p></blockquote><h4 id="02-项目-用户管理-用户列表-删除用户-打开确认框"><a href="#02-项目-用户管理-用户列表-删除用户-打开确认框" class="headerlink" title="02-项目-用户管理-用户列表-删除用户-打开确认框"></a>02-项目-用户管理-用户列表-删除用户-打开确认框</h4><blockquote><p>引入确认框</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$confirm(<span class="string">"是否把我删掉?"</span>, <span class="string">"提示"</span>, &#123;</span><br><span class="line">  confirmButtonText: <span class="string">"确定"</span>,</span><br><span class="line">  cancelButtonText: <span class="string">"取消"</span>,</span><br><span class="line">  type: <span class="string">"warning"</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.success(<span class="string">"删除成功"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.info(<span class="string">"取消删除"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>点击确定-&gt;执行.then<br>点击取消-&gt;执行.catch</p></blockquote><h4 id="03-项目-用户管理-用户列表-删除用户-处理响应"><a href="#03-项目-用户管理-用户列表-删除用户-处理响应" class="headerlink" title="03-项目-用户管理-用户列表-删除用户-处理响应"></a>03-项目-用户管理-用户列表-删除用户-处理响应</h4><blockquote><p>点击确定-&gt;发送 delete 请求<br>注意:async 位置,距离异步最近的外层函数</p></blockquote><h4 id="04-项目-用户管理-用户列表-编辑用户-显示对话框"><a href="#04-项目-用户管理-用户列表-编辑用户-显示对话框" class="headerlink" title="04-项目-用户管理-用户列表-编辑用户-显示对话框"></a>04-项目-用户管理-用户列表-编辑用户-显示对话框</h4><blockquote><p>点击操作中的编辑按钮-&gt;显示对话框<br>使用的是之前的 formdata</p></blockquote><h4 id="05-项目-用户管理-用户列表-编辑用户-显示编辑数据"><a href="#05-项目-用户管理-用户列表-编辑用户-显示编辑数据" class="headerlink" title="05-项目-用户管理-用户列表-编辑用户-显示编辑数据"></a>05-项目-用户管理-用户列表-编辑用户-显示编辑数据</h4><blockquote><p>在打开对话框时,</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.formdata = user;</span><br></pre></td></tr></table></figure><h4 id="06-项目-用户管理-用户列表-编辑用户-发送请求"><a href="#06-项目-用户管理-用户列表-编辑用户-发送请求" class="headerlink" title="06-项目-用户管理-用户列表-编辑用户-发送请求"></a>06-项目-用户管理-用户列表-编辑用户-发送请求</h4><blockquote><p>点击对话框的确定按钮-&gt;发送请求<br>注意: 发请求的参数 id-&gt;来源是上一步赋值的结果 this.formdata=user</p></blockquote><h4 id="07-项目-用户管理-用户列表-修改用户状态"><a href="#07-项目-用户管理-用户列表-修改用户状态" class="headerlink" title="07-项目-用户管理-用户列表-修改用户状态"></a>07-项目-用户管理-用户列表-修改用户状态</h4><blockquote><p>el-switch v-model 绑定 -&gt; 视图操作 View-&gt;被绑定数据变化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> changeState(user) &#123;</span><br><span class="line">      <span class="comment">// uid-&gt;user</span></span><br><span class="line">      <span class="comment">// type -&gt; user</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.put(</span><br><span class="line">        <span class="string">`users/<span class="subst">$&#123;user.id&#125;</span>/state/<span class="subst">$&#123;user.mg_state&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="08-项目-用户管理-用户列表-分配角色-功能演示"><a href="#08-项目-用户管理-用户列表-分配角色-功能演示" class="headerlink" title="08-项目-用户管理-用户列表-分配角色-功能演示"></a>08-项目-用户管理-用户列表-分配角色-功能演示</h4><blockquote><p>每个用户都有角色<br>每个角色能做的事儿是不同的,<br>可以做的操作称之为权限<br>给用户分配角色</p></blockquote><ol><li>点按钮-&gt;打开对话框</li><li>显示用户信息(用户名+角色)</li><li>点击确定-&gt;修改用户角色</li></ol><h4 id="09-项目-用户管理-用户列表-分配角色-显示对话框"><a href="#09-项目-用户管理-用户列表-分配角色-显示对话框" class="headerlink" title="09-项目-用户管理-用户列表-分配角色-显示对话框"></a>09-项目-用户管理-用户列表-分配角色-显示对话框</h4><blockquote><p>点击操作中的 check 按钮-&gt;打开对话框</p></blockquote><h4 id="10-项目-用户管理-用户列表-分配角色-显示对话框-下拉框"><a href="#10-项目-用户管理-用户列表-分配角色-显示对话框-下拉框" class="headerlink" title="10-项目-用户管理-用户列表-分配角色-显示对话框-下拉框"></a>10-项目-用户管理-用户列表-分配角色-显示对话框-下拉框</h4><blockquote><ol><li>默认显示请选中-&gt;当 v-model 的数据值 selectVal 和 option 的请选择的 value 值相等, 此时显示请选择</li><li>当选择某个 option 时,v-model 的数据的值等于选中的 label 的 value 值</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=<span class="string">"selectVal"</span> placeholder=<span class="string">"请选择角色"</span>&gt;</span><br><span class="line">           &lt;el-option label=<span class="string">"请选择"</span> :value=<span class="string">"1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">           &lt;el-option</span><br><span class="line">             v-for="(item,i) in roles"</span><br><span class="line">             :key="item.id"</span><br><span class="line">             :label="item.roleName"</span><br><span class="line">             :value="item.id"</span><br><span class="line">           &gt;&lt;/el-option&gt;</span><br><span class="line"></span><br><span class="line">           &lt;!-- 将来获取角色名数据-&gt;v-for遍历 --&gt;</span><br><span class="line">         &lt;/el-select&gt;</span><br></pre></td></tr></table></figure><h4 id="11-项目-用户管理-用户列表-分配角色-显示当前用户角色"><a href="#11-项目-用户管理-用户列表-分配角色-显示当前用户角色" class="headerlink" title="11-项目-用户管理-用户列表-分配角色-显示当前用户角色"></a>11-项目-用户管理-用户列表-分配角色-显示当前用户角色</h4><blockquote><p>角色 id [30,31,34,39,40]<br>每个用户都有角色 v-model=”searchVal”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(<span class="string">`users/<span class="subst">$&#123;user.id&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// console.log(res2);</span></span><br><span class="line"><span class="comment">// 给下拉框v-model绑定的selectVal赋值</span></span><br><span class="line"><span class="keyword">this</span>.selectVal = res2.data.data.rid;</span><br></pre></td></tr></table></figure><h4 id="12-项目-用户管理-用户列表-分配角色-修改用户角色"><a href="#12-项目-用户管理-用户列表-分配角色-修改用户角色" class="headerlink" title="12-项目-用户管理-用户列表-分配角色-修改用户角色"></a>12-项目-用户管理-用户列表-分配角色-修改用户角色</h4><blockquote><p>点击确定-&gt;发送请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> setRole() &#123;</span><br><span class="line">    <span class="comment">// currUserId</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.put(<span class="string">`users/<span class="subst">$&#123;<span class="keyword">this</span>.currUserId&#125;</span>/role`</span>, &#123;</span><br><span class="line">      rid: <span class="keyword">this</span>.selectVal</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// console.log(res);</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      meta: &#123; msg, status &#125;</span><br><span class="line">    &#125; = res.data;</span><br><span class="line">    <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 关闭</span></span><br><span class="line">      <span class="keyword">this</span>.dialogFormVisibleRole = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="13-项目-用户管理-用户列表-合并分支-推送"><a href="#13-项目-用户管理-用户列表-合并分支-推送" class="headerlink" title="13-项目-用户管理-用户列表-合并分支-推送"></a>13-项目-用户管理-用户列表-合并分支-推送</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在分支上</span><br><span class="line">git status</span><br><span class="line">git checkout master</span><br><span class="line">// 在主分支</span><br><span class="line">git status</span><br><span class="line">git merge dev-users</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="14-项目-权限管理-新建分支-功能演示"><a href="#14-项目-权限管理-新建分支-功能演示" class="headerlink" title="14-项目-权限管理-新建分支-功能演示"></a>14-项目-权限管理-新建分支-功能演示</h4><ol><li>git checkout -b dev-rights<blockquote><p>功能拆分</p><ol><li>权限列表</li><li>角色列表<br>面包屑+表格(展开+check 按钮)</li></ol></blockquote></li></ol><h4 id="15-项目-权限管理-权限列表-新建组件-路由配置"><a href="#15-项目-权限管理-权限列表-新建组件-路由配置" class="headerlink" title="15-项目-权限管理-权限列表-新建组件-路由配置"></a>15-项目-权限管理-权限列表-新建组件-路由配置</h4><blockquote><p>rights.vue 组件</p></blockquote><h4 id="16-项目-权限管理-权限列表-自定义面包屑组件"><a href="#16-项目-权限管理-权限列表-自定义面包屑组件" class="headerlink" title="16-项目-权限管理-权限列表-自定义面包屑组件"></a>16-项目-权限管理-权限列表-自定义面包屑组件</h4><blockquote><p>props 传值</p></blockquote><ol><li>声明 props:[数据 a]</li><li>赋值 使用组件时 <abc a="值"></abc></li><li>使用 {a}<blockquote><p>重复代码-&gt;封装组件</p></blockquote></li></ol><h4 id="17-项目-权限管理-权限列表-获取权限列表数据"><a href="#17-项目-权限管理-权限列表-获取权限列表数据" class="headerlink" title="17-项目-权限管理-权限列表-获取权限列表数据"></a>17-项目-权限管理-权限列表-获取权限列表数据</h4><blockquote><p>url 中 type=list<br>在当前组件中,没有设置头部,所以此时无法获取数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">this</span>.$http.defaults.headers.common[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(<span class="string">`rights/list`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  data,</span><br><span class="line">  meta: &#123; msg, status &#125;</span><br><span class="line">&#125; = res.data;</span><br><span class="line"><span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.list = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18-项目-权限管理-权限列表-axios-封装插件"><a href="#18-项目-权限管理-权限列表-axios-封装插件" class="headerlink" title="18-项目-权限管理-权限列表-axios-封装插件"></a>18-项目-权限管理-权限列表-axios-封装插件</h4><ol><li>把头部设置封装起来</li><li>main.js 有 5 行代码是 axios 的</li><li>把 5 行代码提取为 js 模块</li><li>把 axios 变成了 Vue 插件</li><li>在 main.js 中导入插件并且使用<blockquote><p>任何请求头部和 baseUrl 不需要写</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HttpServer = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">HttpServer.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  axios.defaults.baseURL = <span class="string">"http://localhost:8888/api/private/v1/"</span>;</span><br><span class="line">  <span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">  axios.defaults.headers.common[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line">  Vue.prototype.$http = axios;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HttpServer;</span><br></pre></td></tr></table></figure><h4 id="19-项目-权限管理-权限列表-axios-拦截器统一设置请求头"><a href="#19-项目-权限管理-权限列表-axios-拦截器统一设置请求头" class="headerlink" title="19-项目-权限管理-权限列表-axios-拦截器统一设置请求头"></a>19-项目-权限管理-权限列表-axios-拦截器统一设置请求头</h4><p>// fetch.js 拦截<br>// axios.js 拦截<br>// jq \$.ajax 拦截</p><blockquote><p>axios 请求拦截器</p></blockquote><ol><li>所有请求发起之前,都会自动先进入拦截器</li><li>在拦截器筛选请求 config.url=?</li><li>config.headers[]=token</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请求拦截器被触发了-----"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有请求发起之后,进行筛选,请求标识是不是login</span></span><br><span class="line">    <span class="comment">// 如果标识是login,不要头部-&gt;请求继续发起</span></span><br><span class="line">    <span class="comment">// 当请求标识不是login,先设置头部,再发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (config.url !== <span class="string">"login"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> AUTH_TOKEN = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">      <span class="comment">// axios.defaults.headers.common["Authorization"] = AUTH_TOKEN;</span></span><br><span class="line">      config.headers[<span class="string">"Authorization"</span>] = AUTH_TOKEN;</span><br><span class="line">      <span class="comment">// var per = &#123;&#125;;</span></span><br><span class="line">      <span class="comment">// per["Authorization"] = "token";</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.$http.get(url) -&gt; 请求拦截处理 -&gt;发请求</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>结果: 之后再也不用写请求头了</p></blockquote><h3 id="day10-项目-重点"><a href="#day10-项目-重点" class="headerlink" title="day10-项目-重点"></a>day10-项目-重点</h3><h4 id="01-项目-权限管理-权限列表-表格展示"><a href="#01-项目-权限管理-权限列表-表格展示" class="headerlink" title="01-项目-权限管理-权限列表-表格展示"></a>01-项目-权限管理-权限列表-表格展示</h4><blockquote><p>把 user.vue 的 el-table-&gt;修改<br>el-table-column 属性 type=”index” 序号从 1 自增</p></blockquote><h4 id="02-项目-权限管理-权限列表-表格展示-层级显示"><a href="#02-项目-权限管理-权限列表-表格展示-层级显示" class="headerlink" title="02-项目-权限管理-权限列表-表格展示-层级显示"></a>02-项目-权限管理-权限列表-表格展示-层级显示</h4><blockquote><p>res 的数据中 level 是字符’0’</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"层级"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"scope.row.level==='0'"</span>&gt;</span>一级<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"scope.row.level==='1'"</span>&gt;</span>二级<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"scope.row.level==='2'"</span>&gt;</span>三级<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="03-项目-权限管理-角色列表-新建组件-配置路由"><a href="#03-项目-权限管理-角色列表-新建组件-配置路由" class="headerlink" title="03-项目-权限管理-角色列表-新建组件-配置路由"></a>03-项目-权限管理-角色列表-新建组件-配置路由</h4><blockquote><p>新建 roles.vue 组件+配置路由+home.vue 改标识</p></blockquote><h4 id="04-项目-权限管理-角色列表-面包屑和添加按钮"><a href="#04-项目-权限管理-角色列表-面包屑和添加按钮" class="headerlink" title="04-项目-权限管理-角色列表-面包屑和添加按钮"></a>04-项目-权限管理-角色列表-面包屑和添加按钮</h4><blockquote><p>自定义面包屑+el-button</p></blockquote><h4 id="05-项目-权限管理-角色列表-获取角色列表数据"><a href="#05-项目-权限管理-角色列表-获取角色列表数据" class="headerlink" title="05-项目-权限管理-角色列表-获取角色列表数据"></a>05-项目-权限管理-角色列表-获取角色列表数据</h4><blockquote><p>methods 中 getRoles()</p></blockquote><h4 id="06-项目-权限管理-角色列表-表格展示"><a href="#06-项目-权限管理-角色列表-表格展示" class="headerlink" title="06-项目-权限管理-角色列表-表格展示"></a>06-项目-权限管理-角色列表-表格展示</h4><blockquote><p>把 user.vue 复制-&gt;修改</p></blockquote><h4 id="07-项目-权限管理-角色列表-表格展示-展开行功能分析"><a href="#07-项目-权限管理-角色列表-表格展示-展开行功能分析" class="headerlink" title="07-项目-权限管理-角色列表-表格展示-展开行功能分析"></a>07-项目-权限管理-角色列表-表格展示-展开行功能分析</h4><blockquote><ol><li>所有行列布局-&gt;for 嵌套-&gt;v-for</li><li>el-row&gt;(el-col&gt;el-tag&gt;+el-col&gt;(el-row&gt;(el-col&gt;el-tag+el-col&gt;el-tag)))</li><li>有颜色的标签 el-tag</li><li>4:20</li></ol></blockquote><h4 id="08-项目-权限管理-角色列表-表格展示-展开行-一级权限"><a href="#08-项目-权限管理-角色列表-表格展示-展开行-一级权限" class="headerlink" title="08-项目-权限管理-角色列表-表格展示-展开行-一级权限"></a>08-项目-权限管理-角色列表-表格展示-展开行-一级权限</h4><blockquote><p>最外层 v-for 的位置是最外层 el-row</p></blockquote><h4 id="09-项目-权限管理-角色列表-表格展示-展开行-二级三级权限"><a href="#09-项目-权限管理-角色列表-表格展示-展开行-二级三级权限" class="headerlink" title="09-项目-权限管理-角色列表-表格展示-展开行-二级三级权限"></a>09-项目-权限管理-角色列表-表格展示-展开行-二级三级权限</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"level1"</span> <span class="attr">v-for</span>=<span class="string">"(item1,i) in scope.row.children"</span> <span class="attr">:key</span>=<span class="string">"item1.id"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">closable</span> <span class="attr">type</span>=<span class="string">"success"</span>&gt;</span>&#123;item1.authName&#125;<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"level2"</span> <span class="attr">v-for</span>=<span class="string">"(item2,i) in item1.children"</span> <span class="attr">:key</span>=<span class="string">"item2.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">closable</span> <span class="attr">type</span>=<span class="string">"warning"</span>&gt;</span>&#123;item2.authName&#125;<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">          <span class="attr">closable</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"(item3,i) in item2.children"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"item3.id"</span></span></span><br><span class="line"><span class="tag">          &gt;</span>&#123;item3.authName&#125;<span class="tag">&lt;/<span class="name">el-tag</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最里层的 v-for 写在 el-tag 位置</p></blockquote><h4 id="10-项目-权限管理-角色列表-展开行-样式调整-处理无权限"><a href="#10-项目-权限管理-角色列表-展开行-样式调整-处理无权限" class="headerlink" title="10-项目-权限管理-角色列表-展开行-样式调整-处理无权限"></a>10-项目-权限管理-角色列表-展开行-样式调整-处理无权限</h4><ol><li>closeable el-tag X</li><li>i 标签 class=””<br>3.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">v-if</span>=<span class="string">"scope.row.children.length===0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>未分配权限<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11-项目-权限管理-角色列表-展开行-取消权限"><a href="#11-项目-权限管理-角色列表-展开行-取消权限" class="headerlink" title="11-项目-权限管理-角色列表-展开行-取消权限"></a>11-项目-权限管理-角色列表-展开行-取消权限</h4><blockquote><p>点击 el-tag 的 X-&gt;取消权限<br>@close=”deleRights(scope.row,itemX)”</p></blockquote><h4 id="12-项目-权限管理-角色列表-展开行-取消权限-优化"><a href="#12-项目-权限管理-角色列表-展开行-取消权限-优化" class="headerlink" title="12-项目-权限管理-角色列表-展开行-取消权限-优化"></a>12-项目-权限管理-角色列表-展开行-取消权限-优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消权限</span></span><br><span class="line"><span class="keyword">async</span> deleRights(role, rights) &#123;</span><br><span class="line">  <span class="comment">// console.log(role, rights);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// roleId-&gt;角色id</span></span><br><span class="line">  <span class="comment">// rightId-&gt;权限id</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.delete(</span><br><span class="line">    <span class="string">`roles/<span class="subst">$&#123;role.id&#125;</span>/rights/<span class="subst">$&#123;rights.id&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    meta: &#123; msg, status &#125;,</span><br><span class="line">    data</span><br><span class="line">  &#125; = res.data;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 提示</span></span><br><span class="line">    <span class="keyword">this</span>.$message.success(msg);</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    <span class="comment">// this.getRoles();</span></span><br><span class="line">    <span class="comment">// 会返回当前角色的剩余权限</span></span><br><span class="line">    <span class="comment">// 只更新当前的角色权限</span></span><br><span class="line">    role.children = data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>取消成功后,res 返回的是当前觉得 rest 权限</p></blockquote><h4 id="13-项目-权限管理-角色列表-修改权限-显示对话框"><a href="#13-项目-权限管理-角色列表-修改权限-显示对话框" class="headerlink" title="13-项目-权限管理-角色列表-修改权限-显示对话框"></a>13-项目-权限管理-角色列表-修改权限-显示对话框</h4><blockquote><p>点击操作中 check 按钮-&gt;打开对话框</p></blockquote><h4 id="14-项目-权限管理-角色列表-修改权限-树形结构-文档分析"><a href="#14-项目-权限管理-角色列表-修改权限-树形结构-文档分析" class="headerlink" title="14-项目-权限管理-角色列表-修改权限-树形结构-文档分析"></a>14-项目-权限管理-角色列表-修改权限-树形结构-文档分析</h4><blockquote><ol><li>data 数据源</li><li>node-key 每个节点唯一标识</li><li>default-expanded-keys[] 默认展开</li><li>default-checked-keys [] 默认选中</li><li>props 配置选项{label/children}</li></ol></blockquote><blockquote><p>前提:res 数据格式是树形结构</p></blockquote><h4 id="15-项目-权限管理-角色列表-修改权限-树形结构-配置数据"><a href="#15-项目-权限管理-角色列表-修改权限-树形结构-配置数据" class="headerlink" title="15-项目-权限管理-角色列表-修改权限-树形结构-配置数据"></a>15-项目-权限管理-角色列表-修改权限-树形结构-配置数据</h4><blockquote><ol><li>treelist 每个权限的唯一标识 id-&gt;node-key=”id”</li><li>label=”authName”</li><li>pid-&gt;上一/二级节点 id</li></ol></blockquote><h4 id="16-项目-权限管理-角色列表-修改权限-树形结构-显示已有权限"><a href="#16-项目-权限管理-角色列表-修改权限-树形结构-显示已有权限" class="headerlink" title="16-项目-权限管理-角色列表-修改权限-树形结构-显示已有权限"></a>16-项目-权限管理-角色列表-修改权限-树形结构-显示已有权限</h4><ol><li>默认展开 default-expand-all</li><li>默认选中<br>2.1 获取当前角色有的权限数据 role.children<br>2.2 遍历 forEach<br>2.3 arrCheck=temp2<blockquote><p>注意:只加最里层的 id</p></blockquote></li></ol><h4 id="17-项目-权限管理-角色列表-修改权限-树形结构-分配权限-分析"><a href="#17-项目-权限管理-角色列表-修改权限-树形结构-分配权限-分析" class="headerlink" title="17-项目-权限管理-角色列表-修改权限-树形结构-分配权限-分析"></a>17-项目-权限管理-角色列表-修改权限-树形结构-分配权限-分析</h4><blockquote><ol><li>获取全选 id 数组</li><li>获取半选 id 数组</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">this</span>.$refs.treeDom.getCheckedKeys();</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取半选节点id -&gt; getHalfCheckedKeys</span></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="keyword">this</span>.$refs.treeDom.getHalfCheckedKeys();</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><blockquote><p>ref 操作 dom</p><ol><li>给要操作的标签设置 ref 值</li><li>在 js 中 this.\$refs.ref 值.js 方法()</li></ol></blockquote><h4 id="18-项目-权限管理-角色列表-修改权限-树形结构-分配权限-实现"><a href="#18-项目-权限管理-角色列表-修改权限-树形结构-分配权限-实现" class="headerlink" title="18-项目-权限管理-角色列表-修改权限-树形结构-分配权限-实现"></a>18-项目-权限管理-角色列表-修改权限-树形结构-分配权限-实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">`roles/<span class="subst">$&#123;<span class="keyword">this</span>.currRoleId&#125;</span>/rights`</span>, &#123;</span><br><span class="line">  rids: arr.join(<span class="string">","</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><ol><li>…arr 或者 obj</li><li>rids:以,分割的 id 列表 arr arr.join(“,”)<br>并不是所有数据都是提供好的</li></ol></blockquote><h4 id="19-项目-首页-侧边栏-动态导航"><a href="#19-项目-首页-侧边栏-动态导航" class="headerlink" title="19-项目-首页-侧边栏-动态导航"></a>19-项目-首页-侧边栏-动态导航</h4><blockquote><p>ESLint 关闭-&gt;build/webpack.base.conf.js-&gt;42 行-&gt;注释<br>效果: 每个不同角色的用户-&gt;登录-&gt;显示拥有权限的对应导航</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getMenus() &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(<span class="string">`menus`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    meta: &#123; msg, status &#125;,</span><br><span class="line">    data</span><br><span class="line">  &#125; = res.data;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.menus = data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">:index</span>=<span class="string">"item1.order+''"</span> <span class="attr">v-for</span>=<span class="string">"(item1,i) in menus"</span> <span class="attr">:key</span>=<span class="string">"item1.id"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-location"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item1.authName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:index</span>=<span class="string">"item2.path+''"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item2,i) in item1.children"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"item2.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item2.authName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果: 在实现之后的功能时,路由配置的 path 不能随便写了!</p></blockquote><h4 id="20-项目-效果演示-不同角色用户登录-显示对应权限"><a href="#20-项目-效果演示-不同角色用户登录-显示对应权限" class="headerlink" title="20-项目-效果演示-不同角色用户登录-显示对应权限"></a>20-项目-效果演示-不同角色用户登录-显示对应权限</h4><blockquote><ol><li>不同用户登录后,权限不一样</li><li>超管登录只能权限管理</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 21-项目-不同角色用户登录-显示对应权限-导航守卫</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 标识改变-&gt;路由配置-&gt;配置生效前-&gt;守卫-&gt;next()-&gt;配置生效</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt; 1. to-&gt;要去的</span></span><br><span class="line"><span class="string">&gt; 2. from-&gt;当前</span></span><br><span class="line"><span class="string">&gt; 3. next next()-&gt;继续执行之前的配置</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果要去的是login -&gt; next()</span></span><br><span class="line">  <span class="keyword">if</span> (to.name === <span class="string">"login"</span>) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果要去的不是login -&gt;</span></span><br><span class="line">    <span class="comment">//  2.1 !token -&gt; 去登录</span></span><br><span class="line">    <span class="keyword">const</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">      <span class="comment">//提示</span></span><br><span class="line">      <span class="comment">// this.$message.warning("请先登录!");-&gt;</span></span><br><span class="line">      Message.warning(<span class="string">"请先登录!"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  this.$router.push(&#123;name:'login'&#125;)</span></span><br><span class="line">      <span class="comment">// $router</span></span><br><span class="line">      router.push(&#123;</span><br><span class="line">        name: <span class="string">"login"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  2.2 token  -&gt; next()</span></span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(to, from);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// next方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意: router/index.js 中 this 不是 Vue 实例</p><ol><li>this.\$router-&gt;rotuer</li><li>提示框-&gt;单独导入 Message</li><li>之前的 home.vue 的 beforeMount 不用写了</li></ol></blockquote><h4 id="22-项目-权限管理-合并分支-推送-新建分支"><a href="#22-项目-权限管理-合并分支-推送-新建分支" class="headerlink" title="22-项目-权限管理-合并分支-推送-新建分支"></a>22-项目-权限管理-合并分支-推送-新建分支</h4><h3 id="day11-项目-重点"><a href="#day11-项目-重点" class="headerlink" title="day11-项目-重点"></a>day11-项目-重点</h3><h4 id="01-项目-商品管理-功能演示-新建分支"><a href="#01-项目-商品管理-功能演示-新建分支" class="headerlink" title="01-项目-商品管理-功能演示-新建分支"></a>01-项目-商品管理-功能演示-新建分支</h4><ol><li>列表-&gt;添加商品</li><li>分类参数-&gt;动态+静态参数编辑</li><li>商品分类-&gt;表格展开后的树形结构</li></ol><h4 id="02-项目-商品管理-商品列表-显示-提前准备"><a href="#02-项目-商品管理-商品列表-显示-提前准备" class="headerlink" title="02-项目-商品管理-商品列表-显示(提前准备)"></a>02-项目-商品管理-商品列表-显示(提前准备)</h4><blockquote><p>02-其他资源/goodslist.vue</p></blockquote><ol><li>面包屑名称 cus-bread</li><li>fmtdate</li><li>loading 删掉</li><li>配置路由(path 不能随便写了)</li></ol><h4 id="03-项目-商品管理-添加商品-新建组件-配置路由-布局"><a href="#03-项目-商品管理-添加商品-新建组件-配置路由-布局" class="headerlink" title="03-项目-商品管理-添加商品-新建组件-配置路由-布局"></a>03-项目-商品管理-添加商品-新建组件-配置路由-布局</h4><ol><li>新建组件 goodsadd.vue</li><li>配置路由<blockquote><p>path 可以随便写</p></blockquote></li><li><el-alert class="alert" title="添加商品信息" type="info" center="" show-icon=""></el-alert></li></ol><h4 id="04-项目-商品管理-添加商品-步骤条"><a href="#04-项目-商品管理-添加商品-步骤条" class="headerlink" title="04-项目-商品管理-添加商品-步骤条"></a>04-项目-商品管理-添加商品-步骤条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-steps</span> <span class="attr">:active</span>=<span class="string">"active*1"</span> <span class="attr">align-center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-step</span> <span class="attr">title</span>=<span class="string">"基本信息"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-step</span> <span class="attr">title</span>=<span class="string">"商品参数"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-step</span> <span class="attr">title</span>=<span class="string">"商品属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-step</span> <span class="attr">title</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-step</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-step</span> <span class="attr">title</span>=<span class="string">"商品内容"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-step</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-steps</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>active 控制的是当前完成了第几步</p></blockquote><h4 id="05-项目-商品管理-添加商品-tabs-标签"><a href="#05-项目-商品管理-添加商品-tabs-标签" class="headerlink" title="05-项目-商品管理-添加商品-tabs 标签"></a>05-项目-商品管理-添加商品-tabs 标签</h4><blockquote><p>标签页:表单元素 v-model 绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tabs</span> <span class="attr">v-model</span>=<span class="string">"active"</span> <span class="attr">tab-position</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"1"</span> <span class="attr">label</span>=<span class="string">"基本信息"</span>&gt;</span>基本信息----<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"2"</span> <span class="attr">label</span>=<span class="string">"商品参数"</span>&gt;</span>商品参数----<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"3"</span> <span class="attr">label</span>=<span class="string">"商品属性"</span>&gt;</span>商品属性----<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"4"</span> <span class="attr">label</span>=<span class="string">"商品图片"</span>&gt;</span>商品图片----<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"5"</span> <span class="attr">label</span>=<span class="string">"商品内容"</span>&gt;</span>商品内容----<span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="06-项目-商品管理-添加商品-基本信息-绑定表单数据"><a href="#06-项目-商品管理-添加商品-基本信息-绑定表单数据" class="headerlink" title="06-项目-商品管理-添加商品-基本信息-绑定表单数据"></a>06-项目-商品管理-添加商品-基本信息-绑定表单数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"1"</span> <span class="attr">label</span>=<span class="string">"基本信息"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"商品名称"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.goods_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"商品价格"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.goods_price"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"商品重量"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.goods_weight"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"商品数量"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.goods_number"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"商品分类"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">form: &#123;</span><br><span class="line">      goods_name: "",</span><br><span class="line">      goods_cat: "",</span><br><span class="line">      goods_price: "",</span><br><span class="line">      goods_number: "",</span><br><span class="line">      goods_weight: "",</span><br><span class="line">      goods_introduce: "",</span><br><span class="line">      pics: "",</span><br><span class="line">      attrs: ""</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="07-项目-商品管理-添加商品-基本信息-级联选择器-文档-引入"><a href="#07-项目-商品管理-添加商品-基本信息-级联选择器-文档-引入" class="headerlink" title="07-项目-商品管理-添加商品-基本信息-级联选择器-文档-引入"></a>07-项目-商品管理-添加商品-基本信息-级联选择器-文档-引入</h4><blockquote><p>级联选择器表单元素 v-model=”数组”</p><ol><li>[1,2,3]</li><li>当选择某个 label-&gt;[value 值]</li></ol></blockquote><h4 id="08-项目-商品管理-添加商品-基本信息-级联选择器-获取分类数据"><a href="#08-项目-商品管理-添加商品-基本信息-级联选择器-获取分类数据" class="headerlink" title="08-项目-商品管理-添加商品-基本信息-级联选择器-获取分类数据"></a>08-项目-商品管理-添加商品-基本信息-级联选择器-获取分类数据</h4><blockquote><p>const res = await this.\$http.get(<code>categories?type=3</code>);<br>:props=”{label/value/children}”</p></blockquote><h4 id="09-项目-商品管理-添加商品-基本信息-级联选择器-配置数据"><a href="#09-项目-商品管理-添加商品-基本信息-级联选择器-配置数据" class="headerlink" title="09-项目-商品管理-添加商品-基本信息-级联选择器-配置数据"></a>09-项目-商品管理-添加商品-基本信息-级联选择器-配置数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-cascader</span></span></span><br><span class="line"><span class="tag">  <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">expand-trigger</span>=<span class="string">"hover"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:options</span>=<span class="string">"options"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:props</span>=<span class="string">"defaultProp"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"selectedOptions"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">"handleChange"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getGoodsCate() &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(<span class="string">`categories?type=3`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        meta: &#123; msg, status &#125;,</span><br><span class="line">        data</span><br><span class="line">      &#125; = res.data;</span><br><span class="line">      <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// label/value/children默认值是同名字符串</span><br><span class="line">defaultProp: &#123;</span><br><span class="line">        label: "cat_name",</span><br><span class="line">        value: "cat_id"</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="10-项目-商品管理-添加商品-商品参数-获取动态参数数据"><a href="#10-项目-商品管理-添加商品-商品参数-获取动态参数数据" class="headerlink" title="10-项目-商品管理-添加商品-商品参数-获取动态参数数据"></a>10-项目-商品管理-添加商品-商品参数-获取动态参数数据</h4><blockquote><p>选择第二个 tab&amp;&amp;三级分类-&gt;发送请求(获取动态参数)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(</span><br><span class="line">  <span class="string">`categories/<span class="subst">$&#123;<span class="keyword">this</span>.selectedOptions[<span class="number">2</span>]&#125;</span>/attributes?sel=many`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="11-项目-商品管理-添加商品-商品参数-复选框组-文档-引入"><a href="#11-项目-商品管理-添加商品-商品参数-复选框组-文档-引入" class="headerlink" title="11-项目-商品管理-添加商品-商品参数-复选框组-文档-引入"></a>11-项目-商品管理-添加商品-商品参数-复选框组-文档-引入</h4><blockquote><p>el-checkbox-group-&gt;v-model=”[]” 表单元素</p></blockquote><h4 id="12-项目-商品管理-添加商品-商品参数-配置复选框"><a href="#12-项目-商品管理-添加商品-商品参数-配置复选框" class="headerlink" title="12-项目-商品管理-添加商品-商品参数-配置复选框"></a>12-项目-商品管理-添加商品-商品参数-配置复选框</h4><blockquote><p>处理数据 arrDy-&gt;item.attr_Vals””-&gt;[]</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:label</span>=<span class="string">"item1.attr_name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(item1,i) in arrDy"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"item1.attr_id"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">"item1.attr_vals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span></span></span><br><span class="line"><span class="tag">      <span class="attr">border</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">"item2"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(item2,i) in item1.attr_vals"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"i"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.arrDy.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  item.attr_vals =</span><br><span class="line">    item.attr_vals.trim().length === <span class="number">0</span> ? [] : item.attr_vals.trim().split(<span class="string">","</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(item.attr_vals);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><ol><li>border</li><li>v-model=”item1.attr_val”</li></ol></blockquote><h4 id="13-项目-商品管理-添加商品-商品属性-获取静态参数数据"><a href="#13-项目-商品管理-添加商品-商品属性-获取静态参数数据" class="headerlink" title="13-项目-商品管理-添加商品-商品属性-获取静态参数数据"></a>13-项目-商品管理-添加商品-商品属性-获取静态参数数据</h4><blockquote><p>点击第三个 tab &amp;&amp; 分类数组长度===3-&gt;发送 only 请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.active === <span class="string">"3"</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.get(</span><br><span class="line">    <span class="string">`categories/<span class="subst">$&#123;<span class="keyword">this</span>.selectedOptions[<span class="number">2</span>]&#125;</span>/attributes?sel=only`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    meta: &#123; msg, status &#125;,</span><br><span class="line">    data</span><br><span class="line">  &#125; = res.data;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.arrStatic = data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arrStatic);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-项目-商品管理-添加商品-商品属性-布局"><a href="#14-项目-商品管理-添加商品-商品属性-布局" class="headerlink" title="14-项目-商品管理-添加商品-商品属性-布局"></a>14-项目-商品管理-添加商品-商品属性-布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"3"</span> <span class="attr">label</span>=<span class="string">"商品属性"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label</span>=<span class="string">"item.attr_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item,i) in arrStatic"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"item.attr_id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"item.attr_vals"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="15-项目-商品管理-添加商品-图片上传-文档-引入"><a href="#15-项目-商品管理-添加商品-图片上传-文档-引入" class="headerlink" title="15-项目-商品管理-添加商品-图片上传-文档-引入"></a>15-项目-商品管理-添加商品-图片上传-文档-引入</h4><blockquote><ol><li>action 全路径网址</li><li>headers 请求头</li></ol></blockquote><h4 id="16-项目-商品管理-添加商品-图片上传-配置属性"><a href="#16-项目-商品管理-添加商品-图片上传-配置属性" class="headerlink" title="16-项目-商品管理-添加商品-图片上传-配置属性"></a>16-项目-商品管理-添加商品-图片上传-配置属性</h4><blockquote><ol><li>action 全路径网址</li><li>headers 请求头<br>之前的只针对 axios</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片上传方法</span></span><br><span class="line">    handleRemove(file, fileList) &#123;</span><br><span class="line">      <span class="comment">// console.log("remove----");</span></span><br><span class="line">      <span class="built_in">console</span>.log(file);</span><br><span class="line">      <span class="comment">//  临时路径</span></span><br><span class="line">      file.response.data.tmp_path;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSuccess(response, file, fileList) &#123;</span><br><span class="line">      <span class="comment">// console.log("success----");</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">      <span class="comment">// response.data.tmp_path -&gt; 临时路径</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="17-项目-商品管理-添加商品-商品内容-富文本编辑器"><a href="#17-项目-商品管理-添加商品-商品内容-富文本编辑器" class="headerlink" title="17-项目-商品管理-添加商品-商品内容-富文本编辑器"></a>17-项目-商品管理-添加商品-商品内容-富文本编辑器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">name</span>=<span class="string">"5"</span> <span class="attr">label</span>=<span class="string">"商品内容"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"addGoods()"</span>&gt;</span>添加商品<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">quill-editor</span> <span class="attr">class</span>=<span class="string">"quill"</span> <span class="attr">v-model</span>=<span class="string">"form.goods_introduce"</span>&gt;</span><span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"quill/dist/quill.core.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"quill/dist/quill.snow.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"quill/dist/quill.bubble.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; quillEditor &#125; <span class="keyword">from</span> <span class="string">"vue-quill-editor"</span>;</span><br></pre></td></tr></table></figure><blockquote><ol><li>quill-editor 是表单元素 v-model</li><li>SPA 和 SSR<br>扩展: vue 适合 SPA-&gt;缺点之一:不利于 SEO-&gt;服务端渲染 SSR&lt;-Nuxt.js</li></ol></blockquote><h4 id="18-项目-商品管理-添加商品-表单数据分析"><a href="#18-项目-商品管理-添加商品-表单数据分析" class="headerlink" title="18-项目-商品管理-添加商品-表单数据分析"></a>18-项目-商品管理-添加商品-表单数据分析</h4><blockquote><ol><li>goods_cat [1,2,3]-&gt;”1,2,3”</li><li>pics:[{pic:临时路径}]</li><li>attrs:[{attr_id:?,attr_value:?}]<br>来源 arrDy 和 arrStatic 中每个对象的 attr_id 和 attr_vals</li></ol></blockquote><h4 id="19-项目-商品管理-添加商品-表单数据处理-分类和图片"><a href="#19-项目-商品管理-添加商品-表单数据处理-分类和图片" class="headerlink" title="19-项目-商品管理-添加商品-表单数据处理-分类和图片"></a>19-项目-商品管理-添加商品-表单数据处理-分类和图片</h4><blockquote><ol><li>this.form.goods_cat = this.selectedOptions.join(“,”);</li></ol></blockquote><blockquote><ol start="2"><li>处理 this.form.pics</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">handleRemove(file, fileList) &#123;</span><br><span class="line">      <span class="comment">// findIndex(ES6数组新增API)</span></span><br><span class="line">      <span class="keyword">const</span> Index = <span class="keyword">this</span>.form.pics.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(item);// item.pic</span></span><br><span class="line">        <span class="keyword">return</span> item.pic === file.response.data.tmp_path;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.form.pics.splice(Index, <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.form.pics);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSuccess(response, file, fileList) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// response.data.tmp_path -&gt; 临时路径</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.form.pics.push(&#123;</span><br><span class="line">        pic: response.data.tmp_path</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.form.pics);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="20-项目-商品管理-添加商品-表单数据处理-attrs"><a href="#20-项目-商品管理-添加商品-表单数据处理-attrs" class="headerlink" title="20-项目-商品管理-添加商品-表单数据处理-attrs"></a>20-项目-商品管理-添加商品-表单数据处理-attrs</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">this</span>.arrDy.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">attr_id</span>: item.attr_id, <span class="attr">attr_value</span>: item.attr_vals &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="keyword">this</span>.arrStatic.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">attr_id</span>: item.attr_id, <span class="attr">attr_value</span>: item.attr_vals &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.form.attrs = [...arr1, ...arr2];</span><br></pre></td></tr></table></figure><h4 id="21-项目-商品管理-添加商品-发送请求-回到商品列表页"><a href="#21-项目-商品管理-添加商品-发送请求-回到商品列表页" class="headerlink" title="21-项目-商品管理-添加商品-发送请求-回到商品列表页"></a>21-项目-商品管理-添加商品-发送请求-回到商品列表页</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(<span class="string">`goods`</span>, <span class="keyword">this</span>.form);</span><br></pre></td></tr></table></figure><blockquote><p>回到列表</p></blockquote><blockquote><p>解决了 bug</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.active === <span class="string">"2"</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.arrDy = [];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.arrStatic = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="day12-项目-重点"><a href="#day12-项目-重点" class="headerlink" title="day12-项目-重点"></a>day12-项目-重点</h3><h4 id="01-项目-商品管理-分类参数-新建组件-路由配置"><a href="#01-项目-商品管理-分类参数-新建组件-路由配置" class="headerlink" title="01-项目-商品管理-分类参数-新建组件-路由配置"></a>01-项目-商品管理-分类参数-新建组件-路由配置</h4><blockquote><p>分类参数.vue<br>级联+tabs+动态 el-tag 编辑(删除/添加)<br>cateparams.vue</p></blockquote><h4 id="02-项目-商品管理-分类参数-动态参数-布局-配置级联选择器"><a href="#02-项目-商品管理-分类参数-动态参数-布局-配置级联选择器" class="headerlink" title="02-项目-商品管理-分类参数-动态参数-布局-配置级联选择器"></a>02-项目-商品管理-分类参数-动态参数-布局-配置级联选择器</h4><blockquote><p>goodsadd.vue 的级联完全一样<br>仅显示最后一级 label :show-all-levels=”false”</p></blockquote><h4 id="03-项目-商品管理-分类参数-动态参数-获取动态参数数据"><a href="#03-项目-商品管理-分类参数-动态参数-获取动态参数数据" class="headerlink" title="03-项目-商品管理-分类参数-动态参数-获取动态参数数据"></a>03-项目-商品管理-分类参数-动态参数-获取动态参数数据</h4><blockquote><p>点击级联选择器且是三级分类-&gt;获取动态参数数组</p></blockquote><h4 id="04-项目-商品管理-分类参数-动态参数-表格渲染"><a href="#04-项目-商品管理-分类参数-动态参数-表格渲染" class="headerlink" title="04-项目-商品管理-分类参数-动态参数-表格渲染"></a>04-项目-商品管理-分类参数-动态参数-表格渲染</h4><blockquote><p>goodslist 的 el-table-&gt;修改</p></blockquote><h4 id="05-项目-商品管理-分类参数-动态参数-动态编辑-文档-引入"><a href="#05-项目-商品管理-分类参数-动态参数-动态编辑-文档-引入" class="headerlink" title="05-项目-商品管理-分类参数-动态参数-动态编辑-文档-引入"></a>05-项目-商品管理-分类参数-动态参数-动态编辑-文档-引入</h4><blockquote><p>el-tag 文档-&gt;动态编辑<br>标签+css+data+js 三个方法</p></blockquote><h4 id="06-项目-商品管理-分类参数-动态参数-动态编辑-配置-完成"><a href="#06-项目-商品管理-分类参数-动态参数-动态编辑-配置-完成" class="headerlink" title="06-项目-商品管理-分类参数-动态参数-动态编辑-配置-完成"></a>06-项目-商品管理-分类参数-动态参数-动态编辑-配置-完成</h4><blockquote><p>把动态 tag 编辑的 dynamicTags 换成自己的 arrDy 中每个对象的 attr_vals</p></blockquote><h4 id="07-项目-商品管理-分类参数-动态参数-动态编辑-发送请求"><a href="#07-项目-商品管理-分类参数-动态参数-动态编辑-发送请求" class="headerlink" title="07-项目-商品管理-分类参数-动态参数-动态编辑-发送请求"></a>07-项目-商品管理-分类参数-动态参数-动态编辑-发送请求</h4><blockquote><p>删除/添加属性值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http.put(</span><br><span class="line">  <span class="string">`categories/<span class="subst">$&#123;<span class="keyword">this</span>.selectedOptions[<span class="number">2</span>]&#125;</span>/attributes/<span class="subst">$&#123;obj.attr_id&#125;</span></span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    attr_name: obj.attr_name,</span><br><span class="line">    attr_sel: obj.attr_sel,</span><br><span class="line">    <span class="comment">// 以,分割的属性值列表 [].join(",")</span></span><br><span class="line">    attr_vals: obj.attr_vals.join(<span class="string">","</span>)</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="08-项目-商品管理-分类参数-静态参数-布局-获取数据"><a href="#08-项目-商品管理-分类参数-静态参数-布局-获取数据" class="headerlink" title="08-项目-商品管理-分类参数-静态参数-布局-获取数据"></a>08-项目-商品管理-分类参数-静态参数-布局-获取数据</h4><blockquote><ol><li>级联选择器@change-&gt;获取动态 or 静态</li><li>el-tabs@tab-click-&gt;获取动态 or 静态<br>getDyOrStatic()</li></ol></blockquote><h4 id="09-项目-商品管理-商品分类-组件-提前准备-路由配置"><a href="#09-项目-商品管理-商品分类-组件-提前准备-路由配置" class="headerlink" title="09-项目-商品管理-商品分类-组件(提前准备)-路由配置"></a>09-项目-商品管理-商品分类-组件(提前准备)-路由配置</h4><blockquote><p>02-其他资源/goodscate.vue(商品分类组件)-&gt;cus-bread</p></blockquote><ol><li>添加分类</li><li>表格的列展开后类树形结构</li></ol><h4 id="10-项目-商品管理-商品分类-element-tree-grid-文档-引入"><a href="#10-项目-商品管理-商品分类-element-tree-grid-文档-引入" class="headerlink" title="10-项目-商品管理-商品分类-element-tree-grid-文档-引入"></a>10-项目-商品管理-商品分类-element-tree-grid-文档-引入</h4><blockquote><p>el-table 展开之后没有类树形结构</p></blockquote><ol><li>不用 element-&gt;不好</li><li>找一个 element 这个插件的插件 x-table(扩展 el-table)-&gt;替换了整个 el-table</li><li>找 el-table 的插件-&gt;替换 el-table-column-&gt;推荐-&gt;xxx-table-column<blockquote><p>npm-&gt;element-tree-grid</p></blockquote></li></ol><h4 id="11-项目-商品管理-商品分类-element-tree-grid-配置"><a href="#11-项目-商品管理-商品分类-element-tree-grid-配置" class="headerlink" title="11-项目-商品管理-商品分类-element-tree-grid-配置"></a>11-项目-商品管理-商品分类-element-tree-grid-配置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree-grid</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prop</span>=<span class="string">"cat_name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"分类名称"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">treeKey</span>=<span class="string">"cat_id"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parentKey</span>=<span class="string">"cat_pid"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">childKey</span>=<span class="string">"children"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">levelKey</span>=<span class="string">"cat_level"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-tree-grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-项目-商品管理-商品分类-添加分类-打开对话框"><a href="#12-项目-商品管理-商品分类-添加分类-打开对话框" class="headerlink" title="12-项目-商品管理-商品分类-添加分类-打开对话框"></a>12-项目-商品管理-商品分类-添加分类-打开对话框</h4><blockquote><p>获取 type=2 前两级分类</p></blockquote><h4 id="13-项目-商品管理-商品分类-添加分类-发送请求"><a href="#13-项目-商品管理-商品分类-添加分类-发送请求" class="headerlink" title="13-项目-商品管理-商品分类-添加分类-发送请求"></a>13-项目-商品管理-商品分类-添加分类-发送请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.selectedOptions.length === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.form.cat_level = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.form.cat_pid = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 二级分类-&gt;如果级联的数组长度1-&gt;cat_pid=上一级id(this.selectoption[0]) cat_level=1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.selectedOptions.length === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.form.cat_level = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.form.cat_pid = <span class="keyword">this</span>.selectedOptions[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三级分类-&gt;如果级联的数组长度2-&gt;cat_pid=上一级id(this.selectoption[1]) cat_level=2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.selectedOptions.length === <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.form.cat_level = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">this</span>.form.cat_pid = <span class="keyword">this</span>.selectedOptions[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-项目-合并分支-推送分支-新建分支"><a href="#14-项目-合并分支-推送分支-新建分支" class="headerlink" title="14-项目-合并分支-推送分支-新建分支"></a>14-项目-合并分支-推送分支-新建分支</h4><blockquote><p>dev-order</p></blockquote><h4 id="15-项目-订单管理-订单列表-组件-提前准备-路由配置"><a href="#15-项目-订单管理-订单列表-组件-提前准备-路由配置" class="headerlink" title="15-项目-订单管理-订单列表-组件(提前准备)-路由配置"></a>15-项目-订单管理-订单列表-组件(提前准备)-路由配置</h4><blockquote><p>02-其他资源/order.vue 订单组件<br>给级联提供省市区的数据</p></blockquote><h4 id="16-项目-订单管理-订单列表-省市区引入"><a href="#16-项目-订单管理-订单列表-省市区引入" class="headerlink" title="16-项目-订单管理-订单列表-省市区引入"></a>16-项目-订单管理-订单列表-省市区引入</h4><blockquote><p>省市区(联动)<br>客户端:网站 web/安卓/苹果-&gt;省市区-&gt;.json 或者.js<br>在.vue 中可以使用.js 模块<br>比如:wow.js iscroll.js swiper.js 等<br>vue-swiper.js</p></blockquote><h4 id="17-项目-数据统计-数据报表-Echarts-文档-引入"><a href="#17-项目-数据统计-数据报表-Echarts-文档-引入" class="headerlink" title="17-项目-数据统计-数据报表-Echarts-文档-引入"></a>17-项目-数据统计-数据报表-Echarts-文档-引入</h4><blockquote><p>数据可视化:</p></blockquote><ol><li>flash 画图</li><li>H5-&gt;canvas 标签(画布)<blockquote><p>3D 建模</p></blockquote></li><li>D3.js</li><li>three.js</li><li>WebGL</li><li>Echarts.js(百度的一个产品)<blockquote><p>mounted(){方法调用}</p></blockquote></li></ol><h4 id="18-项目-数据统计-数据报表-Echarts-配置"><a href="#18-项目-数据统计-数据报表-Echarts-配置" class="headerlink" title="18-项目-数据统计-数据报表-Echarts-配置"></a>18-项目-数据统计-数据报表-Echarts-配置</h4><blockquote><p>url-&gt; “reports/type/1”</p></blockquote><h4 id="19-项目-优化-加载动画"><a href="#19-项目-优化-加载动画" class="headerlink" title="19-项目-优化-加载动画"></a>19-项目-优化-加载动画</h4><blockquote><p>动画-&gt;img src=”xxoo.gif”<br>element-&gt;el-table v-loading=”loading”</p></blockquote><h4 id="20-项目-优化-拦截器统一处理响应"><a href="#20-项目-优化-拦截器统一处理响应" class="headerlink" title="20-项目-优化-拦截器统一处理响应"></a>20-项目-优化-拦截器统一处理响应</h4><blockquote><p>统一处理 status 非 200 和 201 的情况-&gt;提示框</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      meta: &#123; msg, status &#125;</span><br><span class="line">    &#125; = response.data;</span><br><span class="line">    <span class="comment">// 统一处理status非200和201的情况-&gt;提示框</span></span><br><span class="line">    <span class="keyword">if</span> (status !== <span class="number">200</span> &amp;&amp; status !== <span class="number">201</span>) &#123;</span><br><span class="line">      Message.warning(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="day13-项目-重点"><a href="#day13-项目-重点" class="headerlink" title="day13-项目-重点"></a>day13-项目-重点</h3><h4 id="00-反馈-补充"><a href="#00-反馈-补充" class="headerlink" title="00-反馈-补充"></a>00-反馈-补充</h4><ol><li>分类参数.vue-&gt;动态 tag 编辑-&gt;el-input-&gt;同时变<br>思路 1:绑定不同的数据-&gt;动态 v-model=”obj[scope.$index]”赋值<br>思路 2:只打开一个</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el-table @expand-change="fn"</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (expandedRows.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">  expandedRows.shift();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>补充:侧边栏刷新时-&gt;回到之前激活状态<blockquote><p>我是谁?w 我在哪?我要做什么?<br>侧边栏 home.vue+el-menu(属性方法事件)+记录刷新前点击时路由参数(name/path 等)<br>el-menu :dafault-active=”\$route.name”<br>前提 路由配置中 name 和 path 中</p></blockquote></li></ol><h4 id="01-项目-补充-nextTick"><a href="#01-项目-补充-nextTick" class="headerlink" title="01-项目-补充-nextTick"></a>01-项目-补充-nextTick</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 操作dom的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.txt.innerText);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="02-项目-打包-演示"><a href="#02-项目-打包-演示" class="headerlink" title="02-项目-打包-演示"></a>02-项目-打包-演示</h4><blockquote><p>打包前:npm run dev<br>vuecli-&gt;目录-&gt;.vue 文件+.css+.js 等<br>打包后:项目目录(.html+.css+.js+字体)</p></blockquote><blockquote><p>webpack:提供了打包的指令<br>来到项目所在目录-&gt;npm run build</p></blockquote><blockquote><p>产物<br>dist/(index.html+static)<br>static/(js+css+font)<br>js/</p></blockquote><ol><li>app.xxx.js 自己的 js 代码(组件自己的 js+公共的 js)</li><li>manifest.js 缓存</li><li>vender.xxx.js 第三方的 js<blockquote><p>目前.map 不用关心<br>小问题 vender.xxx.js 很大-&gt;1.99M<br>app.xxx.js-&gt;149K</p></blockquote></li></ol><blockquote><p>项目服务器:把 dist 目录放在服务器路径下</p></blockquote><h4 id="03-项目-优化-路由懒加载"><a href="#03-项目-优化-路由懒加载" class="headerlink" title="03-项目-优化-路由懒加载"></a>03-项目-优化-路由懒加载</h4><blockquote><p>目前效果<br>任何组件显示-&gt;network-&gt;加载了所有资源(app.xxx.js 等)</p></blockquote><blockquote><p>处理之后(router/index.js)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Login = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/components/login.vue"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>重新打包 npm run build<br>js/</p></blockquote><ol><li>app.xx.js -&gt;公共的 js 代码-.变小</li><li>序号.xx.js -&gt; 每个组件自己的 js 代码</li></ol><blockquote><p>页面中显示某个组件-&gt;只加载了对应的.js-&gt;SPA 首屏加载变快</p></blockquote><h4 id="04-项目-优化-cdn-配置"><a href="#04-项目-优化-cdn-配置" class="headerlink" title="04-项目-优化-cdn-配置"></a>04-项目-优化-cdn-配置</h4><blockquote><p>vender.xxx.js-&gt;961K<br>第三方.js 在本地 vender.xx.js 中-&gt;CDN(网址加载)</p></blockquote><ol><li>找 cdn 资源(官网+bootcdn 网站)-&gt;index.html(打包前)多了好多链接</li><li>配置 cdn(告诉加载来源 cdn)-&gt;webpack-&gt;修改 webpack 配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    // jquery: 'jQuery'</span><br><span class="line"></span><br><span class="line">    // key-&gt;js的包名-&gt;package.json</span><br><span class="line">    // value-&gt;该包暴露给全局作用域内的变量名</span><br><span class="line">    "vue": "Vue",</span><br><span class="line">    "vue-router": "VueRouter",</span><br><span class="line">    "element-ui": "ELEMENT",</span><br><span class="line">    "axios": "axios",</span><br><span class="line">    "moment": "moment",</span><br><span class="line">    "echarts": "echarts"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>改变量名–&gt;改为上一步的全局变量名<br>3.1 main.js Vue+ELEMENT(改) + element 样式文件引入(删除)<br>3.2 router/index.js-&gt;VueRouter<br>3.3 报表/echarts</li></ol><blockquote><p>4 npm run build<br>对比 vender.xx.js 的大小 961K-&gt;19.6K</p></blockquote><h4 id="05-项目-打包-优化后"><a href="#05-项目-打包-优化后" class="headerlink" title="05-项目-打包(优化后)"></a>05-项目-打包(优化后)</h4><blockquote><p>npm run build-&gt;<br>index.html-&gt;用户访问的首页<br>js/</p></blockquote><ol><li>app.xx.js-&gt;自己的公共 js</li><li>序号.xx.js-&gt;组件的对应 js</li><li>vender.xx.js-&gt;第三方的 js<br>css/-&gt;希望每个组件的 css 代码在当前组件内生效<blockquote><p>在.vue 文件的 style 开始标签位置设置 scoped</p></blockquote></li><li>.map 文件作用:用来调试-&gt;用户不需要-&gt;在打包时通过 webpack 配置<blockquote><p>在 webpack.prod.conf.js-&gt;注释掉</p></blockquote></li><li>随机数问题 app.xx.js<blockquote><p>1 版本打包-&gt;1.xx1.js-&gt;用户浏览网页-&gt;2 版本打包-&gt;1.xx2.js-&gt;用户浏览网页 1.xx2.js</p></blockquote></li><li>dist/-&gt;放在项目上线服务器 index.html <a href="http://www.xxoo.com/index.html" target="_blank" rel="noopener">www.xxoo.com/index.html</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jsonp原理</title>
      <link href="/keaichong.github.io/2019/02/04/Jsonp%E5%8E%9F%E7%90%86/"/>
      <url>/keaichong.github.io/2019/02/04/Jsonp%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="jsonp-工作原理"><a href="#jsonp-工作原理" class="headerlink" title="jsonp 工作原理"></a>jsonp 工作原理</h2><p>利用 script 标签可以跨域,让服务器端返回可以执行的 Javascript 函数,参数为要回发的数据,jsonp 只能发 get 请求</p><h2 id="相关概念-同源"><a href="#相关概念-同源" class="headerlink" title="相关概念(同源)"></a>相关概念(同源)</h2><p>同源策略是浏览器的一种安全策略，所谓同源是指域名(com/cn/localhost)，协议(http/https)，端口完全相同，只有同源的地址才可以相互通过 AJAX 的方式请求。</p><p>浏览器默认情况下，不允许发送跨域的 ajax 请求</p><p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为跨域请求</p><h2 id="jsonp-前端代码"><a href="#jsonp-前端代码" class="headerlink" title="jsonp 前端代码"></a>jsonp 前端代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮，发送跨域的请求，获取到结果</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 创建script标签</span></span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  <span class="comment">// 2. 设置src</span></span><br><span class="line">  script.src = <span class="string">"http://localhost:3000/query?callback=song"</span>;</span><br><span class="line">  <span class="comment">// 3. 把script添加到body</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">  <span class="comment">//执行script中的代码</span></span><br><span class="line">  <span class="comment">//相当于</span></span><br><span class="line">  <span class="comment">// &lt;script&gt;song(data相应数据)&lt;/\script&gt;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//被调用  这种方式需要前后端配合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">song</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">//拿到跨域请求返回的数据 自己根据需要进行后续处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 设置静态资源</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">"public"</span>)));</span><br><span class="line"><span class="keyword">let</span> user = <span class="built_in">require</span>(<span class="string">"./db"</span>);</span><br><span class="line"><span class="comment">// 设置一个路由，返回js代码</span></span><br><span class="line"><span class="comment">// jsonp 的接口</span></span><br><span class="line">app.get(<span class="string">"/query"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置请求头</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/javascript"</span>);</span><br><span class="line">  <span class="comment">// 输出的样式  fn(&#123;....&#125;);</span></span><br><span class="line">  <span class="comment">// 接收查询字符串中的callback</span></span><br><span class="line">  <span class="keyword">let</span> cb = req.query.callback;</span><br><span class="line">  <span class="keyword">let</span> jsonStr = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">  <span class="comment">// jsonString  ---&gt;  [&#123;&#125;,&#123;&#125;];</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回一个调用函数名 把查询字符串的值用模板字符串设为返回的函数名,这样前端就可以通过调用函数拿到script标签返回的数据 cb是函数名song  jsonstr是实参</span></span><br><span class="line">  <span class="keyword">let</span> javascriptString = <span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;jsonStr&#125;</span>);`</span>;</span><br><span class="line">  <span class="comment">//发送了一个调用方式给前端</span></span><br><span class="line">  res.send(javascriptString);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"开始监听：3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装原生ajax</title>
      <link href="/keaichong.github.io/2019/02/03/%E5%B0%81%E8%A3%85%E5%8E%9F%E7%94%9Fajax/"/>
      <url>/keaichong.github.io/2019/02/03/%E5%B0%81%E8%A3%85%E5%8E%9F%E7%94%9Fajax/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-ajax"><a href="#什么是-ajax" class="headerlink" title="什么是 ajax"></a>什么是 ajax</h2><ol><li>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</li><li>Ajax = 异步 JavaScript 和 XML（标准通用标记语言的子集）。</li><li>Ajax 是一种用于创建快速动态网页的技术。</li><li>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。<a id="more"></a></li></ol><h2 id="ajax-基本步骤"><a href="#ajax-基本步骤" class="headerlink" title="ajax 基本步骤"></a>ajax 基本步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器提供一个XMLHttpRquest类型对象,代理浏览器发送请求 并获取一部分数据</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//请求行 请求方式和路径</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"/big-data"</span>);</span><br><span class="line"><span class="comment">//post请求还要设置请求头中content-type</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="comment">//发送请求 请求体 post有请求体 get没有请求体</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//注册事件</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//响应体下载完成 打印响应体内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.status);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简单封装-ajax"><a href="#简单封装-ajax" class="headerlink" title="简单封装 ajax"></a>简单封装 ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求方式  路径  请求数据(请求体&amp;查询字符串 对象形式)  回调==用于获取服务器返回的响应体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">method, path, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把用户传入请求方式转为大写</span></span><br><span class="line">  method = method.toUpperCase();</span><br><span class="line">  <span class="comment">//用空数组接收 构造post请求体&amp;get查询字符串</span></span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="comment">//属性=值&amp;属性=值</span></span><br><span class="line">    arr.push(key + <span class="string">"="</span> + data[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过数组join方法用&amp;符号连接为字符串 例:?id=2&amp;name=zs</span></span><br><span class="line">  str = arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="comment">//判断请求方式</span></span><br><span class="line">  <span class="comment">//get 在路径后拼接上查询字符串</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">    path = path + (path.includes(<span class="string">"?"</span>) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>) + str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//建立xhr对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="comment">//创建http请求</span></span><br><span class="line">  xhr.open(method, path, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//判断 是否发送请求体</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="comment">//post 要设置请求头中content-type请求体内容类型</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">    <span class="comment">//发送请求体</span></span><br><span class="line">    xhr.send(str);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//注册事件 接收服务器返回结果</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// try 尝试着执行代码 catch 如果执行出错，会被catch 捕获到错误</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//解析返回数据 响应体 把json格式字符串转为 对象</span></span><br><span class="line">      <span class="comment">//接受的不是json格式字符串再json.parse转换时候  会报错 catch捕获错误 继续执行</span></span><br><span class="line">      <span class="comment">// JSON格式，属性和字符串类型，必须使用双引号</span></span><br><span class="line">      <span class="comment">// res.send('&#123;"name": "zs", "age": 18 &#125;');</span></span><br><span class="line">      <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">      <span class="comment">//第四个参数 调用回调函数</span></span><br><span class="line">      <span class="comment">// 作用: 把obj 传给第四个参数(回调函数)接收 不然无法接受响应体</span></span><br><span class="line">      callback(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用封装的-ajax-方法"><a href="#调用封装的-ajax-方法" class="headerlink" title="调用封装的 ajax 方法"></a>调用封装的 ajax 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ajax(</span><br><span class="line">  <span class="string">"post"</span>,</span><br><span class="line">  <span class="string">"/add1"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"lisi"</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//data 是传过来的obj this.responseText</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我接下来要做的事"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery常用api二</title>
      <link href="/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%BA%8C/"/>
      <url>/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h2><ul><li>jQuery 操作元素的尺寸</li><li>jQuery 操作元素的位置</li><li>jQuery 事件操作（注册、移除、事件委托、触发）</li></ul><h2 id="jQuery-操作元素的尺寸"><a href="#jQuery-操作元素的尺寸" class="headerlink" title="jQuery 操作元素的尺寸"></a>jQuery 操作元素的尺寸</h2><h3 id="width-和-height-方法"><a href="#width-和-height-方法" class="headerlink" title="width 和 height 方法"></a>width 和 height 方法</h3><blockquote><p>操作的大小仅仅是内容部分</p></blockquote><ul><li><p>设置：</p><ul><li>语法：jQuery 对象.width(数字);</li></ul></li><li><p>获取：</p><ul><li>语法：jQuery 对象.width();</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="string">"div"</span>).width();</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(<span class="string">"div"</span>).width(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="innerWidth-和-innerHeight-方法"><a href="#innerWidth-和-innerHeight-方法" class="headerlink" title="innerWidth 和 innerHeight 方法"></a>innerWidth 和 innerHeight 方法</h3><blockquote><p>操作的大小是内容部分 + padding<br><a id="more"></a></p><ul><li>设置：</li></ul></blockquote><ul><li>语法：jQuery 对象.innerWidth(数字);</li></ul><ul><li><p>获取：</p><ul><li>语法：jQuery 对象.innerWidth();</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="string">"div"</span>).innerWidth();</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(<span class="string">"div"</span>).innerWidth(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="outerWidth-和-outerHeight-方法"><a href="#outerWidth-和-outerHeight-方法" class="headerlink" title="outerWidth 和 outerHeight 方法"></a>outerWidth 和 outerHeight 方法</h3><blockquote><p>操作的大小是内容部分 + padding + border</p></blockquote><ul><li><p>设置：</p><ul><li>语法：jQuery 对象.outerWidth(数字);</li></ul></li><li><p>获取：</p><ul><li>语法：jQuery 对象.outerWidth();</li></ul></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="string">"div"</span>).outerWidth();</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(<span class="string">"div"</span>).outerWidth(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-操作元素的位置"><a href="#jQuery-操作元素的位置" class="headerlink" title="jQuery 操作元素的位置"></a>jQuery 操作元素的位置</h2><h3 id="获取元素距离文档的位置"><a href="#获取元素距离文档的位置" class="headerlink" title="获取元素距离文档的位置"></a>获取元素距离文档的位置</h3><ul><li><p>语法：jQuery 对象.offset(); 返回一个对象，对象中包含了元素的位置</p></li><li><p>注意：</p><blockquote><p>offset()方法获取的元素的位置，永远参照文档。和定位没有关系</p></blockquote></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = $(<span class="string">".s"</span>).offset();</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="built_in">console</span>.log(o.top);</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素距离上级定位元素的位置"><a href="#获取元素距离上级定位元素的位置" class="headerlink" title="获取元素距离上级定位元素的位置"></a>获取元素距离上级定位元素的位置</h3><ul><li><p>语法：jQuery 对象.position(); 返回的一个对象，对象中包含了元素的位置</p></li><li><p>注意：</p><blockquote><p>position()方法获取的元素的位置,参照最近的定位元素（和定位有关系）</p></blockquote></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = $(<span class="string">".s"</span>).position();</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="built_in">console</span>.log(o.top);</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作卷去的页面间距"><a href="#操作卷去的页面间距" class="headerlink" title="操作卷去的页面间距"></a>操作卷去的页面间距</h3><ul><li><p>获取</p><ul><li>语法：jQuery 对象.scrollTop(); 返回数字</li></ul></li><li><p>设置</p><ul><li>语法：jQuery 对象.scrollTop(数字);</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取被卷起的间距</span></span><br><span class="line">  <span class="keyword">var</span> v = $(<span class="keyword">this</span>).scrollTop();</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置卷起的间距</span></span><br><span class="line">  $(<span class="string">"div"</span>).scrollTop(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-事件操作"><a href="#jQuery-事件操作" class="headerlink" title="jQuery 事件操作"></a>jQuery 事件操作</h2><h3 id="简单方式注册事件"><a href="#简单方式注册事件" class="headerlink" title="简单方式注册事件"></a>简单方式注册事件</h3><ul><li><p>语法：jQuery 对象.事件名(事件处理程序);</p><p><img src="media/01.png" alt=""></p><p>​</p></li></ul><h3 id="on-方法注册事件"><a href="#on-方法注册事件" class="headerlink" title="on 方法注册事件"></a>on 方法注册事件</h3><ul><li><p>注册简单事件语法：jQuery 对象.on(‘事件名’,事件处理程序);</p></li><li><p>事件委托的实现：jQuery 对象.on(‘事件名’,’选择器’,事件处理程序);</p><ul><li>选择器：子孙元素</li><li>注意：在事件处理程序中，this 代表的是子孙元素（所点最先触发的）</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册简单的事件</span></span><br><span class="line">$(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【JQ方式实现事件委托-把li委托给ul】</span></span><br><span class="line">$(<span class="string">"ul"</span>).on(<span class="string">"click"</span>, <span class="string">"li"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 是谁？ 当前点击的li</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  alert($(<span class="keyword">this</span>).text());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="off-方法移除事件"><a href="#off-方法移除事件" class="headerlink" title="off 方法移除事件"></a>off 方法移除事件</h3><ul><li><p>解绑简单的事件：jQuery 对象.off(‘click’,事件处理程序名称)</p></li><li><p>解绑事件委托注册的事件：jQuery 对象.off(‘click’,‘选择器’,事件处理程序名称)</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑按钮的事件处理程序：fn1和fn2</span></span><br><span class="line">$(<span class="string">"button"</span>).off(<span class="string">"click"</span>, fn1);</span><br><span class="line">$(<span class="string">"button"</span>).off(<span class="string">"click"</span>, fn2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑通过事件委托给p注册的事件处理程序 fn2</span></span><br><span class="line">$(<span class="string">"div"</span>).off(<span class="string">"click"</span>, <span class="string">"p"</span>, fn2);</span><br></pre></td></tr></table></figure></li></ul><h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><ul><li><p>语法：jQuery 对象.trigger(‘事件名’);</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote><p>如何获取事件对象？</p><p>​ 事件处理程序的第一个形参-e</p></blockquote><ul><li>鼠标事件对象相关的属性<ul><li>事件对象.clientX/Y 参照浏览器</li><li>事件对象.pageX/Y 参照文档</li><li>事件对象.offsetX/Y 参照元素</li></ul></li><li>键盘事件对象相关的属性<ul><li>事件对象.keyCode 返回键码数字</li><li>事件对象.alt/shift/ctrlKey 返回是布尔值。 检测是否按下（true）</li></ul></li><li>公共的属性或方法<ul><li>属性<ul><li>事件对象.target;</li></ul></li><li>方法：<ul><li>事件对象.preventDefault(); 阻止默认行为</li><li>事件对象.stopPropagation(); 阻止事件冒泡</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery常用api一</title>
      <link href="/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%B8%80/"/>
      <url>/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-对象和-DOM-对象的区别"><a href="#jQuery-对象和-DOM-对象的区别" class="headerlink" title="jQuery 对象和 DOM 对象的区别"></a>jQuery 对象和 DOM 对象的区别</h2><ul><li>jQuery 对象只能使用 jQuery 对象中提供的属性或方法，不能够使用 DOM 对象中提供的属性或方法</li><li>DOM 对象只能使用 DOM 对象中提供的属性或方法，不能使用 jQuery 对象中提供的属性或方法</li></ul><h2 id="DOM-对象转-jQuery-对象"><a href="#DOM-对象转-jQuery-对象" class="headerlink" title="DOM 对象转 jQuery 对象"></a>DOM 对象转 jQuery 对象</h2><ul><li><p>语法： ==\$(dom 对象);==</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 【DOM对象  转  jQuery对象】</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 转换</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $div = $(div);</span></span><br><span class="line"><span class="undefined">  $div.css(&#123;</span></span><br><span class="line"><span class="undefined">    width: 500,</span></span><br><span class="line"><span class="undefined">    height: 500,</span></span><br><span class="line"><span class="javascript">    border: <span class="string">"1px solid"</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="jQuery-对象转-DOM-对象"><a href="#jQuery-对象转-DOM-对象" class="headerlink" title="jQuery 对象转 DOM 对象"></a>jQuery 对象转 DOM 对象</h2><ul><li><p>语法：jQuery 对象[索引]; 本质就是从伪数组中取出指定的 dom 对象</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// jQuery对象转DOM对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> div = $(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">  div.innerText = <span class="string">"我是文本"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-jQuery-操作样式"><a href="#四-jQuery-操作样式" class="headerlink" title="四.jQuery 操作样式"></a>四.jQuery 操作样式</h2></li></ul><h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><ul><li><p>设置单个样式： jQuery 对象.css(name,value);</p></li><li><p>设置多个样式：</p><blockquote><p>jQuery 对象.css({</p><p>​ name:value,</p><p>​ name:value,</p><p>​ name:value,</p><p>​ name:value</p><p>});</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 设置单个样式</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(<span class="string">"width"</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(<span class="string">"height"</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 设置多个样式</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(&#123;</span></span><br><span class="line"><span class="javascript">    border: <span class="string">"10px solid blue"</span>,</span></span><br><span class="line"><span class="javascript">    background: <span class="string">"pink"</span>,</span></span><br><span class="line"><span class="javascript">    color: <span class="string">"green"</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取样式值"><a href="#获取样式值" class="headerlink" title="获取样式值"></a>获取样式值</h2><ul><li><p>语法： jQuery 对象.css(‘样式属性名’);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  div &#123;</span></span><br><span class="line"><span class="undefined">    width: 300px;</span></span><br><span class="line"><span class="undefined">    height: 300px;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    left: 200px;</span></span><br><span class="line"><span class="undefined">    top: 100px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> h = $(<span class="string">"div"</span>).css(<span class="string">"height"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> l = $(<span class="string">"div"</span>).css(<span class="string">"left"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(h);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(l);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="通过选择器获取-jQuery-对象"><a href="#通过选择器获取-jQuery-对象" class="headerlink" title="通过选择器获取 jQuery 对象"></a>通过选择器获取 jQuery 对象</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>ID 选择器</td><td>\$(‘#id’)</td><td style="text-align:left">获取指定 ID 的元素</td></tr><tr><td>类选择器</td><td>\$(‘.class’)</td><td style="text-align:left">获取同一类 class 的元素</td></tr><tr><td>标签选择器</td><td>\$(‘div’)</td><td style="text-align:left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>\$(‘div,p,li’)</td><td style="text-align:left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>\$(‘div.redClass’)</td><td style="text-align:left">获取 class 为 redClass 的 div 元素</td></tr></tbody></table><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>\$(‘ul &gt; li’)</td><td style="text-align:left">使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>\$(‘ul li’)</td><td style="text-align:left">使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table><h3 id="过滤器选择器"><a href="#过滤器选择器" class="headerlink" title="过滤器选择器"></a>过滤器选择器</h3><ul><li>这类选择器都带冒号:</li></ul><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>:eq(index)</td><td>\$(‘li:eq(2)’).css(‘color’, ‘red’)</td><td style="text-align:left">获取到的 li 元素中，选择索引号为 2 的元素，索引号 index<strong>从 0 开始。</strong></td></tr><tr><td>:odd</td><td>\$(‘li:odd’).css(‘color’, ‘red’)</td><td style="text-align:left">获取到的 li 元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>\$(‘li:even’).css(‘color’, ‘red’)</td><td style="text-align:left">获取到的 li 元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>案例：隔行变色</p><h3 id="选择器筛选方法"><a href="#选择器筛选方法" class="headerlink" title="选择器筛选方法"></a>选择器筛选方法</h3><ul><li>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</li></ul><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>\$(‘ul’).children(‘li’)</td><td style="text-align:left">相当于\$(‘ull &gt; i’)，子类选择器</td></tr><tr><td>find(selector)</td><td>\$(‘ul’).find(‘li’)</td><td style="text-align:left">相当于\$(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>\$(‘#first’).siblings(‘li’)</td><td style="text-align:left">查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>\$(‘#first’).parent()</td><td style="text-align:left">查找父亲</td></tr><tr><td>eq(index)</td><td>\$(‘li’).eq(2)</td><td style="text-align:left">相当于\$(‘li:eq(2)’),index 从 0 开始</td></tr><tr><td>next()</td><td>\$(‘li’).next()</td><td style="text-align:left">找下一个兄弟</td></tr><tr><td>prev()</td><td>\$(‘li’).prev()</td><td style="text-align:left">找上一次兄弟</td></tr></tbody></table><h2 id="jQuery-操作类名"><a href="#jQuery-操作类名" class="headerlink" title="jQuery 操作类名"></a>jQuery 操作类名</h2><h3 id="添加类名"><a href="#添加类名" class="headerlink" title="添加类名"></a>添加类名</h3><ul><li><p>语法：==jQuery 对象.addClass(‘类名’);==</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).addClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="移除类名"><a href="#移除类名" class="headerlink" title="移除类名"></a>移除类名</h3><ul><li><p>语法：==jQuery 对象.removeClass(‘类名’);== 删除指定的类名</p></li><li><p>语法：jQuery 对象.removeClass(); 不传参数，表示删除所有的类名</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).removeClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="检测类名是否存在"><a href="#检测类名是否存在" class="headerlink" title="检测类名是否存在"></a>检测类名是否存在</h3><ul><li><p>语法：==jQuery 对象.hasClass(‘类名’);== 返回 true 和 false</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> isHas = $(<span class="string">"div"</span>).hasClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(isHas); <span class="comment">// false;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="类名切换"><a href="#类名切换" class="headerlink" title="类名切换"></a>类名切换</h3><ul><li><p>语法：==jQuery 对象.toggleClass(‘类名’);== 若这个类名存在，则会移除该类名。否则添加该类名</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).toggleClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-操作标签的属性"><a href="#jQuery-操作标签的属性" class="headerlink" title="jQuery 操作标签的属性"></a>jQuery 操作标签的属性</h2><h3 id="设置标签的属性"><a href="#设置标签的属性" class="headerlink" title="设置标签的属性"></a>设置标签的属性</h3><ul><li><p>语法：jQuery 对象.attr(name,value);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).attr(<span class="string">"pid"</span>, <span class="number">10010</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="获取标签属性值"><a href="#获取标签属性值" class="headerlink" title="获取标签属性值"></a>获取标签属性值</h3><ul><li><p>语法：jQuery 对象.attr(name);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> r = $(<span class="string">"div"</span>).attr(<span class="string">"pid"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="移除标签的属性"><a href="#移除标签的属性" class="headerlink" title="移除标签的属性"></a>移除标签的属性</h3><ul><li><p>语法：removeAttr(name);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).removeAttr(<span class="string">"pid"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="prop-方法操作属性"><a href="#prop-方法操作属性" class="headerlink" title="prop 方法操作属性"></a>prop 方法操作属性</h3><blockquote><p>针对：selected、checked、disabled</p></blockquote><ul><li><p>获取属性值</p><ul><li><p>语法：\$(‘input’).prop(‘属性名’);</p></li><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  var isC = $('input').prop('checked');</span></span><br><span class="line"><span class="regexp">  console.log(isC); /</span><span class="regexp">/ false;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置属性值</p><ul><li>语法：\$(‘input’).prop(‘属性名’,值);</li><li>代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  $('input').prop('checked',true);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="jQuery-创建元素"><a href="#jQuery-创建元素" class="headerlink" title="jQuery 创建元素"></a>jQuery 创建元素</h2><ul><li>语法：<strong><code>$(&#39;&lt;li&gt;&lt;/li&gt;&#39;)</code></strong></li></ul><h2 id="jQuery-追加元素"><a href="#jQuery-追加元素" class="headerlink" title="jQuery 追加元素"></a>jQuery 追加元素</h2><h3 id="向父元素最后追加"><a href="#向父元素最后追加" class="headerlink" title="向父元素最后追加"></a>向父元素最后追加</h3><ul><li><p>语法：新创建 jQuery 对象.appendTo(‘父元素选择器’ 或 父元素 jQuery 对象);</p></li><li><p>语法：父元素 jQuery 对象.apeend(新创建的 jQuery 对象);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;li&gt;后裔&lt;/li&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> datas = [<span class="string">"后裔"</span>, <span class="string">"安其拉"</span>, <span class="string">"鲁班"</span>, <span class="string">"小乔"</span>, <span class="string">"虞姬"</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>)</span></span><br><span class="line"><span class="undefined">      .text(datas[i])</span></span><br><span class="line"><span class="javascript">      .appendTo(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="向父元素最前面追加"><a href="#向父元素最前面追加" class="headerlink" title="向父元素最前面追加"></a>向父元素最前面追加</h3><ul><li><p>语法：新创建 jQuery 对象.prependTo(‘父元素选择器’);</p></li><li><p>语法：父元素 jQuery 对象.prepend(新创建的 jQuery 对象);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;li&gt;后裔&lt;/li&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> datas = [<span class="string">"后裔"</span>, <span class="string">"安其拉"</span>, <span class="string">"鲁班"</span>, <span class="string">"小乔"</span>, <span class="string">"虞姬"</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="xml">    // $('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>')</span></span><br><span class="line"><span class="javascript">    <span class="comment">// .text(datas[i])</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// .prependTo('ul');</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"ul"</span>).prepend($(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).text(datas[i]));</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-删除元素"><a href="#jQuery-删除元素" class="headerlink" title="jQuery 删除元素"></a>jQuery 删除元素</h2><ul><li>语法：jQuery 对象.remove(); 删谁就让谁调用这个方法</li></ul><h2 id="jQuery-清空元素"><a href="#jQuery-清空元素" class="headerlink" title="jQuery 清空元素"></a>jQuery 清空元素</h2><ul><li>清空方式 1：==jQuery 对象.empty();== 推荐使用， 清空内部的所有元素及元素相关的事件</li><li>清空方式 2：jQuery 对象.html(‘’); 仅仅清空内部的元素，不清清理内中的元素的事件。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型和原型链理解</title>
      <link href="/keaichong.github.io/2019/02/03/JS%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/"/>
      <url>/keaichong.github.io/2019/02/03/JS%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="原型的作用"><a href="#原型的作用" class="headerlink" title="原型的作用"></a>原型的作用</h2><ol><li>前提：① 将来对象的空间大小，和对象的属性和方法数量有关；② 属性是不一致的，方法是一致。</li><li>问题：内存的浪费</li><li>原因：对象的方法是一致的，每创建一个对象，都为每一个对象分配一个属于各自的方法，方法的数量随 1. 对象的个数，方法数量越来越多。 方法 → 函数 → 数据类型 → 内存</li><li>解决：把多个方法抽取成一个，让所有同类型的对象共享之。</li><li>如何实现：通过原型，把方法放入到原型中，就可以被构造函数创建的对象共享。</li></ol><h2 id="对象查找属性和方法的流程"><a href="#对象查找属性和方法的流程" class="headerlink" title="对象查找属性和方法的流程"></a>对象查找属性和方法的流程</h2><ol><li>会先从实例对象本身查找</li><li>如果没找到,实例对象通过构造函数对象.<em>proto</em>所提供的原型地址找到原型</li><li>从原型中查找要访问属性或方法</li><li>如果还是没找到,则在原型对象.<em>proto</em>中查找，一直到 null，如果没有则返回 undefined</li></ol><h2 id="获取原型"><a href="#获取原型" class="headerlink" title="获取原型"></a>获取原型</h2><blockquote><p>语法:函数名.prototype</p></blockquote><h2 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h2><blockquote><p>语法: 原型.constructor<br><a id="more"></a></p></blockquote><h2 id="原型添加属性方法"><a href="#原型添加属性方法" class="headerlink" title="原型添加属性方法"></a>原型添加属性方法</h2><blockquote><p>语法:函数名.prototype.key = value</p></blockquote><blockquote><p>注意:数组和字符串中的 prototype 不要修改,修改后自带的方法就没有了,可以采用添加方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.getMax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="JQuery-原型添加方法"><a href="#JQuery-原型添加方法" class="headerlink" title="JQuery 原型添加方法"></a>JQuery 原型添加方法</h2><blockquote><p>语法:$.prototype.方法 = function(){}<br>简写:  $.fn.方法 = function(){}</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Zaxlct"</span>, <span class="number">28</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Mick"</span>, <span class="number">23</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure><p>上面的例子中 person1 和 person2 都是 Person 的实例。这两个实例都有一个 constructor （构造函数）属性，该属性（是一个指针）指向 Person。 即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>person1 和 person2 都是 构造函数 Person 的实例<br>实例的构造函数属性（constructor）指向构造函数。</p><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote><p>在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个 prototype 属性，这个属性指向函数的原型对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Zaxlct"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">28</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">// 'Zaxlct'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">// 'Zaxlct'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="认识原型链"><a href="#认识原型链" class="headerlink" title="认识原型链"></a>认识原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给Object的构造函数的原型添加了一个属性a</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【构造函数】</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【获取原型】</span></span><br><span class="line"><span class="keyword">var</span> yx = Hero.prototype;</span><br><span class="line"><span class="comment">// 语法：对象.key = value</span></span><br><span class="line">yx.attack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"正在发飙...."</span>);</span><br><span class="line">&#125;;</span><br><span class="line">yx.type = <span class="string">"英雄"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个英雄对象</span></span><br><span class="line"><span class="keyword">var</span> hy = <span class="keyword">new</span> Hero(<span class="string">"后裔"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hy.type);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链</span></span><br><span class="line"><span class="comment">// 属性的查找规则</span></span><br><span class="line"><span class="comment">// ① 从对象本身中查找，若没找到</span></span><br><span class="line"><span class="comment">// ② 则通过__proto__提供的原型的地址，找到yx，从yx中查找，若也没找到</span></span><br><span class="line"><span class="comment">// ③ 在原型的中也有一个__proto__，则会通过__proto__找到原型的原型</span></span><br><span class="line"><span class="comment">// 这个查找的过程之所以能够执行，是因为原型链的存。</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.a);</span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__); <span class="comment">// Hero.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__.__proto__); <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__.__proto__.__proto__); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS闭包和递归</title>
      <link href="/keaichong.github.io/2019/02/02/JS%E9%97%AD%E5%8C%85%E5%92%8C%E9%80%92%E5%BD%92/"/>
      <url>/keaichong.github.io/2019/02/02/JS%E9%97%AD%E5%8C%85%E5%92%8C%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 closure"></a>闭包 closure</h3><blockquote><p>闭包是一个子函数，子函数一定要把内部和外部关联起来。闭包满足两个条件 一,让内部和外部关联 二,内层子函数可以操作到外层函数变量<br>理解:函数作为返回值，函数作为参数传递</p></blockquote><ol><li>变量保存在内存中 变量的生命周期: 变量什么时候被释放</li><li>全局变量生命周期: 退出程序后才会被释放</li><li>局部变量生命周期: 函数调用时候产生,本次结束后释放局部变量</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域是在函数定义时决定的,从内层向外层访问<br>问题: 外层作用域无法操作内层作用域变量<br>原因: 局部作用域生命周期在调用结束后释放了,因此外层不能访问.<br>需求: 让外层作用域操作到内层作用域<br>实现: 用闭包来延长局部变量的生命周期</p><h3 id="闭包中的-GC-垃圾回收机制"><a href="#闭包中的-GC-垃圾回收机制" class="headerlink" title="闭包中的 GC 垃圾回收机制"></a>闭包中的 GC 垃圾回收机制</h3><a id="more"></a><p>运行中的程序的数据是存放在内存中<br> 在运行的过程中有一个叫 GC 的机制（Garbage Collection 垃圾回收机制）<br>GC 相当于生活中的保洁，会不定时去清理内存中的没有用的数据,也就是不在被引用的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bieShu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>; <span class="comment">// 局部变量</span></span><br><span class="line">  <span class="keyword">var</span> guanjia = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 管家</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = a + num;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> guanjia;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cyqz = bieShu();</span><br><span class="line"><span class="comment">// 若函数内部中的a不在了，10 是无法和a相加的得出结果13的</span></span><br><span class="line"><span class="comment">// 若a还在，10 和 a得出结果是13， 说a在bieshu这函数调用完毕后没有被释放。</span></span><br><span class="line"><span class="comment">// 怎么延长的？ 内部的子函数当做桥梁和外部关联→ 外部直在应用或操作函数内部的局部变量→ 所以局部变量没有当做垃圾数据释放</span></span><br><span class="line">cyqz(<span class="number">10</span>); <span class="comment">// a = 13</span></span><br><span class="line">cyqz(<span class="number">10</span>); <span class="comment">// a = 23</span></span><br><span class="line">cyqz(<span class="number">10</span>); <span class="comment">// a = 23</span></span><br><span class="line"><span class="comment">// 如何调试： 在子函数内部设置断点→ 进入子函数内部后 → 查看右侧是否有clouser存在</span></span><br></pre></td></tr></table></figure><h3 id="闭包用途"><a href="#闭包用途" class="headerlink" title="闭包用途"></a>闭包用途</h3><ol><li>函数外部读取函数内部成员</li><li>函数内成员始终存活在内存之中(延长局部变量生命周期)</li><li>维护私有变量的安全(例如 取款机取钱)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//The Window</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn = object.getNameFunc();</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.name); <span class="comment">//My Object</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn = object.getNameFunc();</span><br><span class="line"><span class="built_in">window</span>.fn();</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>程序调用自身 作用:减少代码量</p></blockquote><h3 id="递归的三个阶段"><a href="#递归的三个阶段" class="headerlink" title="递归的三个阶段"></a>递归的三个阶段</h3><ul><li>递归前进段</li><li>递归边界条件</li><li>递归返回段<br>1,1,2,3,5,8……….求第 n 个数是多少 斐波那契数列 用递归实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFbi</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getFbi(n - <span class="number">1</span>) + getFbi(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getFbi(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向问题和改变this的方法</title>
      <link href="/keaichong.github.io/2019/02/02/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
      <url>/keaichong.github.io/2019/02/02/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol><li><p>普通函数和定时器中的 this 指向 window</p></li><li><p>对象方法中的 this 指向调用者</p></li><li><p>构造函数中的 this 指向实例对象(当前创建对象)</p></li><li><p>事件处理函数中的 this 指向事件源</p></li><li><p>箭头函数没有自己的 this,它的 this 是外部函数的 this</p></li></ol><h2 id="bind-call-apply-改变-this-指向"><a href="#bind-call-apply-改变-this-指向" class="headerlink" title="bind call apply 改变 this 指向"></a>bind call apply 改变 this 指向</h2><a id="more"></a><h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call 方法"></a>call 方法</h4><ol><li>语法:函数名.call(调用者,参数 1,参数 2,…)</li><li>会立即执行,this 指向调用者</li></ol><h4 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply 方法"></a>apply 方法</h4><ol><li>语法: 函数名.apply(调用者,数组)</li><li>会立即执行,this 指向调用者</li></ol><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><ol><li>语法: 函数名.bind(调用者,参数 1,参数 2,…)</li><li>call 和 apply 都是对函数的直接调用，而 bind 方法返回的仍然是一个函数，因此后面还需要()来进行调用才可以</li><li>bind() 方法和前两者不同在于： bind() 方法会返回执行上下文被改变的函数而不会立即执行，而前两者是直接执行该函数。他的参数和 call()相同</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组字符串常用方法</title>
      <link href="/keaichong.github.io/2019/02/02/js%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/keaichong.github.io/2019/02/02/js%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法:"></a>数组常用方法:</h2><ol><li>push(): 向数组尾部添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="built_in">console</span>.log(arr);        <span class="comment">//  [1, 2, 3]</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">var</span> b = arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="number">4</span> <span class="built_in">console</span>.log(b);          <span class="comment">//  4   //表示当前数组长度</span></span><br><span class="line"><span class="number">5</span> <span class="built_in">console</span>.log(arr);        <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>pop(): 删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="built_in">console</span>.log(arr);                <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="number">3</span> arr.pop();</span><br><span class="line"><span class="number">4</span> <span class="built_in">console</span>.log( arr.pop() );　　<span class="comment">// [3]　　//返回删除的元素</span></span><br><span class="line"><span class="number">5</span> <span class="built_in">console</span>.log(arr);                <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>unshift():在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。<a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span> arr.unshift(<span class="string">'x'</span>);        <span class="comment">// 4</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr);        <span class="comment">// ['x', 'a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></li></ol><p>shift():删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span> arr.shift()         <span class="comment">// 'a'</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)     <span class="comment">// ['b', 'c']</span></span><br></pre></td></tr></table></figure><p>shift()方法还可以遍历并清空一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="number">2</span> <span class="keyword">var</span> item;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> (item = list.shift()) &#123;</span><br><span class="line"><span class="number">5</span>   <span class="built_in">console</span>.log(item);</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="built_in">console</span>.log(list);     <span class="comment">// []</span></span><br></pre></td></tr></table></figure><ol start="3"><li>valueOf():返回数组的本身。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> arr.valueOf()     <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>indexOf():返回指定元素在数组中出现的位置，如果没有出现则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.indexOf(<span class="string">'b'</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="number">4</span> arr.indexOf(<span class="string">'y'</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>indexOf 方法还可以接受第二个参数，表示搜索的开始位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)[(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)].indexOf(<span class="string">"a"</span>, <span class="number">1</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>上面代码从 1 号位置开始搜索字符 a，结果为-1，表示没有搜索到。</p><p>toString():返回数组的字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> arr.toString()     <span class="comment">// "1,2,3"</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line"><span class="number">5</span> arr.toString()     <span class="comment">// "1,2,3,4,5,6"</span></span><br></pre></td></tr></table></figure><ol start="4"><li>join():以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.join(<span class="string">' '</span>)     <span class="comment">// '1 2 3 4'</span></span><br><span class="line"><span class="number">4</span> arr.join(<span class="string">' | '</span>)     <span class="comment">// "1 | 2 | 3 | 4"</span></span><br><span class="line"><span class="number">5</span> arr.join()     <span class="comment">// "1,2,3,4"</span></span><br></pre></td></tr></table></figure><ol start="5"><li>concat():用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="keyword">var</span> b = arr.concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(b);        <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><ol start="6"><li>reverse():用于颠倒数组中元素的顺序，返回改变后的数组。注意，该方法将改变原数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.reverse() <span class="comment">// ["c", "b", "a"]</span></span><br><span class="line"><span class="number">4</span> <span class="built_in">console</span>.log(arr) <span class="comment">// ["c", "b", "a"]</span></span><br></pre></td></tr></table></figure><ol start="7"><li>slice():用于截取原数组的一部分，返回一个新数组，原数组不变。<br>slice(start,end)它的第一个参数为起始位置（从 0 开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span> arr.slice(<span class="number">0</span>)         <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"> <span class="number">4</span> arr.slice(<span class="number">1</span>)         <span class="comment">// ["b", "c"]</span></span><br><span class="line"> <span class="number">5</span> arr.slice(<span class="number">1</span>, <span class="number">2</span>)     <span class="comment">// ["b"]</span></span><br><span class="line"> <span class="number">6</span> arr.slice(<span class="number">2</span>, <span class="number">6</span>)     <span class="comment">// ["c"]</span></span><br><span class="line"> <span class="number">7</span> arr.slice()           <span class="comment">// ["a", "b", "c"]    无参数返回原数组</span></span><br><span class="line"> <span class="number">8</span></span><br><span class="line"> <span class="number">9</span> arr.slice(<span class="number">-2</span>)          <span class="comment">// ["b", "c"]    参数是负数，则表示倒数计算的位置</span></span><br><span class="line"><span class="number">10</span> arr.slice(<span class="number">-2</span>, <span class="number">-1</span>)     <span class="comment">// ["b"]</span></span><br></pre></td></tr></table></figure><ol start="8"><li>splice():删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。<br>splice(start,delNum,addElement1,addElement2,…)第一个参数是删除的起始位置，第二个参数是被删除的元素个数,第三个参数代表要替换的元素。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">4</span>, <span class="number">2</span>)     <span class="comment">// ["e", "f"]　　从原数组4号位置，删除了两个数组成员</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)     <span class="comment">// ["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)     <span class="comment">// ["e", "f"]　　原数组4号位置，删除了两个数组成员,又插入了两个新成员</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)         <span class="comment">// ["a", "b", "c", "d", 1, 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">-4</span>, <span class="number">2</span>)     <span class="comment">// ["c", "d"]    起始位置如果是负数，就表示从倒数位置开始删除</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)     <span class="comment">// []    如果只插入元素,第二个参数可以设为0</span></span><br><span class="line"><span class="number">4</span> conlose.log(arr)     <span class="comment">// [1, 2, 1, 1]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">2</span>)     <span class="comment">// [3, 4] 如果只有第一个参数，等同于将原数组在指定位置拆分成两个数组</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)     <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><ol start="9"><li>sort():对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)[(<span class="string">"d"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>)].sort();</span><br><span class="line"><span class="number">2</span>; <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="number">3</span>;</span><br><span class="line">(<span class="number">4</span>)[(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)].sort();</span><br><span class="line"><span class="number">5</span>; <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="number">6</span>;</span><br><span class="line">(<span class="number">7</span>)[(<span class="number">11</span>, <span class="number">101</span>)].sort();</span><br><span class="line"><span class="number">8</span>; <span class="comment">// [101, 11]</span></span><br><span class="line"><span class="number">9</span>;</span><br><span class="line">(<span class="number">10</span>)[(<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>)].sort();</span><br><span class="line"><span class="number">11</span>; <span class="comment">// [10111, 1101, 111]</span></span><br></pre></td></tr></table></figure><p>上面代码的最后两个例子，需要特殊注意。sort 方法不是按照大小排序，而是按照对应字符串的字典顺序排序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以 101 排在 11 的前面。</p><p>如果想让 sort 方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于 0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>];</span><br><span class="line"> <span class="number">2</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="number">3</span>   <span class="keyword">return</span> a - b;</span><br><span class="line"> <span class="number">4</span> &#125;)</span><br><span class="line"> <span class="number">5</span> <span class="comment">// [111, 1101, 10111]</span></span><br><span class="line"> <span class="number">6</span></span><br><span class="line"> <span class="number">7</span> <span class="keyword">var</span> arr1 = [</span><br><span class="line"> <span class="number">8</span>               &#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line"> <span class="number">9</span>               &#123; <span class="attr">name</span>: <span class="string">"李四"</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;,</span><br><span class="line"><span class="number">10</span>               &#123; <span class="attr">name</span>: <span class="string">"王五"</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;</span><br><span class="line"><span class="number">11</span>            ]</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span> arr1.sort(<span class="function"><span class="keyword">function</span> (<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line"><span class="number">14</span>   <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line"><span class="number">15</span> &#125;)</span><br><span class="line"><span class="number">16</span> <span class="comment">// [</span></span><br><span class="line"><span class="number">17</span> <span class="comment">//   &#123; name: "李四", age: 24 &#125;,</span></span><br><span class="line"><span class="number">18</span> <span class="comment">//   &#123; name: "王五", age: 28 &#125;,</span></span><br><span class="line"><span class="number">19</span> <span class="comment">//   &#123; name: "张三", age: 30 &#125;</span></span><br><span class="line"><span class="number">20</span> <span class="comment">// ]</span></span><br></pre></td></tr></table></figure><ol start="10"><li>map():对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="number">4</span>   <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="number">5</span> &#125;);</span><br><span class="line"><span class="number">6</span> <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> numbers</span><br><span class="line"><span class="number">9</span> <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>上面代码中，numbers 数组的所有成员都加上 1，组成一个新数组返回，原数组没有变化。</p><ol start="11"><li>filter():参数是一个函数，所有数组成员依次执行该函数，返回结果为 true 的成员组成一个新数组返回。该方法不会改变原数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">2</span> arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line"><span class="number">3</span>   <span class="keyword">return</span> (elem &gt; <span class="number">3</span>);</span><br><span class="line"><span class="number">4</span> &#125;)</span><br><span class="line"><span class="number">5</span> <span class="comment">// [4, 5]</span></span><br></pre></td></tr></table></figure><ol start="12"><li>arr.forEach(item,index,array){} 遍历，循环 类似 jquery 的 each<br>其中的 item 参数是数组中的内容，index 为其索引,array 表示数组本身</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法:"></a>字符串常用方法:</h2><ol><li>substring(start 开始位置的索引,end 结束位置索引) 截取的位置不包含结束位置的字符,只写一个参数表示从开始位置截取到最后</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.substring(<span class="number">1</span>) <span class="comment">//得到bcdefg  str.substring(1,3) //得到bc</span></span><br></pre></td></tr></table></figure><ol start="2"><li>slice(start 开始位置索引，end 结束位置索引) 基本和 substring 相似,区别在参数为负数時候。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.slice(<span class="number">1</span>)  <span class="comment">//bcdefg      str.substring(1,3) // bc</span></span><br></pre></td></tr></table></figure><ol start="3"><li>substr(start 开始位置索引,end 需要返回的字符个数)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.substr(<span class="number">1</span>) <span class="comment">//bcdefg      str.substr(1,1) //b</span></span><br></pre></td></tr></table></figure><ol start="4"><li>charAt(index) 方法返回指定索引位置处的字符。如果超出有效范围(0 与字符串长度减一)的索引值返回空字符串.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.charAt(<span class="number">2</span>) <span class="comment">// c</span></span><br></pre></td></tr></table></figure><ol start="5"><li>index(string) 返回 String 对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcdefga'</span>  str.indexOf(<span class="string">'a'</span>)  <span class="comment">// 0   str.indexOf('h') //-1</span></span><br></pre></td></tr></table></figure><ol start="6"><li>lastIndexOf(string) 倒叙查找<br>返回 String 对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcdefga'</span>     str.lastIndexOf(<span class="string">'a'</span>) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ol start="7"><li>split(str) 将字符串以参数分割为数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcadeafg'</span>     str.split(<span class="string">'a'</span>) <span class="comment">//["", "bc", "de", "fg"]</span></span><br></pre></td></tr></table></figure><ol start="8"><li><p>toLowerCase 方法返回一个字符串，该字符串中的字母被转换成小写。</p></li><li><p>toUpperCase 方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。</p></li><li><p>match() – 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配</p></li><li><p>search 方法返回与正则表达式查找内容匹配的第一个字符串的位置。</p></li><li><p>replace 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用</title>
      <link href="/keaichong.github.io/2019/02/02/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/keaichong.github.io/2019/02/02/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-的-3-个区域"><a href="#Git-的-3-个区域" class="headerlink" title="Git 的 3 个区域"></a>Git 的 3 个区域</h3><ol><li><strong>工作目录</strong>(working directory)<br>简单理解就是需要进行版本的某个文件夹（假设为 test），这个文件夹有一些特殊之处——多了.git 这个隐藏的文件夹。</li><li><strong>暂存区域</strong>（Stage 或 Index）<br>暂存区可以理解为一个虚拟工作区，这个虚拟工作区会跟踪工作区的文件变化（增删改等操作）。这个工作区的位于.git 文件夹下的 index 目录下。除非是绕过暂存区直接提交，否则 Git 想把修改提交上去，就必须将修改存入暂存区最后才能 commit。每次提交的是暂存区所对应的文件快照。</li><li><strong>本地仓库</strong>(repository)<br>存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了</li></ol><img src="/keaichong.github.io/2019/02/02/Git基本使用/55B64D09-9E28-42AF-AFED-C9D61A350A98.png">   <a id="more"></a><h3 id="文件的三种状态"><a href="#文件的三种状态" class="headerlink" title="文件的三种状态"></a>文件的三种状态</h3><ol><li><p><strong>已修改</strong>(modified)</p></li><li><p><strong>已暂存</strong>(staged)</p></li><li><p><strong>已提交</strong>(committed)​</p></li></ol><h3 id="暂存区作用"><a href="#暂存区作用" class="headerlink" title="暂存区作用"></a>暂存区作用</h3><ol><li>修改了 4 个文件，在不放弃任何修改的情况下，其中一个文件不想提交，如何操作？（没 add : git add 已经 add: git reset –soft ）</li><li>修改到一半的文件，突然间不需要或者放弃修改了，怎么恢复未修改前文件？ (git checkout)</li><li>代码写一半，被打断去做其他功能开发，未完成代码保存？(git stash)</li><li>代码写一半，发现忘记切换分支了？(git stash &amp; git checkout)</li><li>代码需要回滚了？（git reset）</li><li>等等</li></ol><h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><ol><li>在工作目录中修改某些文件。</li><li>对修改后的文件进行快照，然后保存到暂存区域。</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ol><h3 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><blockquote><p>可以在本地的任意目录下，创建项目文件夹 demo，此项目文件夹就是我们的工作目录。</p></blockquote><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><blockquote><p>打开 Git bash 窗口，进入工作目录，输入下面的命令，创建本地仓库。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><blockquote><p>执行完该命令后，在工作目录下会生成一个隐藏的目录.git，.git 目录就是我们的本地仓库，记录所有版本。</p></blockquote><h3 id="把已修改添加到暂存区"><a href="#把已修改添加到暂存区" class="headerlink" title="把已修改添加到暂存区"></a>把已修改添加到暂存区</h3><p>\$ git add . 把工作目录中所有的修改，都提交到<strong>暂存区</strong>。<br>在第一次 add 都还没有进行的时候，我们的暂存区还没有被创建出来，git 的对象库中也是空的。当我们执行 git add 的时候，.git 目录下面多了个 index 文件，这个 index 文件就是我们所说的暂存区，</p><blockquote><p>暂存区在哪里？<br>当第一次执行 git add 的时候会在.git 文件夹中生成一个 index 文件，这就是暂存区</p></blockquote><h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>\$ git status<br>git status 可以查看当前工作区中是否有可以暂存的文件、是否有可以提交的内容。</p><h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><p>\$ git commit -m ‘提交注释’<br><strong>注意</strong>：git commit 的-m 参数是本次提交说明，必须填写，可以方便查看历史提交中的修改记录。</p><blockquote><p>注意: git init 只需要写一次</p></blockquote><h3 id="git-远程仓库"><a href="#git-远程仓库" class="headerlink" title="git-远程仓库"></a>git-远程仓库</h3><blockquote><p>代码托管平台(github/码云)</p></blockquote><ol><li>注册</li><li>登录</li><li>新建远程仓库 (右上角+-&gt;new-&gt;命名-&gt;create)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 关联远程仓库</span><br><span class="line">git remote add origin 仓库地址</span><br><span class="line">// 推送代码</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 开发功能1 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释1&quot;</span><br><span class="line">// 开发功能2 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释2&quot;</span><br><span class="line">// 推送代码</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>01</td><td><strong>git config –global user.name “xxx”</strong></td><td>设置用户名</td></tr><tr><td>02</td><td><strong>git config –global user.email <a href="mailto:xxx@example.com" target="_blank" rel="noopener">xxx@example.com</a></strong></td><td>设置邮箱</td></tr><tr><td>03</td><td><strong>git init</strong></td><td>初始化本地仓库</td></tr><tr><td>04</td><td><strong>git add .</strong></td><td>把修改保存到暂存区</td></tr><tr><td>05</td><td><strong>git status</strong></td><td>检查当前文件状态</td></tr><tr><td>06</td><td><strong>git commit -m “msg”</strong></td><td>提交到本地仓库</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3伸缩布局盒模型</title>
      <link href="/keaichong.github.io/2019/02/02/CSS3%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/keaichong.github.io/2019/02/02/CSS3%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="伸缩布局基本概念"><a href="#伸缩布局基本概念" class="headerlink" title="伸缩布局基本概念"></a>伸缩布局基本概念</h3><blockquote><p>CSS3 引入的布局模式 Flexbox 布局，主要思想是让容器有能力让其子项目能够改变其宽度，高度，以最佳方式填充可用空间。Flex 容器使用 Flex 项目可以自动放大与收缩，用来填补可用的空闲空间。更重要的是，Flexbox 布局方向不可预知，不像常规的布局(块级从上到下，内联从左到右)，而那些常规的适合页面布局，但对于支持大型或者复杂的应<br>布局解决方案 没有具体数字,通过一系列属性控制</p></blockquote><h3 id="伸缩盒模型术语"><a href="#伸缩盒模型术语" class="headerlink" title="伸缩盒模型术语"></a>伸缩盒模型术语</h3><blockquote><p>伸缩盒子中有两条轴 -&gt;主轴和侧轴<br><strong>主轴</strong>: 默认水平从左往右显示</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置主轴方向 */</span></span><br><span class="line">flex-direction:row | column</span><br><span class="line"><span class="comment">/* 设置元素在主轴方向对齐方式 */</span></span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-start</span>;  主轴开始位置对齐</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-end</span>;    主轴结束位置对齐</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-center</span>;    主轴中间显示</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span>;    两端对齐中间自适应</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-around</span>;  环绕对齐</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>侧轴</strong> :始终垂直与主轴</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置元素在侧轴方向对齐方式 */</span></span><br><span class="line">align-items:flex-start | flex-end | center | baseline | stretch</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-start</span>:伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边。</span><br><span class="line"><span class="selector-tag">flex-end</span>:伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边。</span><br><span class="line"><span class="selector-tag">center</span>:伸缩项目的外边距盒在该行的侧轴上居中放置。</span><br><span class="line"><span class="selector-tag">baseline</span>:如果伸缩项目的行内轴与侧轴为同一条，则该值和<span class="selector-tag">flex-start</span>等效。其它情况下，该值将参与基线对齐。所有参与该对齐方式的伸缩项目将按下列方式排列：首先将这些伸缩项目的基线进行对齐，随后其中基线至侧轴起点边的外边距距离最长的那个项目将紧靠住该行在侧轴起点的边。</span><br><span class="line"><span class="selector-tag">stretch</span>:拉伸(和父盒子宽高一样)</span><br><span class="line">### <span class="selector-tag">Flex</span>容器属性</span><br></pre></td></tr></table></figure><blockquote><p>要改变元素的模式为伸缩容器,需要使用 display 属性.</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display: flex | inline-flex;</span><br></pre></td></tr></table></figure><blockquote><p>inline-flex 内联伸缩容器</p></blockquote><h3 id="flex-wrap-换行"><a href="#flex-wrap-换行" class="headerlink" title="flex-wrap 换行"></a>flex-wrap 换行</h3><blockquote><p>默认情况下，Flex 项目都尽可能在一行显示，会导致子元素原来的宽高失效.所以你可以根据 flex-wrap 的属性值来改变，让 Flex 项目多行显示。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-wrap: warp | nowarp 默认nowarp;</span><br></pre></td></tr></table></figure><h3 id="元素换行后对齐方式"><a href="#元素换行后对齐方式" class="headerlink" title="元素换行后对齐方式"></a>元素换行后对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">align-content: flex-start | flex-end | center |space-between |space-around|</span><br><span class="line">  <span class="selector-tag">strech</span>;</span><br></pre></td></tr></table></figure><h3 id="设置子元素属性"><a href="#设置子元素属性" class="headerlink" title="设置子元素属性"></a>设置子元素属性</h3><p>伸缩比 flex:1</p><h3 id="设置元素自身对齐方式"><a href="#设置元素自身对齐方式" class="headerlink" title="设置元素自身对齐方式"></a>设置元素自身对齐方式</h3><p>align-self: center|auto |flex-start| flex-end</p><h3 id="设置子元素排列顺序"><a href="#设置子元素排列顺序" class="headerlink" title="设置子元素排列顺序"></a>设置子元素排列顺序</h3><p>order:1,2,3 默认 0 数字越小越靠前显示</p>]]></content>
      
      
      
        <tags>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局总结</title>
      <link href="/keaichong.github.io/2019/02/02/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
      <url>/keaichong.github.io/2019/02/02/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="响应式布局概念"><a href="#响应式布局概念" class="headerlink" title="响应式布局概念"></a>响应式布局概念</h3><blockquote><p>Responsive Web Design（响应式布局）这个名词是 Ethan Marcotte 在 2010 年提出.简单说呢就针对不同的屏幕分辨率应用不同的 CSS 样式。比如在电脑、Pad 设备上，屏幕比较宽，就可以一行放多个 Div。到了手机上，或者 Pad 竖着拿的的时候，一行就只放 1 到 2 个 Div 就差不多了。这样在移动设备上,无论是字体大小还是页面布局就不会显得很局促.一切都是为了客户的体验度.</p></blockquote><h3 id="meta-标签设置"><a href="#meta-标签设置" class="headerlink" title="meta 标签设置"></a>meta 标签设置</h3><blockquote><p>下面的这段话在响应式布局里面必不可少</p></blockquote><h5 id="网页宽度调整"><a href="#网页宽度调整" class="headerlink" title="网页宽度调整"></a>网页宽度调整</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">上面这行代码的意思是：网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1.0），即网页初始大小占屏幕面积的100%。</span><br><span class="line">当然这里除了这两个属性之外,还可以加上其他几个属性,比较完整的是这个样子:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line">maximum-scale=1.0,</span><br><span class="line">minimum-scale=1.0;可视区域的缩放级别，maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上,minimum-scale=1.0当然就是禁止缩小了。user-scalable:是否可对页面进行缩放，no</span><br><span class="line">禁止缩放</span><br><span class="line">所有主流浏览器都支持这个设置，包括IE9。对于那些老式浏览器（主要是IE6、7、8），需要另外重写。</span><br></pre></td></tr></table></figure><h3 id="不使用绝对宽度和字体"><a href="#不使用绝对宽度和字体" class="headerlink" title="不使用绝对宽度和字体"></a>不使用绝对宽度和字体</h3><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。<span class="selector-tag">css</span>代码不能指定像素宽度：<span class="selector-tag">width</span>: <span class="selector-tag">number</span></span><br><span class="line">  <span class="selector-tag">px</span>;</span><br><span class="line">只能指定百分比宽度：<span class="selector-tag">width</span>: <span class="selector-tag">x</span>%;</span><br><span class="line">或者自动：<span class="selector-tag">width</span>: <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><h3 id="media-query-媒体查询"><a href="#media-query-媒体查询" class="headerlink" title="media query 媒体查询"></a>media query 媒体查询</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码,表示正常情况下 div 的 width 还是维持在 30%没有变化,但是当检测到 screen 的最大宽度是 600px 的时候,就将执行@media 里面的 css,其实就是相当于利用了层叠样式表的特性,@media 里面的代码将原来的覆盖了.由此可见,@media 放在 div 样式前面可以吗?</p><p>当然,既然又 max-width,就会有 min-width,很多初学者一直没搞清楚这两个的区别,老是搞混淆.其实记住一点. max-width 就是当屏幕小于等于多少的时候执行(&lt;=) min-width 就是当屏幕大于等于多少的时候执行(&gt;=)</p><p>所以,有时候精确判断的时候,可以写 屏幕&gt;=多少 and 屏幕 &lt;= 多少的时候执行:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">601px</span>) and (max-width: <span class="number">980px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码相当于,当 屏幕宽度 &gt;= 601px &amp;&amp; 屏幕宽度 &lt;= 980px 的时候,页面上实际上在一行显示 2 个 div,因为 2 个 45%就已经是 90%,剩下的那个肯定就被挤下去了.</p><p>当屏幕宽度&lt;=600px 的时候,就让一个 div 占满一行(95%)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
