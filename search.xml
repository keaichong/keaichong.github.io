<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>localStoragr和cookie区别用法</title>
      <link href="/keaichong.github.io/2019/02/14/localStoragr%E5%92%8Ccookie%E5%8C%BA%E5%88%AB%E7%94%A8%E6%B3%95/"/>
      <url>/keaichong.github.io/2019/02/14/localStoragr%E5%92%8Ccookie%E5%8C%BA%E5%88%AB%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote><p>localStorage 生命周期是永久，这意味着除非用户显示在浏览器提供的 UI 上清除 localStorage 信息，否则这些信息将永远存在。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。</p></blockquote><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><blockquote><p>sessionStorage 仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为 5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持。</p></blockquote><ul><li>localStorage 和 sessionStorage 使用时使用相同的 API：</li><li>写入和读取都有三种写法<a id="more"></a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage;</span><br><span class="line"><span class="comment">//写入a字段</span></span><br><span class="line">storage[<span class="string">"a"</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//写入b字段</span></span><br><span class="line">storage.a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//写入c字段</span></span><br><span class="line">storage.setItem(<span class="string">"c"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/14/localStoragr和cookie区别用法/localStorage.png"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官方推荐写法</span></span><br><span class="line"> localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>);<span class="comment">//以“key”为名称存储一个值“value”</span></span><br><span class="line"></span><br><span class="line">localStorage.getItem(<span class="string">"key"</span>);<span class="comment">//获取名称为“key”的值</span></span><br><span class="line"></span><br><span class="line">localStorage.removeItem(<span class="string">"key"</span>);<span class="comment">//删除名称为“key”的信息。</span></span><br><span class="line"></span><br><span class="line">localStorage.clear();​<span class="comment">//清空localStorage中所有信息</span></span><br></pre></td></tr></table></figure><p>京东官网顶部的广告关闭，效果为第一次进入官网会出现广告，然后点击关闭，刷新网页不会再显示广告，但是当清除 localStorage 存入的数据，刷新网页会再显示广告。<br>苏宁官网顶部广告数据保存在 cookie 中,当清除 cookie 中的数据时候,刷新网页也会再次显示广告</p><p>京东广告相关 js 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//localStorage方法</span></span><br><span class="line">&lt;script src=<span class="string">"../js/jquery.min.js"</span> /&gt;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">haxi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断localStorage里有没有isClose</span></span><br><span class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">"isClose"</span>)) &#123;</span><br><span class="line">    $(<span class="string">".header"</span>).hide();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">".header"</span>).show();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//点击关闭隐藏图片存取数据</span></span><br><span class="line">  $(<span class="string">".close"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".header"</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    localStorage.setItem(<span class="string">"isClose"</span>, <span class="string">"1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">haxi();</span><br></pre></td></tr></table></figure><h3 id="作用域不同"><a href="#作用域不同" class="headerlink" title="作用域不同"></a>作用域不同</h3><p>不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>生命期为只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为 4K 左右 。有个数限制（各浏览器不同），一般不能超过 20 个。与服务器端通信：每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题。但 Cookie 需要程序员自己封装，源生的 Cookie 接口不友好</p><h3 id="cookie-的优点：具有极高的扩展性和可用性"><a href="#cookie-的优点：具有极高的扩展性和可用性" class="headerlink" title="cookie 的优点：具有极高的扩展性和可用性"></a>cookie 的优点：具有极高的扩展性和可用性</h3><p>1.通过良好的编程，控制保存在 cookie 中的 session 对象的大小。<br>2.通过加密和安全传输技术，减少 cookie 被破解的可能性。<br>3.只有在 cookie 中存放不敏感的数据，即使被盗取也不会有很大的损失。<br>4.控制 cookie 的生命期，使之不会永远有效。这样的话偷盗者很可能拿到的就 是一个过期的 cookie。</p><h3 id="cookie-的缺点："><a href="#cookie-的缺点：" class="headerlink" title="cookie 的缺点："></a>cookie 的缺点：</h3><p>1.cookie 的长度和数量的限制。每个 domain 最多只有 20 条 cookie，每个 cookie 长度不能超过 4KB。则会被截掉。<br>2.安全性问题。如果 cookie 被人拦掉了，那个人就可获取到所有 session 信息。加密的话也不起什么作用。<br>3.有些状态不可能保存在客户端。例如，为了防止重复提表单，我们需要在服务端保存一个计数器。若吧计数器保在客户端，则起不到什么作用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>exportdefault和export的使用方式</title>
      <link href="/keaichong.github.io/2019/02/12/exportdefault%E5%92%8Cexport%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/keaichong.github.io/2019/02/12/exportdefault%E5%92%8Cexport%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="node-和-ES6-中导入模块区别"><a href="#node-和-ES6-中导入模块区别" class="headerlink" title="node 和 ES6 中导入模块区别"></a>node 和 ES6 中导入模块区别</h2><p>node 中导入模块：var 名称 = require(‘模块标识符’)</p><p>node 中向外暴露成员的形式：module.exports = {}</p><p>在 ES6 中，也通过规范的形式，规定了 ES6 中如何导入和导出模块</p><p>ES6 中导入模块，使用 import 模块名称 from ‘模块标识符’    import ‘表示路径’</p><p>import <strong>_ from _</strong> 是 ES6 中导入模块的方式</p><a id="more"></a><h2 id="在-ES6-中，使用-export-default-和-export-向外暴露成员"><a href="#在-ES6-中，使用-export-default-和-export-向外暴露成员" class="headerlink" title="在 ES6 中，使用 export default 和 export 向外暴露成员"></a>在 ES6 中，使用 export default 和 export 向外暴露成员</h2><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'zs'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br></pre></td></tr></table></figure><p>或是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"zs"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> info;</span><br></pre></td></tr></table></figure><p>在 main.js 中接收，test.js 使用 export default 向外暴露的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> person <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/12/exportdefault和export的使用方式/20180826175027288.png"><p>注意：</p><p>1、export default 向外暴露的成员，可以使用任意变量来接收</p><p>2、在一个模块中，export default 只允许向外暴露一次</p><p>3、在一个模块中，可以同时使用 export default 和 export 向外暴露成员</p><p>4、使用 export 向外暴露的成员，只能使用{  }的形式来接收，这种形式，叫做【按需导出】</p><p>5、export 可以向外暴露多个成员，同时，如果某些成员，在 import 导入时，不需要，可以不在{ }中定义</p><p>6、使用 export 导出的成员，必须严格按照导出时候的名称，来使用{ }按需接收</p><p>7、使用 export 导出的成员，如果想换个变量名称接收，可以使用 as 来起别名</p><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  name: <span class="string">"zs"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> title = <span class="string">"小星星"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> content = <span class="string">"哈哈哈"</span>;</span><br></pre></td></tr></table></figure><p>在 main.js 中接收，test.js 使用 export default 和 export 向外暴露的成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> person, &#123; title, content <span class="keyword">as</span> content1 &#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(title + <span class="string">"======="</span> + content1);</span><br></pre></td></tr></table></figure><img src="/keaichong.github.io/2019/02/12/exportdefault和export的使用方式/20180826175958870.png">]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>require和import的区别</title>
      <link href="/keaichong.github.io/2019/02/10/require%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/keaichong.github.io/2019/02/10/require%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。</p></blockquote><h2 id="遵循规范"><a href="#遵循规范" class="headerlink" title="遵循规范"></a>遵循规范</h2><ol><li>require 是 AMD规范引入方式</li><li><p>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p><h2 id="调用时间"><a href="#调用时间" class="headerlink" title="调用时间"></a>调用时间</h2></li><li><p>require是运行时调用，所以require理论上可以运用在代码的任何地方</p></li><li><p>import是编译时调用，所以必须放在文件开头</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2></li><li><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</p></li><li>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require<a id="more"></a><h2 id="require-exports-："><a href="#require-exports-：" class="headerlink" title="require / exports ："></a>require / exports ：</h2></li><li>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。用法只有以下三种简单的写法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">exports.fs = fs</span><br><span class="line"><span class="built_in">module</span>.exports = fs</span><br></pre></td></tr></table></figure></li></ol><h2 id="import-export："><a href="#import-export：" class="headerlink" title="import / export："></a>import / export：</h2><ol><li>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。</li><li>写法就比较多种多样：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> fs&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile <span class="keyword">as</span> read&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> fs, &#123;readFile&#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFile</span></span></span><br><span class="line"><span class="function"><span class="title">export</span> </span>&#123;readFile, read&#125;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'fs'</span></span><br></pre></td></tr></table></figure></li></ol><p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mvc和mvvm</title>
      <link href="/keaichong.github.io/2019/02/04/mvc%E5%92%8Cmvvm/"/>
      <url>/keaichong.github.io/2019/02/04/mvc%E5%92%8Cmvvm/</url>
      
        <content type="html"><![CDATA[<img src="/keaichong.github.io/2019/02/04/mvc和mvvm/01.MVC和MVVM的关系图解.png" title="MVC和MVVM的关系图解"><a id="more"></a><img src="/keaichong.github.io/2019/02/04/mvc和mvvm/vue.png" title="vue图解">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jsonp原理</title>
      <link href="/keaichong.github.io/2019/02/04/Jsonp%E5%8E%9F%E7%90%86/"/>
      <url>/keaichong.github.io/2019/02/04/Jsonp%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="jsonp-工作原理"><a href="#jsonp-工作原理" class="headerlink" title="jsonp 工作原理"></a>jsonp 工作原理</h2><p>利用 script 标签可以跨域,让服务器端返回可以执行的 Javascript 函数,参数为要回发的数据,jsonp 只能发 get 请求</p><h2 id="相关概念-同源"><a href="#相关概念-同源" class="headerlink" title="相关概念(同源)"></a>相关概念(同源)</h2><p>同源策略是浏览器的一种安全策略，所谓同源是指域名(com/cn/localhost)，协议(http/https)，端口完全相同，只有同源的地址才可以相互通过 AJAX 的方式请求。</p><p>浏览器默认情况下，不允许发送跨域的 ajax 请求</p><p>同源或者不同源说的是两个地址之间的关系，不同源地址之间请求我们称之为跨域请求</p><h2 id="jsonp-前端代码"><a href="#jsonp-前端代码" class="headerlink" title="jsonp 前端代码"></a>jsonp 前端代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮，发送跨域的请求，获取到结果</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 创建script标签</span></span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  <span class="comment">// 2. 设置src</span></span><br><span class="line">  script.src = <span class="string">"http://localhost:3000/query?callback=song"</span>;</span><br><span class="line">  <span class="comment">// 3. 把script添加到body</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">  <span class="comment">//执行script中的代码</span></span><br><span class="line">  <span class="comment">//相当于</span></span><br><span class="line">  <span class="comment">// &lt;script&gt;song(data相应数据)&lt;/\script&gt;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//被调用  这种方式需要前后端配合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">song</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">//拿到跨域请求返回的数据 自己根据需要进行后续处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 设置静态资源</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">"public"</span>)));</span><br><span class="line"><span class="keyword">let</span> user = <span class="built_in">require</span>(<span class="string">"./db"</span>);</span><br><span class="line"><span class="comment">// 设置一个路由，返回js代码</span></span><br><span class="line"><span class="comment">// jsonp 的接口</span></span><br><span class="line">app.get(<span class="string">"/query"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置请求头</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/javascript"</span>);</span><br><span class="line">  <span class="comment">// 输出的样式  fn(&#123;....&#125;);</span></span><br><span class="line">  <span class="comment">// 接收查询字符串中的callback</span></span><br><span class="line">  <span class="keyword">let</span> cb = req.query.callback;</span><br><span class="line">  <span class="keyword">let</span> jsonStr = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">  <span class="comment">// jsonString  ---&gt;  [&#123;&#125;,&#123;&#125;];</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回一个调用函数名 把查询字符串的值用模板字符串设为返回的函数名,这样前端就可以通过调用函数拿到script标签返回的数据 cb是函数名song  jsonstr是实参</span></span><br><span class="line">  <span class="keyword">let</span> javascriptString = <span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;jsonStr&#125;</span>);`</span>;</span><br><span class="line">  <span class="comment">//发送了一个调用方式给前端</span></span><br><span class="line">  res.send(javascriptString);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"开始监听：3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装原生ajax</title>
      <link href="/keaichong.github.io/2019/02/03/%E5%B0%81%E8%A3%85%E5%8E%9F%E7%94%9Fajax/"/>
      <url>/keaichong.github.io/2019/02/03/%E5%B0%81%E8%A3%85%E5%8E%9F%E7%94%9Fajax/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-ajax"><a href="#什么是-ajax" class="headerlink" title="什么是 ajax"></a>什么是 ajax</h2><ol><li>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</li><li>Ajax = 异步 JavaScript 和 XML（标准通用标记语言的子集）。</li><li>Ajax 是一种用于创建快速动态网页的技术。</li><li>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。<a id="more"></a></li></ol><h2 id="ajax-基本步骤"><a href="#ajax-基本步骤" class="headerlink" title="ajax 基本步骤"></a>ajax 基本步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器提供一个XMLHttpRquest类型对象,代理浏览器发送请求 并获取一部分数据</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//请求行 请求方式和路径</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"/big-data"</span>);</span><br><span class="line"><span class="comment">//post请求还要设置请求头中content-type</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="comment">//发送请求 请求体 post有请求体 get没有请求体</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//注册事件</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//响应体下载完成 打印响应体内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.status);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简单封装-ajax"><a href="#简单封装-ajax" class="headerlink" title="简单封装 ajax"></a>简单封装 ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求方式  路径  请求数据(请求体&amp;查询字符串 对象形式)  回调==用于获取服务器返回的响应体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">method, path, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把用户传入请求方式转为大写</span></span><br><span class="line">  method = method.toUpperCase();</span><br><span class="line">  <span class="comment">//用空数组接收 构造post请求体&amp;get查询字符串</span></span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="comment">//属性=值&amp;属性=值</span></span><br><span class="line">    arr.push(key + <span class="string">"="</span> + data[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过数组join方法用&amp;符号连接为字符串 例:?id=2&amp;name=zs</span></span><br><span class="line">  str = arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="comment">//判断请求方式</span></span><br><span class="line">  <span class="comment">//get 在路径后拼接上查询字符串</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">    path = path + (path.includes(<span class="string">"?"</span>) ? <span class="string">"&amp;"</span> : <span class="string">"?"</span>) + str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//建立xhr对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="comment">//创建http请求</span></span><br><span class="line">  xhr.open(method, path, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//判断 是否发送请求体</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="comment">//post 要设置请求头中content-type请求体内容类型</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">    <span class="comment">//发送请求体</span></span><br><span class="line">    xhr.send(str);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//注册事件 接收服务器返回结果</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// try 尝试着执行代码 catch 如果执行出错，会被catch 捕获到错误</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//解析返回数据 响应体 把json格式字符串转为 对象</span></span><br><span class="line">      <span class="comment">//接受的不是json格式字符串再json.parse转换时候  会报错 catch捕获错误 继续执行</span></span><br><span class="line">      <span class="comment">// JSON格式，属性和字符串类型，必须使用双引号</span></span><br><span class="line">      <span class="comment">// res.send('&#123;"name": "zs", "age": 18 &#125;');</span></span><br><span class="line">      <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">      <span class="comment">//第四个参数 调用回调函数</span></span><br><span class="line">      <span class="comment">// 作用: 把obj 传给第四个参数(回调函数)接收 不然无法接受响应体</span></span><br><span class="line">      callback(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用封装的-ajax-方法"><a href="#调用封装的-ajax-方法" class="headerlink" title="调用封装的 ajax 方法"></a>调用封装的 ajax 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ajax(</span><br><span class="line">  <span class="string">"post"</span>,</span><br><span class="line">  <span class="string">"/add1"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"lisi"</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//data 是传过来的obj this.responseText</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我接下来要做的事"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery常用api二</title>
      <link href="/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%BA%8C/"/>
      <url>/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h2><ul><li>jQuery 操作元素的尺寸</li><li>jQuery 操作元素的位置</li><li>jQuery 事件操作（注册、移除、事件委托、触发）</li></ul><h2 id="jQuery-操作元素的尺寸"><a href="#jQuery-操作元素的尺寸" class="headerlink" title="jQuery 操作元素的尺寸"></a>jQuery 操作元素的尺寸</h2><h3 id="width-和-height-方法"><a href="#width-和-height-方法" class="headerlink" title="width 和 height 方法"></a>width 和 height 方法</h3><blockquote><p>操作的大小仅仅是内容部分</p></blockquote><ul><li><p>设置：</p><ul><li>语法：jQuery 对象.width(数字);</li></ul></li><li><p>获取：</p><ul><li>语法：jQuery 对象.width();</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="string">"div"</span>).width();</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(<span class="string">"div"</span>).width(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="innerWidth-和-innerHeight-方法"><a href="#innerWidth-和-innerHeight-方法" class="headerlink" title="innerWidth 和 innerHeight 方法"></a>innerWidth 和 innerHeight 方法</h3><blockquote><p>操作的大小是内容部分 + padding<br><a id="more"></a></p><ul><li>设置：</li></ul></blockquote><ul><li>语法：jQuery 对象.innerWidth(数字);</li></ul><ul><li><p>获取：</p><ul><li>语法：jQuery 对象.innerWidth();</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="string">"div"</span>).innerWidth();</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(<span class="string">"div"</span>).innerWidth(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="outerWidth-和-outerHeight-方法"><a href="#outerWidth-和-outerHeight-方法" class="headerlink" title="outerWidth 和 outerHeight 方法"></a>outerWidth 和 outerHeight 方法</h3><blockquote><p>操作的大小是内容部分 + padding + border</p></blockquote><ul><li><p>设置：</p><ul><li>语法：jQuery 对象.outerWidth(数字);</li></ul></li><li><p>获取：</p><ul><li>语法：jQuery 对象.outerWidth();</li></ul></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="string">"div"</span>).outerWidth();</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(<span class="string">"div"</span>).outerWidth(<span class="number">300</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-操作元素的位置"><a href="#jQuery-操作元素的位置" class="headerlink" title="jQuery 操作元素的位置"></a>jQuery 操作元素的位置</h2><h3 id="获取元素距离文档的位置"><a href="#获取元素距离文档的位置" class="headerlink" title="获取元素距离文档的位置"></a>获取元素距离文档的位置</h3><ul><li><p>语法：jQuery 对象.offset(); 返回一个对象，对象中包含了元素的位置</p></li><li><p>注意：</p><blockquote><p>offset()方法获取的元素的位置，永远参照文档。和定位没有关系</p></blockquote></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = $(<span class="string">".s"</span>).offset();</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="built_in">console</span>.log(o.top);</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素距离上级定位元素的位置"><a href="#获取元素距离上级定位元素的位置" class="headerlink" title="获取元素距离上级定位元素的位置"></a>获取元素距离上级定位元素的位置</h3><ul><li><p>语法：jQuery 对象.position(); 返回的一个对象，对象中包含了元素的位置</p></li><li><p>注意：</p><blockquote><p>position()方法获取的元素的位置,参照最近的定位元素（和定位有关系）</p></blockquote></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = $(<span class="string">".s"</span>).position();</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="built_in">console</span>.log(o.top);</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作卷去的页面间距"><a href="#操作卷去的页面间距" class="headerlink" title="操作卷去的页面间距"></a>操作卷去的页面间距</h3><ul><li><p>获取</p><ul><li>语法：jQuery 对象.scrollTop(); 返回数字</li></ul></li><li><p>设置</p><ul><li>语法：jQuery 对象.scrollTop(数字);</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取被卷起的间距</span></span><br><span class="line">  <span class="keyword">var</span> v = $(<span class="keyword">this</span>).scrollTop();</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置卷起的间距</span></span><br><span class="line">  $(<span class="string">"div"</span>).scrollTop(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-事件操作"><a href="#jQuery-事件操作" class="headerlink" title="jQuery 事件操作"></a>jQuery 事件操作</h2><h3 id="简单方式注册事件"><a href="#简单方式注册事件" class="headerlink" title="简单方式注册事件"></a>简单方式注册事件</h3><ul><li><p>语法：jQuery 对象.事件名(事件处理程序);</p><p><img src="media/01.png" alt=""></p><p>​</p></li></ul><h3 id="on-方法注册事件"><a href="#on-方法注册事件" class="headerlink" title="on 方法注册事件"></a>on 方法注册事件</h3><ul><li><p>注册简单事件语法：jQuery 对象.on(‘事件名’,事件处理程序);</p></li><li><p>事件委托的实现：jQuery 对象.on(‘事件名’,’选择器’,事件处理程序);</p><ul><li>选择器：子孙元素</li><li>注意：在事件处理程序中，this 代表的是子孙元素（所点最先触发的）</li></ul></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册简单的事件</span></span><br><span class="line">$(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【JQ方式实现事件委托-把li委托给ul】</span></span><br><span class="line">$(<span class="string">"ul"</span>).on(<span class="string">"click"</span>, <span class="string">"li"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 是谁？ 当前点击的li</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  alert($(<span class="keyword">this</span>).text());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="off-方法移除事件"><a href="#off-方法移除事件" class="headerlink" title="off 方法移除事件"></a>off 方法移除事件</h3><ul><li><p>解绑简单的事件：jQuery 对象.off(‘click’,事件处理程序名称)</p></li><li><p>解绑事件委托注册的事件：jQuery 对象.off(‘click’,‘选择器’,事件处理程序名称)</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑按钮的事件处理程序：fn1和fn2</span></span><br><span class="line">$(<span class="string">"button"</span>).off(<span class="string">"click"</span>, fn1);</span><br><span class="line">$(<span class="string">"button"</span>).off(<span class="string">"click"</span>, fn2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑通过事件委托给p注册的事件处理程序 fn2</span></span><br><span class="line">$(<span class="string">"div"</span>).off(<span class="string">"click"</span>, <span class="string">"p"</span>, fn2);</span><br></pre></td></tr></table></figure></li></ul><h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><ul><li><p>语法：jQuery 对象.trigger(‘事件名’);</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote><p>如何获取事件对象？</p><p>​ 事件处理程序的第一个形参-e</p></blockquote><ul><li>鼠标事件对象相关的属性<ul><li>事件对象.clientX/Y 参照浏览器</li><li>事件对象.pageX/Y 参照文档</li><li>事件对象.offsetX/Y 参照元素</li></ul></li><li>键盘事件对象相关的属性<ul><li>事件对象.keyCode 返回键码数字</li><li>事件对象.alt/shift/ctrlKey 返回是布尔值。 检测是否按下（true）</li></ul></li><li>公共的属性或方法<ul><li>属性<ul><li>事件对象.target;</li></ul></li><li>方法：<ul><li>事件对象.preventDefault(); 阻止默认行为</li><li>事件对象.stopPropagation(); 阻止事件冒泡</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery常用api一</title>
      <link href="/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%B8%80/"/>
      <url>/keaichong.github.io/2019/02/03/JQuery%E5%B8%B8%E7%94%A8api%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-对象和-DOM-对象的区别"><a href="#jQuery-对象和-DOM-对象的区别" class="headerlink" title="jQuery 对象和 DOM 对象的区别"></a>jQuery 对象和 DOM 对象的区别</h2><ul><li>jQuery 对象只能使用 jQuery 对象中提供的属性或方法，不能够使用 DOM 对象中提供的属性或方法</li><li>DOM 对象只能使用 DOM 对象中提供的属性或方法，不能使用 jQuery 对象中提供的属性或方法</li></ul><h2 id="DOM-对象转-jQuery-对象"><a href="#DOM-对象转-jQuery-对象" class="headerlink" title="DOM 对象转 jQuery 对象"></a>DOM 对象转 jQuery 对象</h2><ul><li><p>语法： ==\$(dom 对象);==</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 【DOM对象  转  jQuery对象】</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 转换</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $div = $(div);</span></span><br><span class="line"><span class="undefined">  $div.css(&#123;</span></span><br><span class="line"><span class="undefined">    width: 500,</span></span><br><span class="line"><span class="undefined">    height: 500,</span></span><br><span class="line"><span class="javascript">    border: <span class="string">"1px solid"</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="jQuery-对象转-DOM-对象"><a href="#jQuery-对象转-DOM-对象" class="headerlink" title="jQuery 对象转 DOM 对象"></a>jQuery 对象转 DOM 对象</h2><ul><li><p>语法：jQuery 对象[索引]; 本质就是从伪数组中取出指定的 dom 对象</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// jQuery对象转DOM对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> div = $(<span class="string">"div"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">  div.innerText = <span class="string">"我是文本"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-jQuery-操作样式"><a href="#四-jQuery-操作样式" class="headerlink" title="四.jQuery 操作样式"></a>四.jQuery 操作样式</h2></li></ul><h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><ul><li><p>设置单个样式： jQuery 对象.css(name,value);</p></li><li><p>设置多个样式：</p><blockquote><p>jQuery 对象.css({</p><p>​ name:value,</p><p>​ name:value,</p><p>​ name:value,</p><p>​ name:value</p><p>});</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 设置单个样式</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(<span class="string">"width"</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(<span class="string">"height"</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(<span class="string">"background"</span>, <span class="string">"red"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 设置多个样式</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).css(&#123;</span></span><br><span class="line"><span class="javascript">    border: <span class="string">"10px solid blue"</span>,</span></span><br><span class="line"><span class="javascript">    background: <span class="string">"pink"</span>,</span></span><br><span class="line"><span class="javascript">    color: <span class="string">"green"</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取样式值"><a href="#获取样式值" class="headerlink" title="获取样式值"></a>获取样式值</h2><ul><li><p>语法： jQuery 对象.css(‘样式属性名’);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  div &#123;</span></span><br><span class="line"><span class="undefined">    width: 300px;</span></span><br><span class="line"><span class="undefined">    height: 300px;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    left: 200px;</span></span><br><span class="line"><span class="undefined">    top: 100px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> h = $(<span class="string">"div"</span>).css(<span class="string">"height"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> l = $(<span class="string">"div"</span>).css(<span class="string">"left"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(h);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(l);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="通过选择器获取-jQuery-对象"><a href="#通过选择器获取-jQuery-对象" class="headerlink" title="通过选择器获取 jQuery 对象"></a>通过选择器获取 jQuery 对象</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>ID 选择器</td><td>\$(‘#id’)</td><td style="text-align:left">获取指定 ID 的元素</td></tr><tr><td>类选择器</td><td>\$(‘.class’)</td><td style="text-align:left">获取同一类 class 的元素</td></tr><tr><td>标签选择器</td><td>\$(‘div’)</td><td style="text-align:left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>\$(‘div,p,li’)</td><td style="text-align:left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>\$(‘div.redClass’)</td><td style="text-align:left">获取 class 为 redClass 的 div 元素</td></tr></tbody></table><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>\$(‘ul &gt; li’)</td><td style="text-align:left">使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>\$(‘ul li’)</td><td style="text-align:left">使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table><h3 id="过滤器选择器"><a href="#过滤器选择器" class="headerlink" title="过滤器选择器"></a>过滤器选择器</h3><ul><li>这类选择器都带冒号:</li></ul><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>:eq(index)</td><td>\$(‘li:eq(2)’).css(‘color’, ‘red’)</td><td style="text-align:left">获取到的 li 元素中，选择索引号为 2 的元素，索引号 index<strong>从 0 开始。</strong></td></tr><tr><td>:odd</td><td>\$(‘li:odd’).css(‘color’, ‘red’)</td><td style="text-align:left">获取到的 li 元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>\$(‘li:even’).css(‘color’, ‘red’)</td><td style="text-align:left">获取到的 li 元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>案例：隔行变色</p><h3 id="选择器筛选方法"><a href="#选择器筛选方法" class="headerlink" title="选择器筛选方法"></a>选择器筛选方法</h3><ul><li>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</li></ul><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>\$(‘ul’).children(‘li’)</td><td style="text-align:left">相当于\$(‘ull &gt; i’)，子类选择器</td></tr><tr><td>find(selector)</td><td>\$(‘ul’).find(‘li’)</td><td style="text-align:left">相当于\$(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>\$(‘#first’).siblings(‘li’)</td><td style="text-align:left">查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>\$(‘#first’).parent()</td><td style="text-align:left">查找父亲</td></tr><tr><td>eq(index)</td><td>\$(‘li’).eq(2)</td><td style="text-align:left">相当于\$(‘li:eq(2)’),index 从 0 开始</td></tr><tr><td>next()</td><td>\$(‘li’).next()</td><td style="text-align:left">找下一个兄弟</td></tr><tr><td>prev()</td><td>\$(‘li’).prev()</td><td style="text-align:left">找上一次兄弟</td></tr></tbody></table><h2 id="jQuery-操作类名"><a href="#jQuery-操作类名" class="headerlink" title="jQuery 操作类名"></a>jQuery 操作类名</h2><h3 id="添加类名"><a href="#添加类名" class="headerlink" title="添加类名"></a>添加类名</h3><ul><li><p>语法：==jQuery 对象.addClass(‘类名’);==</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).addClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="移除类名"><a href="#移除类名" class="headerlink" title="移除类名"></a>移除类名</h3><ul><li><p>语法：==jQuery 对象.removeClass(‘类名’);== 删除指定的类名</p></li><li><p>语法：jQuery 对象.removeClass(); 不传参数，表示删除所有的类名</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).removeClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="检测类名是否存在"><a href="#检测类名是否存在" class="headerlink" title="检测类名是否存在"></a>检测类名是否存在</h3><ul><li><p>语法：==jQuery 对象.hasClass(‘类名’);== 返回 true 和 false</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> isHas = $(<span class="string">"div"</span>).hasClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(isHas); <span class="comment">// false;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="类名切换"><a href="#类名切换" class="headerlink" title="类名切换"></a>类名切换</h3><ul><li><p>语法：==jQuery 对象.toggleClass(‘类名’);== 若这个类名存在，则会移除该类名。否则添加该类名</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).toggleClass(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-操作标签的属性"><a href="#jQuery-操作标签的属性" class="headerlink" title="jQuery 操作标签的属性"></a>jQuery 操作标签的属性</h2><h3 id="设置标签的属性"><a href="#设置标签的属性" class="headerlink" title="设置标签的属性"></a>设置标签的属性</h3><ul><li><p>语法：jQuery 对象.attr(name,value);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).attr(<span class="string">"pid"</span>, <span class="number">10010</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="获取标签属性值"><a href="#获取标签属性值" class="headerlink" title="获取标签属性值"></a>获取标签属性值</h3><ul><li><p>语法：jQuery 对象.attr(name);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> r = $(<span class="string">"div"</span>).attr(<span class="string">"pid"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="移除标签的属性"><a href="#移除标签的属性" class="headerlink" title="移除标签的属性"></a>移除标签的属性</h3><ul><li><p>语法：removeAttr(name);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">"div"</span>).removeAttr(<span class="string">"pid"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="prop-方法操作属性"><a href="#prop-方法操作属性" class="headerlink" title="prop 方法操作属性"></a>prop 方法操作属性</h3><blockquote><p>针对：selected、checked、disabled</p></blockquote><ul><li><p>获取属性值</p><ul><li><p>语法：\$(‘input’).prop(‘属性名’);</p></li><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  var isC = $('input').prop('checked');</span></span><br><span class="line"><span class="regexp">  console.log(isC); /</span><span class="regexp">/ false;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置属性值</p><ul><li>语法：\$(‘input’).prop(‘属性名’,值);</li><li>代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  $('input').prop('checked',true);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="jQuery-创建元素"><a href="#jQuery-创建元素" class="headerlink" title="jQuery 创建元素"></a>jQuery 创建元素</h2><ul><li>语法：<strong><code>$(&#39;&lt;li&gt;&lt;/li&gt;&#39;)</code></strong></li></ul><h2 id="jQuery-追加元素"><a href="#jQuery-追加元素" class="headerlink" title="jQuery 追加元素"></a>jQuery 追加元素</h2><h3 id="向父元素最后追加"><a href="#向父元素最后追加" class="headerlink" title="向父元素最后追加"></a>向父元素最后追加</h3><ul><li><p>语法：新创建 jQuery 对象.appendTo(‘父元素选择器’ 或 父元素 jQuery 对象);</p></li><li><p>语法：父元素 jQuery 对象.apeend(新创建的 jQuery 对象);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;li&gt;后裔&lt;/li&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> datas = [<span class="string">"后裔"</span>, <span class="string">"安其拉"</span>, <span class="string">"鲁班"</span>, <span class="string">"小乔"</span>, <span class="string">"虞姬"</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>)</span></span><br><span class="line"><span class="undefined">      .text(datas[i])</span></span><br><span class="line"><span class="javascript">      .appendTo(<span class="string">"ul"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="向父元素最前面追加"><a href="#向父元素最前面追加" class="headerlink" title="向父元素最前面追加"></a>向父元素最前面追加</h3><ul><li><p>语法：新创建 jQuery 对象.prependTo(‘父元素选择器’);</p></li><li><p>语法：父元素 jQuery 对象.prepend(新创建的 jQuery 对象);</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;li&gt;后裔&lt;/li&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> datas = [<span class="string">"后裔"</span>, <span class="string">"安其拉"</span>, <span class="string">"鲁班"</span>, <span class="string">"小乔"</span>, <span class="string">"虞姬"</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="xml">    // $('<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>')</span></span><br><span class="line"><span class="javascript">    <span class="comment">// .text(datas[i])</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// .prependTo('ul');</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"ul"</span>).prepend($(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).text(datas[i]));</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-删除元素"><a href="#jQuery-删除元素" class="headerlink" title="jQuery 删除元素"></a>jQuery 删除元素</h2><ul><li>语法：jQuery 对象.remove(); 删谁就让谁调用这个方法</li></ul><h2 id="jQuery-清空元素"><a href="#jQuery-清空元素" class="headerlink" title="jQuery 清空元素"></a>jQuery 清空元素</h2><ul><li>清空方式 1：==jQuery 对象.empty();== 推荐使用， 清空内部的所有元素及元素相关的事件</li><li>清空方式 2：jQuery 对象.html(‘’); 仅仅清空内部的元素，不清清理内中的元素的事件。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型和原型链理解</title>
      <link href="/keaichong.github.io/2019/02/03/JS%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/"/>
      <url>/keaichong.github.io/2019/02/03/JS%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="原型的作用"><a href="#原型的作用" class="headerlink" title="原型的作用"></a>原型的作用</h2><ol><li>前提：① 将来对象的空间大小，和对象的属性和方法数量有关；② 属性是不一致的，方法是一致。</li><li>问题：内存的浪费</li><li>原因：对象的方法是一致的，每创建一个对象，都为每一个对象分配一个属于各自的方法，方法的数量随 1. 对象的个数，方法数量越来越多。 方法 → 函数 → 数据类型 → 内存</li><li>解决：把多个方法抽取成一个，让所有同类型的对象共享之。</li><li>如何实现：通过原型，把方法放入到原型中，就可以被构造函数创建的对象共享。</li></ol><h2 id="对象查找属性和方法的流程"><a href="#对象查找属性和方法的流程" class="headerlink" title="对象查找属性和方法的流程"></a>对象查找属性和方法的流程</h2><ol><li>会先从实例对象本身查找</li><li>如果没找到,实例对象通过构造函数对象.<em>proto</em>所提供的原型地址找到原型</li><li>从原型中查找要访问属性或方法</li><li>如果还是没找到,则在原型对象.<em>proto</em>中查找，一直到 null，如果没有则返回 undefined</li></ol><h2 id="获取原型"><a href="#获取原型" class="headerlink" title="获取原型"></a>获取原型</h2><blockquote><p>语法:函数名.prototype</p></blockquote><h2 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h2><blockquote><p>语法: 原型.constructor<br><a id="more"></a></p></blockquote><h2 id="原型添加属性方法"><a href="#原型添加属性方法" class="headerlink" title="原型添加属性方法"></a>原型添加属性方法</h2><blockquote><p>语法:函数名.prototype.key = value</p></blockquote><blockquote><p>注意:数组和字符串中的 prototype 不要修改,修改后自带的方法就没有了,可以采用添加方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.getMax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="JQuery-原型添加方法"><a href="#JQuery-原型添加方法" class="headerlink" title="JQuery 原型添加方法"></a>JQuery 原型添加方法</h2><blockquote><p>语法:$.prototype.方法 = function(){}<br>简写:  $.fn.方法 = function(){}</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Zaxlct"</span>, <span class="number">28</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Mick"</span>, <span class="number">23</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure><p>上面的例子中 person1 和 person2 都是 Person 的实例。这两个实例都有一个 constructor （构造函数）属性，该属性（是一个指针）指向 Person。 即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>person1 和 person2 都是 构造函数 Person 的实例<br>实例的构造函数属性（constructor）指向构造函数。</p><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote><p>在 JavaScript 中，每当定义一个对象（函数也是对象）时候，对象中都会包含一些预定义的属性。其中每个函数对象都有一个 prototype 属性，这个属性指向函数的原型对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Zaxlct"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">28</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">// 'Zaxlct'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">// 'Zaxlct'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="认识原型链"><a href="#认识原型链" class="headerlink" title="认识原型链"></a>认识原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给Object的构造函数的原型添加了一个属性a</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【构造函数】</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【获取原型】</span></span><br><span class="line"><span class="keyword">var</span> yx = Hero.prototype;</span><br><span class="line"><span class="comment">// 语法：对象.key = value</span></span><br><span class="line">yx.attack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"正在发飙...."</span>);</span><br><span class="line">&#125;;</span><br><span class="line">yx.type = <span class="string">"英雄"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个英雄对象</span></span><br><span class="line"><span class="keyword">var</span> hy = <span class="keyword">new</span> Hero(<span class="string">"后裔"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hy.type);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链</span></span><br><span class="line"><span class="comment">// 属性的查找规则</span></span><br><span class="line"><span class="comment">// ① 从对象本身中查找，若没找到</span></span><br><span class="line"><span class="comment">// ② 则通过__proto__提供的原型的地址，找到yx，从yx中查找，若也没找到</span></span><br><span class="line"><span class="comment">// ③ 在原型的中也有一个__proto__，则会通过__proto__找到原型的原型</span></span><br><span class="line"><span class="comment">// 这个查找的过程之所以能够执行，是因为原型链的存。</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.a);</span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__); <span class="comment">// Hero.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__.__proto__); <span class="comment">// Object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(hy.__proto__.__proto__.__proto__); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS闭包和递归</title>
      <link href="/keaichong.github.io/2019/02/02/JS%E9%97%AD%E5%8C%85%E5%92%8C%E9%80%92%E5%BD%92/"/>
      <url>/keaichong.github.io/2019/02/02/JS%E9%97%AD%E5%8C%85%E5%92%8C%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 closure"></a>闭包 closure</h3><blockquote><p>闭包是一个子函数，子函数一定要把内部和外部关联起来。闭包满足两个条件 一,让内部和外部关联 二,内层子函数可以操作到外层函数变量<br>理解:函数作为返回值，函数作为参数传递</p></blockquote><ol><li>变量保存在内存中 变量的生命周期: 变量什么时候被释放</li><li>全局变量生命周期: 退出程序后才会被释放</li><li>局部变量生命周期: 函数调用时候产生,本次结束后释放局部变量</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域是在函数定义时决定的,从内层向外层访问<br>问题: 外层作用域无法操作内层作用域变量<br>原因: 局部作用域生命周期在调用结束后释放了,因此外层不能访问.<br>需求: 让外层作用域操作到内层作用域<br>实现: 用闭包来延长局部变量的生命周期</p><h3 id="闭包中的-GC-垃圾回收机制"><a href="#闭包中的-GC-垃圾回收机制" class="headerlink" title="闭包中的 GC 垃圾回收机制"></a>闭包中的 GC 垃圾回收机制</h3><a id="more"></a><p>运行中的程序的数据是存放在内存中<br> 在运行的过程中有一个叫 GC 的机制（Garbage Collection 垃圾回收机制）<br>GC 相当于生活中的保洁，会不定时去清理内存中的没有用的数据,也就是不在被引用的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bieShu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>; <span class="comment">// 局部变量</span></span><br><span class="line">  <span class="keyword">var</span> guanjia = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 管家</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = a + num;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> guanjia;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cyqz = bieShu();</span><br><span class="line"><span class="comment">// 若函数内部中的a不在了，10 是无法和a相加的得出结果13的</span></span><br><span class="line"><span class="comment">// 若a还在，10 和 a得出结果是13， 说a在bieshu这函数调用完毕后没有被释放。</span></span><br><span class="line"><span class="comment">// 怎么延长的？ 内部的子函数当做桥梁和外部关联→ 外部直在应用或操作函数内部的局部变量→ 所以局部变量没有当做垃圾数据释放</span></span><br><span class="line">cyqz(<span class="number">10</span>); <span class="comment">// a = 13</span></span><br><span class="line">cyqz(<span class="number">10</span>); <span class="comment">// a = 23</span></span><br><span class="line">cyqz(<span class="number">10</span>); <span class="comment">// a = 23</span></span><br><span class="line"><span class="comment">// 如何调试： 在子函数内部设置断点→ 进入子函数内部后 → 查看右侧是否有clouser存在</span></span><br></pre></td></tr></table></figure><h3 id="闭包用途"><a href="#闭包用途" class="headerlink" title="闭包用途"></a>闭包用途</h3><ol><li>函数外部读取函数内部成员</li><li>函数内成员始终存活在内存之中(延长局部变量生命周期)</li><li>维护私有变量的安全(例如 取款机取钱)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//The Window</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn = object.getNameFunc();</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.name); <span class="comment">//My Object</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn = object.getNameFunc();</span><br><span class="line"><span class="built_in">window</span>.fn();</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>程序调用自身 作用:减少代码量</p></blockquote><h3 id="递归的三个阶段"><a href="#递归的三个阶段" class="headerlink" title="递归的三个阶段"></a>递归的三个阶段</h3><ul><li>递归前进段</li><li>递归边界条件</li><li>递归返回段<br>1,1,2,3,5,8……….求第 n 个数是多少 斐波那契数列 用递归实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFbi</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getFbi(n - <span class="number">1</span>) + getFbi(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getFbi(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向问题和改变this的方法</title>
      <link href="/keaichong.github.io/2019/02/02/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
      <url>/keaichong.github.io/2019/02/02/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol><li><p>普通函数和定时器中的 this 指向 window</p></li><li><p>对象方法中的 this 指向调用者</p></li><li><p>构造函数中的 this 指向实例对象(当前创建对象)</p></li><li><p>事件处理函数中的 this 指向事件源</p></li><li><p>箭头函数没有自己的 this,它的 this 是外部函数的 this</p></li></ol><h2 id="bind-call-apply-改变-this-指向"><a href="#bind-call-apply-改变-this-指向" class="headerlink" title="bind call apply 改变 this 指向"></a>bind call apply 改变 this 指向</h2><a id="more"></a><h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call 方法"></a>call 方法</h4><ol><li>语法:函数名.call(调用者,参数 1,参数 2,…)</li><li>会立即执行,this 指向调用者</li></ol><h4 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply 方法"></a>apply 方法</h4><ol><li>语法: 函数名.apply(调用者,数组)</li><li>会立即执行,this 指向调用者</li></ol><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><ol><li>语法: 函数名.bind(调用者,参数 1,参数 2,…)</li><li>call 和 apply 都是对函数的直接调用，而 bind 方法返回的仍然是一个函数，因此后面还需要()来进行调用才可以</li><li>bind() 方法和前两者不同在于： bind() 方法会返回执行上下文被改变的函数而不会立即执行，而前两者是直接执行该函数。他的参数和 call()相同</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组字符串常用方法</title>
      <link href="/keaichong.github.io/2019/02/02/js%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/keaichong.github.io/2019/02/02/js%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法:"></a>数组常用方法:</h2><ol><li>push(): 向数组尾部添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="built_in">console</span>.log(arr);        <span class="comment">//  [1, 2, 3]</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">var</span> b = arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="number">4</span> <span class="built_in">console</span>.log(b);          <span class="comment">//  4   //表示当前数组长度</span></span><br><span class="line"><span class="number">5</span> <span class="built_in">console</span>.log(arr);        <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>pop(): 删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="built_in">console</span>.log(arr);                <span class="comment">// [1,2,3]</span></span><br><span class="line"><span class="number">3</span> arr.pop();</span><br><span class="line"><span class="number">4</span> <span class="built_in">console</span>.log( arr.pop() );　　<span class="comment">// [3]　　//返回删除的元素</span></span><br><span class="line"><span class="number">5</span> <span class="built_in">console</span>.log(arr);                <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>unshift():在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。<a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span> arr.unshift(<span class="string">'x'</span>);        <span class="comment">// 4</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr);        <span class="comment">// ['x', 'a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></li></ol><p>shift():删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span> arr.shift()         <span class="comment">// 'a'</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)     <span class="comment">// ['b', 'c']</span></span><br></pre></td></tr></table></figure><p>shift()方法还可以遍历并清空一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="number">2</span> <span class="keyword">var</span> item;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> (item = list.shift()) &#123;</span><br><span class="line"><span class="number">5</span>   <span class="built_in">console</span>.log(item);</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="built_in">console</span>.log(list);     <span class="comment">// []</span></span><br></pre></td></tr></table></figure><ol start="3"><li>valueOf():返回数组的本身。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> arr.valueOf()     <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>indexOf():返回指定元素在数组中出现的位置，如果没有出现则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.indexOf(<span class="string">'b'</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="number">4</span> arr.indexOf(<span class="string">'y'</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>indexOf 方法还可以接受第二个参数，表示搜索的开始位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)[(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)].indexOf(<span class="string">"a"</span>, <span class="number">1</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>上面代码从 1 号位置开始搜索字符 a，结果为-1，表示没有搜索到。</p><p>toString():返回数组的字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> arr.toString()     <span class="comment">// "1,2,3"</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line"><span class="number">5</span> arr.toString()     <span class="comment">// "1,2,3,4,5,6"</span></span><br></pre></td></tr></table></figure><ol start="4"><li>join():以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.join(<span class="string">' '</span>)     <span class="comment">// '1 2 3 4'</span></span><br><span class="line"><span class="number">4</span> arr.join(<span class="string">' | '</span>)     <span class="comment">// "1 | 2 | 3 | 4"</span></span><br><span class="line"><span class="number">5</span> arr.join()     <span class="comment">// "1,2,3,4"</span></span><br></pre></td></tr></table></figure><ol start="5"><li>concat():用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="number">2</span> <span class="keyword">var</span> b = arr.concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(b);        <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><ol start="6"><li>reverse():用于颠倒数组中元素的顺序，返回改变后的数组。注意，该方法将改变原数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.reverse() <span class="comment">// ["c", "b", "a"]</span></span><br><span class="line"><span class="number">4</span> <span class="built_in">console</span>.log(arr) <span class="comment">// ["c", "b", "a"]</span></span><br></pre></td></tr></table></figure><ol start="7"><li>slice():用于截取原数组的一部分，返回一个新数组，原数组不变。<br>slice(start,end)它的第一个参数为起始位置（从 0 开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span> arr.slice(<span class="number">0</span>)         <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"> <span class="number">4</span> arr.slice(<span class="number">1</span>)         <span class="comment">// ["b", "c"]</span></span><br><span class="line"> <span class="number">5</span> arr.slice(<span class="number">1</span>, <span class="number">2</span>)     <span class="comment">// ["b"]</span></span><br><span class="line"> <span class="number">6</span> arr.slice(<span class="number">2</span>, <span class="number">6</span>)     <span class="comment">// ["c"]</span></span><br><span class="line"> <span class="number">7</span> arr.slice()           <span class="comment">// ["a", "b", "c"]    无参数返回原数组</span></span><br><span class="line"> <span class="number">8</span></span><br><span class="line"> <span class="number">9</span> arr.slice(<span class="number">-2</span>)          <span class="comment">// ["b", "c"]    参数是负数，则表示倒数计算的位置</span></span><br><span class="line"><span class="number">10</span> arr.slice(<span class="number">-2</span>, <span class="number">-1</span>)     <span class="comment">// ["b"]</span></span><br></pre></td></tr></table></figure><ol start="8"><li>splice():删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。<br>splice(start,delNum,addElement1,addElement2,…)第一个参数是删除的起始位置，第二个参数是被删除的元素个数,第三个参数代表要替换的元素。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">4</span>, <span class="number">2</span>)     <span class="comment">// ["e", "f"]　　从原数组4号位置，删除了两个数组成员</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)     <span class="comment">// ["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)     <span class="comment">// ["e", "f"]　　原数组4号位置，删除了两个数组成员,又插入了两个新成员</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)         <span class="comment">// ["a", "b", "c", "d", 1, 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">-4</span>, <span class="number">2</span>)     <span class="comment">// ["c", "d"]    起始位置如果是负数，就表示从倒数位置开始删除</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)     <span class="comment">// []    如果只插入元素,第二个参数可以设为0</span></span><br><span class="line"><span class="number">4</span> conlose.log(arr)     <span class="comment">// [1, 2, 1, 1]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="number">2</span> arr.splice(<span class="number">2</span>)     <span class="comment">// [3, 4] 如果只有第一个参数，等同于将原数组在指定位置拆分成两个数组</span></span><br><span class="line"><span class="number">3</span> <span class="built_in">console</span>.log(arr)     <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><ol start="9"><li>sort():对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)[(<span class="string">"d"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>)].sort();</span><br><span class="line"><span class="number">2</span>; <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="number">3</span>;</span><br><span class="line">(<span class="number">4</span>)[(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)].sort();</span><br><span class="line"><span class="number">5</span>; <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="number">6</span>;</span><br><span class="line">(<span class="number">7</span>)[(<span class="number">11</span>, <span class="number">101</span>)].sort();</span><br><span class="line"><span class="number">8</span>; <span class="comment">// [101, 11]</span></span><br><span class="line"><span class="number">9</span>;</span><br><span class="line">(<span class="number">10</span>)[(<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>)].sort();</span><br><span class="line"><span class="number">11</span>; <span class="comment">// [10111, 1101, 111]</span></span><br></pre></td></tr></table></figure><p>上面代码的最后两个例子，需要特殊注意。sort 方法不是按照大小排序，而是按照对应字符串的字典顺序排序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以 101 排在 11 的前面。</p><p>如果想让 sort 方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于 0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>];</span><br><span class="line"> <span class="number">2</span> arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="number">3</span>   <span class="keyword">return</span> a - b;</span><br><span class="line"> <span class="number">4</span> &#125;)</span><br><span class="line"> <span class="number">5</span> <span class="comment">// [111, 1101, 10111]</span></span><br><span class="line"> <span class="number">6</span></span><br><span class="line"> <span class="number">7</span> <span class="keyword">var</span> arr1 = [</span><br><span class="line"> <span class="number">8</span>               &#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line"> <span class="number">9</span>               &#123; <span class="attr">name</span>: <span class="string">"李四"</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;,</span><br><span class="line"><span class="number">10</span>               &#123; <span class="attr">name</span>: <span class="string">"王五"</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;</span><br><span class="line"><span class="number">11</span>            ]</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span> arr1.sort(<span class="function"><span class="keyword">function</span> (<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line"><span class="number">14</span>   <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line"><span class="number">15</span> &#125;)</span><br><span class="line"><span class="number">16</span> <span class="comment">// [</span></span><br><span class="line"><span class="number">17</span> <span class="comment">//   &#123; name: "李四", age: 24 &#125;,</span></span><br><span class="line"><span class="number">18</span> <span class="comment">//   &#123; name: "王五", age: 28 &#125;,</span></span><br><span class="line"><span class="number">19</span> <span class="comment">//   &#123; name: "张三", age: 30 &#125;</span></span><br><span class="line"><span class="number">20</span> <span class="comment">// ]</span></span><br></pre></td></tr></table></figure><ol start="10"><li>map():对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="number">4</span>   <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="number">5</span> &#125;);</span><br><span class="line"><span class="number">6</span> <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> numbers</span><br><span class="line"><span class="number">9</span> <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>上面代码中，numbers 数组的所有成员都加上 1，组成一个新数组返回，原数组没有变化。</p><ol start="11"><li>filter():参数是一个函数，所有数组成员依次执行该函数，返回结果为 true 的成员组成一个新数组返回。该方法不会改变原数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">2</span> arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line"><span class="number">3</span>   <span class="keyword">return</span> (elem &gt; <span class="number">3</span>);</span><br><span class="line"><span class="number">4</span> &#125;)</span><br><span class="line"><span class="number">5</span> <span class="comment">// [4, 5]</span></span><br></pre></td></tr></table></figure><ol start="12"><li>arr.forEach(item,index,array){} 遍历，循环 类似 jquery 的 each<br>其中的 item 参数是数组中的内容，index 为其索引,array 表示数组本身</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法:"></a>字符串常用方法:</h2><ol><li>substring(start 开始位置的索引,end 结束位置索引) 截取的位置不包含结束位置的字符,只写一个参数表示从开始位置截取到最后</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.substring(<span class="number">1</span>) <span class="comment">//得到bcdefg  str.substring(1,3) //得到bc</span></span><br></pre></td></tr></table></figure><ol start="2"><li>slice(start 开始位置索引，end 结束位置索引) 基本和 substring 相似,区别在参数为负数時候。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.slice(<span class="number">1</span>)  <span class="comment">//bcdefg      str.substring(1,3) // bc</span></span><br></pre></td></tr></table></figure><ol start="3"><li>substr(start 开始位置索引,end 需要返回的字符个数)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.substr(<span class="number">1</span>) <span class="comment">//bcdefg      str.substr(1,1) //b</span></span><br></pre></td></tr></table></figure><ol start="4"><li>charAt(index) 方法返回指定索引位置处的字符。如果超出有效范围(0 与字符串长度减一)的索引值返回空字符串.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> str=<span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="number">2.</span> str.charAt(<span class="number">2</span>) <span class="comment">// c</span></span><br></pre></td></tr></table></figure><ol start="5"><li>index(string) 返回 String 对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcdefga'</span>  str.indexOf(<span class="string">'a'</span>)  <span class="comment">// 0   str.indexOf('h') //-1</span></span><br></pre></td></tr></table></figure><ol start="6"><li>lastIndexOf(string) 倒叙查找<br>返回 String 对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcdefga'</span>     str.lastIndexOf(<span class="string">'a'</span>) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ol start="7"><li>split(str) 将字符串以参数分割为数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcadeafg'</span>     str.split(<span class="string">'a'</span>) <span class="comment">//["", "bc", "de", "fg"]</span></span><br></pre></td></tr></table></figure><ol start="8"><li><p>toLowerCase 方法返回一个字符串，该字符串中的字母被转换成小写。</p></li><li><p>toUpperCase 方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。</p></li><li><p>match() – 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配</p></li><li><p>search 方法返回与正则表达式查找内容匹配的第一个字符串的位置。</p></li><li><p>replace 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用</title>
      <link href="/keaichong.github.io/2019/02/02/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/keaichong.github.io/2019/02/02/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-的-3-个区域"><a href="#Git-的-3-个区域" class="headerlink" title="Git 的 3 个区域"></a>Git 的 3 个区域</h3><ol><li><strong>工作目录</strong>(working directory)<br>简单理解就是需要进行版本的某个文件夹（假设为 test），这个文件夹有一些特殊之处——多了.git 这个隐藏的文件夹。</li><li><strong>暂存区域</strong>（Stage 或 Index）<br>暂存区可以理解为一个虚拟工作区，这个虚拟工作区会跟踪工作区的文件变化（增删改等操作）。这个工作区的位于.git 文件夹下的 index 目录下。除非是绕过暂存区直接提交，否则 Git 想把修改提交上去，就必须将修改存入暂存区最后才能 commit。每次提交的是暂存区所对应的文件快照。</li><li><strong>本地仓库</strong>(repository)<br>存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了</li></ol><h3 id="文件的三种状态"><a href="#文件的三种状态" class="headerlink" title="文件的三种状态"></a>文件的三种状态</h3><ol><li><p><strong>已修改</strong>(modified)</p></li><li><p><strong>已暂存</strong>(staged)</p></li><li><p><strong>已提交</strong>(committed)​</p><a id="more"></a><h3 id="暂存区作用"><a href="#暂存区作用" class="headerlink" title="暂存区作用"></a>暂存区作用</h3></li><li><p>修改了 4 个文件，在不放弃任何修改的情况下，其中一个文件不想提交，如何操作？（没 add : git add 已经 add: git reset –soft ）</p></li><li>修改到一半的文件，突然间不需要或者放弃修改了，怎么恢复未修改前文件？ (git checkout)</li><li>代码写一半，被打断去做其他功能开发，未完成代码保存？(git stash)</li><li>代码写一半，发现忘记切换分支了？(git stash &amp; git checkout)</li><li>代码需要回滚了？（git reset）</li><li>等等</li></ol><h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><ol><li>在工作目录中修改某些文件。</li><li>对修改后的文件进行快照，然后保存到暂存区域。</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ol><h3 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><blockquote><p>可以在本地的任意目录下，创建项目文件夹 demo，此项目文件夹就是我们的工作目录。</p></blockquote><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><blockquote><p>打开 Git bash 窗口，进入工作目录，输入下面的命令，创建本地仓库。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><blockquote><p>执行完该命令后，在工作目录下会生成一个隐藏的目录.git，.git 目录就是我们的本地仓库，记录所有版本。</p></blockquote><h3 id="把已修改添加到暂存区"><a href="#把已修改添加到暂存区" class="headerlink" title="把已修改添加到暂存区"></a>把已修改添加到暂存区</h3><p>$ git add . 把工作目录中所有的修改，都提交到<strong>暂存区</strong>。<br>在第一次 add 都还没有进行的时候，我们的暂存区还没有被创建出来，git 的对象库中也是空的。当我们执行 git add 的时候，.git 目录下面多了个 index 文件，这个 index 文件就是我们所说的暂存区，</p><blockquote><p>暂存区在哪里？<br>当第一次执行 git add 的时候会在.git 文件夹中生成一个 index 文件，这就是暂存区</p></blockquote><h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>$ git status<br>git status 可以查看当前工作区中是否有可以暂存的文件、是否有可以提交的内容。</p><h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><p>$ git commit -m ‘提交注释’<br><strong>注意</strong>：git commit 的-m 参数是本次提交说明，必须填写，可以方便查看历史提交中的修改记录。</p><blockquote><p>注意: git init 只需要写一次</p></blockquote><h3 id="git-远程仓库"><a href="#git-远程仓库" class="headerlink" title="git-远程仓库"></a>git-远程仓库</h3><blockquote><p>代码托管平台(github/码云)</p></blockquote><ol><li>注册</li><li>登录</li><li>新建远程仓库 (右上角+-&gt;new-&gt;命名-&gt;create)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 关联远程仓库</span><br><span class="line">git remote add origin 仓库地址</span><br><span class="line">// 推送代码</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 开发功能1 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释1&quot;</span><br><span class="line">// 开发功能2 -&gt; 完成</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释2&quot;</span><br><span class="line">// 推送代码</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h4><table><thead><tr><th>序号</th><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>01</td><td><strong>git config –global user.name “xxx”</strong></td><td>设置用户名</td></tr><tr><td>02</td><td><strong>git config –global user.email <a href="mailto:xxx@example.com" target="_blank" rel="noopener">xxx@example.com</a></strong></td><td>设置邮箱</td></tr><tr><td>03</td><td><strong>git init</strong></td><td>初始化本地仓库</td></tr><tr><td>04</td><td><strong>git add .</strong></td><td>把修改保存到暂存区</td></tr><tr><td>05</td><td><strong>git status</strong></td><td>检查当前文件状态</td></tr><tr><td>06</td><td><strong>git commit -m “msg”</strong></td><td>提交到本地仓库</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3伸缩布局盒模型</title>
      <link href="/keaichong.github.io/2019/02/02/CSS3%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/keaichong.github.io/2019/02/02/CSS3%E4%BC%B8%E7%BC%A9%E5%B8%83%E5%B1%80%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="伸缩布局基本概念"><a href="#伸缩布局基本概念" class="headerlink" title="伸缩布局基本概念"></a>伸缩布局基本概念</h3><blockquote><p>CSS3 引入的布局模式 Flexbox 布局，主要思想是让容器有能力让其子项目能够改变其宽度，高度，以最佳方式填充可用空间。Flex 容器使用 Flex 项目可以自动放大与收缩，用来填补可用的空闲空间。更重要的是，Flexbox 布局方向不可预知，不像常规的布局(块级从上到下，内联从左到右)，而那些常规的适合页面布局，但对于支持大型或者复杂的应<br>布局解决方案 没有具体数字,通过一系列属性控制</p></blockquote><h3 id="伸缩盒模型术语"><a href="#伸缩盒模型术语" class="headerlink" title="伸缩盒模型术语"></a>伸缩盒模型术语</h3><blockquote><p>伸缩盒子中有两条轴 -&gt;主轴和侧轴<br><strong>主轴</strong>: 默认水平从左往右显示</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置主轴方向 */</span></span><br><span class="line">flex-direction:row | column</span><br><span class="line"><span class="comment">/* 设置元素在主轴方向对齐方式 */</span></span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-start</span>;  主轴开始位置对齐</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-end</span>;    主轴结束位置对齐</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-center</span>;    主轴中间显示</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span>;    两端对齐中间自适应</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-around</span>;  环绕对齐</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>侧轴</strong> :始终垂直与主轴</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置元素在侧轴方向对齐方式 */</span></span><br><span class="line">align-items:flex-start | flex-end | center | baseline | stretch</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">flex-start</span>:伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边。</span><br><span class="line"><span class="selector-tag">flex-end</span>:伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边。</span><br><span class="line"><span class="selector-tag">center</span>:伸缩项目的外边距盒在该行的侧轴上居中放置。</span><br><span class="line"><span class="selector-tag">baseline</span>:如果伸缩项目的行内轴与侧轴为同一条，则该值和<span class="selector-tag">flex-start</span>等效。其它情况下，该值将参与基线对齐。所有参与该对齐方式的伸缩项目将按下列方式排列：首先将这些伸缩项目的基线进行对齐，随后其中基线至侧轴起点边的外边距距离最长的那个项目将紧靠住该行在侧轴起点的边。</span><br><span class="line"><span class="selector-tag">stretch</span>:拉伸(和父盒子宽高一样)</span><br><span class="line">### <span class="selector-tag">Flex</span>容器属性</span><br></pre></td></tr></table></figure><blockquote><p>要改变元素的模式为伸缩容器,需要使用 display 属性.</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display: flex | inline-flex;</span><br></pre></td></tr></table></figure><blockquote><p>inline-flex 内联伸缩容器</p></blockquote><h3 id="flex-wrap-换行"><a href="#flex-wrap-换行" class="headerlink" title="flex-wrap 换行"></a>flex-wrap 换行</h3><blockquote><p>默认情况下，Flex 项目都尽可能在一行显示，会导致子元素原来的宽高失效.所以你可以根据 flex-wrap 的属性值来改变，让 Flex 项目多行显示。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-wrap: warp | nowarp 默认nowarp;</span><br></pre></td></tr></table></figure><h3 id="元素换行后对齐方式"><a href="#元素换行后对齐方式" class="headerlink" title="元素换行后对齐方式"></a>元素换行后对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">align-content: flex-start | flex-end | center |space-between |space-around|</span><br><span class="line">  <span class="selector-tag">strech</span>;</span><br></pre></td></tr></table></figure><h3 id="设置子元素属性"><a href="#设置子元素属性" class="headerlink" title="设置子元素属性"></a>设置子元素属性</h3><p>伸缩比 flex:1</p><h3 id="设置元素自身对齐方式"><a href="#设置元素自身对齐方式" class="headerlink" title="设置元素自身对齐方式"></a>设置元素自身对齐方式</h3><p>align-self: center|auto |flex-start| flex-end</p><h3 id="设置子元素排列顺序"><a href="#设置子元素排列顺序" class="headerlink" title="设置子元素排列顺序"></a>设置子元素排列顺序</h3><p>order:1,2,3 默认 0 数字越小越靠前显示</p>]]></content>
      
      
      
        <tags>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局总结</title>
      <link href="/keaichong.github.io/2019/02/02/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
      <url>/keaichong.github.io/2019/02/02/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="响应式布局概念"><a href="#响应式布局概念" class="headerlink" title="响应式布局概念"></a>响应式布局概念</h3><blockquote><p>Responsive Web Design（响应式布局）这个名词是 Ethan Marcotte 在 2010 年提出.简单说呢就针对不同的屏幕分辨率应用不同的 CSS 样式。比如在电脑、Pad 设备上，屏幕比较宽，就可以一行放多个 Div。到了手机上，或者 Pad 竖着拿的的时候，一行就只放 1 到 2 个 Div 就差不多了。这样在移动设备上,无论是字体大小还是页面布局就不会显得很局促.一切都是为了客户的体验度.</p></blockquote><h3 id="meta-标签设置"><a href="#meta-标签设置" class="headerlink" title="meta 标签设置"></a>meta 标签设置</h3><blockquote><p>下面的这段话在响应式布局里面必不可少</p></blockquote><h5 id="网页宽度调整"><a href="#网页宽度调整" class="headerlink" title="网页宽度调整"></a>网页宽度调整</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">上面这行代码的意思是：网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1.0），即网页初始大小占屏幕面积的100%。</span><br><span class="line">当然这里除了这两个属性之外,还可以加上其他几个属性,比较完整的是这个样子:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line">maximum-scale=1.0,</span><br><span class="line">minimum-scale=1.0;可视区域的缩放级别，maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上,minimum-scale=1.0当然就是禁止缩小了。user-scalable:是否可对页面进行缩放，no</span><br><span class="line">禁止缩放</span><br><span class="line">所有主流浏览器都支持这个设置，包括IE9。对于那些老式浏览器（主要是IE6、7、8），需要另外重写。</span><br></pre></td></tr></table></figure><h3 id="不使用绝对宽度和字体"><a href="#不使用绝对宽度和字体" class="headerlink" title="不使用绝对宽度和字体"></a>不使用绝对宽度和字体</h3><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。<span class="selector-tag">css</span>代码不能指定像素宽度：<span class="selector-tag">width</span>: <span class="selector-tag">number</span></span><br><span class="line">  <span class="selector-tag">px</span>;</span><br><span class="line">只能指定百分比宽度：<span class="selector-tag">width</span>: <span class="selector-tag">x</span>%;</span><br><span class="line">或者自动：<span class="selector-tag">width</span>: <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><h3 id="media-query-媒体查询"><a href="#media-query-媒体查询" class="headerlink" title="media query 媒体查询"></a>media query 媒体查询</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码,表示正常情况下 div 的 width 还是维持在 30%没有变化,但是当检测到 screen 的最大宽度是 600px 的时候,就将执行@media 里面的 css,其实就是相当于利用了层叠样式表的特性,@media 里面的代码将原来的覆盖了.由此可见,@media 放在 div 样式前面可以吗?</p><p>当然,既然又 max-width,就会有 min-width,很多初学者一直没搞清楚这两个的区别,老是搞混淆.其实记住一点. max-width 就是当屏幕小于等于多少的时候执行(&lt;=) min-width 就是当屏幕大于等于多少的时候执行(&gt;=)</p><p>所以,有时候精确判断的时候,可以写 屏幕&gt;=多少 and 屏幕 &lt;= 多少的时候执行:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">601px</span>) and (max-width: <span class="number">980px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码相当于,当 屏幕宽度 &gt;= 601px &amp;&amp; 屏幕宽度 &lt;= 980px 的时候,页面上实际上在一行显示 2 个 div,因为 2 个 45%就已经是 90%,剩下的那个肯定就被挤下去了.</p><p>当屏幕宽度&lt;=600px 的时候,就让一个 div 占满一行(95%)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
